"use strict";(self.webpackChunktlm_doc_architecture=self.webpackChunktlm_doc_architecture||[]).push([[3459],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var r=t(96540);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}},42276:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"servicios-corporativos/servicio-track-trace/vista-implementacion","title":"7. Vista de implementaci\xf3n","description":"7.1 Estructura del proyecto","source":"@site/docs/servicios-corporativos/servicio-track-trace/07-vista-implementacion.md","sourceDirName":"servicios-corporativos/servicio-track-trace","slug":"/servicios-corporativos/servicio-track-trace/vista-implementacion","permalink":"/tlm-doc-architecture/docs/servicios-corporativos/servicio-track-trace/vista-implementacion","draft":false,"unlisted":false,"editUrl":"https://github.com/jclemente-tlm/tlm-doc-architecture/edit/main/docs/servicios-corporativos/servicio-track-trace/07-vista-implementacion.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"6. Vista de tiempo de ejecuci\xf3n","permalink":"/tlm-doc-architecture/docs/servicios-corporativos/servicio-track-trace/vista-tiempo-ejecucion"},"next":{"title":"8. Conceptos transversales","permalink":"/tlm-doc-architecture/docs/servicios-corporativos/servicio-track-trace/conceptos-transversales"}}');var a=t(74848),i=t(28453);const s={},c="7. Vista de implementaci\xf3n",o={},l=[{value:"7.1 Estructura del proyecto",id:"71-estructura-del-proyecto",level:2},{value:"7.2 Dependencias principales",id:"72-dependencias-principales",level:2},{value:"7.1 Estructura del sistema",id:"71-estructura-del-sistema",level:2},{value:"7.1.1 Organizaci\xf3n de c\xf3digo",id:"711-organizaci\xf3n-de-c\xf3digo",level:3},{value:"7.1.2 M\xf3dulos principales",id:"712-m\xf3dulos-principales",level:3},{value:"Event Store Module",id:"event-store-module",level:4},{value:"Read Model Projections",id:"read-model-projections",level:4},{value:"7.2 Configuraci\xf3n de despliegue",id:"72-configuraci\xf3n-de-despliegue",level:2},{value:"7.2.1 Configuraci\xf3n Docker",id:"721-configuraci\xf3n-docker",level:3},{value:"7.2.2 Despliegue en Kubernetes",id:"722-despliegue-en-kubernetes",level:3},{value:"7.2.3 Configuraci\xf3n de Ambiente",id:"723-configuraci\xf3n-de-ambiente",level:3},{value:"7.2.4 Variables de Entorno",id:"724-variables-de-entorno",level:3},{value:"7.3 Infraestructura como C\xf3digo",id:"73-infraestructura-como-c\xf3digo",level:2},{value:"7.3.1 Configuraci\xf3n Terraform",id:"731-configuraci\xf3n-terraform",level:3},{value:"7.3.2 Valores de Helm Chart",id:"732-valores-de-helm-chart",level:3},{value:"7.4 Migraci\xf3n y Versionado",id:"74-migraci\xf3n-y-versionado",level:2},{value:"7.4.1 Migraciones de Base de Datos",id:"741-migraciones-de-base-de-datos",level:3},{value:"7.4.2 Event Schema Evolution",id:"742-event-schema-evolution",level:3},{value:"7.5 Estrategia de Deployment",id:"75-estrategia-de-deployment",level:2},{value:"7.5.1 Despliegue Blue-Green",id:"751-despliegue-blue-green",level:3},{value:"7.5.2 Pipeline de CI/CD",id:"752-pipeline-de-cicd",level:3},{value:"7.5.3 Monitoring y Observabilidad",id:"753-monitoring-y-observabilidad",level:3},{value:"7.6 Consideraciones de Seguridad",id:"76-consideraciones-de-seguridad",level:2},{value:"7.6.1 Configuraci\xf3n de Seguridad de Contenedores",id:"761-configuraci\xf3n-de-seguridad-de-contenedores",level:3},{value:"7.6.2 Pol\xedticas de Red",id:"762-pol\xedticas-de-red",level:3},{value:"7.7 Soluci\xf3n de Problemas y Depuraci\xf3n",id:"77-soluci\xf3n-de-problemas-y-depuraci\xf3n",level:2},{value:"7.7.1 Configuraci\xf3n de Logging",id:"771-configuraci\xf3n-de-logging",level:3},{value:"7.7.2 Debugging Tools",id:"772-debugging-tools",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"7-vista-de-implementaci\xf3n",children:"7. Vista de implementaci\xf3n"})}),"\n",(0,a.jsx)(n.h2,{id:"71-estructura-del-proyecto",children:"7.1 Estructura del proyecto"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Componente"}),(0,a.jsx)(n.th,{children:"Ubicaci\xf3n"}),(0,a.jsx)(n.th,{children:"Tecnolog\xeda"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Track & Trace API"})}),(0,a.jsx)(n.td,{children:"/src/TrackTraceApi"}),(0,a.jsx)(n.td,{children:".NET 8 Web API"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Event Processor"})}),(0,a.jsx)(n.td,{children:"/src/TrackTraceProcessor"}),(0,a.jsx)(n.td,{children:".NET 8 Worker"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"PostgreSQL"})}),(0,a.jsx)(n.td,{children:"AWS RDS"}),(0,a.jsx)(n.td,{children:"PostgreSQL 15+"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Redis"})}),(0,a.jsx)(n.td,{children:"AWS ElastiCache"}),(0,a.jsx)(n.td,{children:"Redis 7+"})]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"72-dependencias-principales",children:"7.2 Dependencias principales"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Dependencia"}),(0,a.jsx)(n.th,{children:"Versi\xf3n"}),(0,a.jsx)(n.th,{children:"Prop\xf3sito"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Entity Framework"})}),(0,a.jsx)(n.td,{children:"8.0+"}),(0,a.jsx)(n.td,{children:"ORM"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"FluentValidation"})}),(0,a.jsx)(n.td,{children:"11.0+"}),(0,a.jsx)(n.td,{children:"Validaci\xf3n"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"MediatR"})}),(0,a.jsx)(n.td,{children:"12.0+"}),(0,a.jsx)(n.td,{children:"CQRS"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Serilog"})}),(0,a.jsx)(n.td,{children:"3.0+"}),(0,a.jsx)(n.td,{children:"Logging"})]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"71-estructura-del-sistema",children:"7.1 Estructura del sistema"}),"\n",(0,a.jsx)(n.h3,{id:"711-organizaci\xf3n-de-c\xf3digo",children:"7.1.1 Organizaci\xf3n de c\xf3digo"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"src/\n\u251c\u2500\u2500 TLM.Services.TrackTrace.API/           # REST API Layer\n\u2502   \u251c\u2500\u2500 Controllers/                       # API Controllers\n\u2502   \u251c\u2500\u2500 Middleware/                        # HTTP Middleware\n\u2502   \u251c\u2500\u2500 Configuration/                     # Configuraci\xf3n DI\n\u2502   \u2514\u2500\u2500 Program.cs                         # Application Entry Point\n\u251c\u2500\u2500 TLM.Services.TrackTrace.Application/   # Application Layer\n\u2502   \u251c\u2500\u2500 Commands/                          # CQRS Commands\n\u2502   \u251c\u2500\u2500 Queries/                           # CQRS Queries\n\u2502   \u251c\u2500\u2500 Handlers/                          # Command/Query Handlers\n\u2502   \u251c\u2500\u2500 Validators/                        # FluentValidation Rules\n\u2502   \u251c\u2500\u2500 Services/                          # Servicios de Aplicaci\xf3n\n\u2502   \u2514\u2500\u2500 DTOs/                              # Data Transfer Objects\n\u251c\u2500\u2500 TLM.Services.TrackTrace.Domain/        # Domain Layer\n\u2502   \u251c\u2500\u2500 Entities/                          # Domain Entities\n\u2502   \u251c\u2500\u2500 ValueObjects/                      # Value Objects\n\u2502   \u251c\u2500\u2500 Events/                            # Domain Events\n\u2502   \u251c\u2500\u2500 Repositories/                      # Repository Abstractions\n\u2502   \u2514\u2500\u2500 Services/                          # Servicios de Dominio\n\u251c\u2500\u2500 TLM.Services.TrackTrace.Infrastructure/ # Infrastructure Layer\n\u2502   \u251c\u2500\u2500 EventStore/                        # Implementaci\xf3n Event Store\n\u2502   \u251c\u2500\u2500 ReadModels/                        # Read Model Projections\n\u2502   \u251c\u2500\u2500 EventBus/                           # Event Bus Integration\n\u2502   \u251c\u2500\u2500 Authentication/                    # OAuth2/JWT\n\u2502   \u2514\u2500\u2500 Monitoring/                        # Telemetr\xeda y M\xe9tricas\n\u2514\u2500\u2500 TLM.Services.TrackTrace.Tests/         # Test Projects\n    \u251c\u2500\u2500 Unit/                              # Unit Tests\n    \u251c\u2500\u2500 Integration/                       # Integration Tests\n    \u2514\u2500\u2500 Performance/                       # Pruebas de Carga\n"})}),"\n",(0,a.jsx)(n.h3,{id:"712-m\xf3dulos-principales",children:"7.1.2 M\xf3dulos principales"}),"\n",(0,a.jsx)(n.h4,{id:"event-store-module",children:"Event Store Module"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'// Core abstraction\npublic interface IEventStore\n{\n    Task<EventStream> GetEventsAsync(string streamId, long fromVersion = 0);\n    Task<AppendResult> AppendEventsAsync(string streamId, long expectedVersion,\n                                       IEnumerable<DomainEvent> events);\n    Task<Snapshot> GetSnapshotAsync(string streamId);\n    Task SaveSnapshotAsync(string streamId, Snapshot snapshot);\n}\n\n// Implementaci\xf3n PostgreSQL\npublic class PostgreSqlEventStore : IEventStore\n{\n    private readonly IDbContext _context;\n    private readonly IEventSerializer _serializer;\n\n    public async Task<AppendResult> AppendEventsAsync(string streamId,\n                                                     long expectedVersion,\n                                                     IEnumerable<DomainEvent> events)\n    {\n        using var transaction = await _context.BeginTransactionAsync();\n\n        // Optimistic concurrency check\n        var currentVersion = await GetStreamVersionAsync(streamId);\n        if (currentVersion != expectedVersion)\n            throw new ConcurrencyException($"Expected version {expectedVersion}, got {currentVersion}");\n\n        // Serialize and persist events\n        foreach (var @event in events)\n        {\n            var eventData = _serializer.Serialize(@event);\n            await _context.Events.AddAsync(new EventRecord\n            {\n                StreamId = streamId,\n                Version = ++currentVersion,\n                EventType = @event.GetType().Name,\n                Data = eventData,\n                Timestamp = DateTimeOffset.UtcNow\n            });\n        }\n\n        await _context.SaveChangesAsync();\n        await transaction.CommitAsync();\n\n        return new AppendResult { Success = true, NewVersion = currentVersion };\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"read-model-projections",children:"Read Model Projections"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'// Entity timeline projection\npublic class EntityTimelineProjection : IEventHandler<EntityEvent>\n{\n    private readonly IReadModelStore _readStore;\n\n    public async Task Handle(EntityEvent @event)\n    {\n        var timeline = await _readStore.GetTimelineAsync(@event.EntityId) ??\n                      new EntityTimeline(@event.EntityId);\n\n        timeline.AddEvent(new TimelineEvent\n        {\n            EventId = @event.Id,\n            Timestamp = @event.Timestamp,\n            EventType = @event.GetType().Name,\n            Data = @event.ToTimelineData(),\n            Metadata = @event.Metadata\n        });\n\n        await _readStore.SaveTimelineAsync(timeline);\n    }\n}\n\n// Proyecci\xf3n de m\xe9tricas de rendimiento\npublic class PerformanceMetricsProjection : IEventHandler<OperationalEvent>\n{\n    private readonly ITimeSeriesStore _timeSeriesStore;\n\n    public async Task Handle(OperationalEvent @event)\n    {\n        var metrics = CalculateMetrics(@event);\n\n        await _timeSeriesStore.WritePointAsync(new MetricPoint\n        {\n            Measurement = "operational_performance",\n            Tags = new Dictionary<string, string>\n            {\n                ["tenant_id"] = @event.TenantId,\n                ["entity_type"] = @event.EntityType,\n                ["operation"] = @event.OperationType\n            },\n            Fields = metrics,\n            Timestamp = @event.Timestamp\n        });\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"72-configuraci\xf3n-de-despliegue",children:"7.2 Configuraci\xf3n de despliegue"}),"\n",(0,a.jsx)(n.h3,{id:"721-configuraci\xf3n-docker",children:"7.2.1 Configuraci\xf3n Docker"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dockerfile",children:'# Multi-stage build\nFROM mcr.microsoft.com/dotnet/sdk:8.0 AS build\nWORKDIR /src\n\n# Copy project files\nCOPY ["src/TLM.Services.TrackTrace.API/", "TLM.Services.TrackTrace.API/"]\nCOPY ["src/TLM.Services.TrackTrace.Application/", "TLM.Services.TrackTrace.Application/"]\nCOPY ["src/TLM.Services.TrackTrace.Domain/", "TLM.Services.TrackTrace.Domain/"]\nCOPY ["src/TLM.Services.TrackTrace.Infrastructure/", "TLM.Services.TrackTrace.Infrastructure/"]\n\n# Restore dependencies\nRUN dotnet restore "TLM.Services.TrackTrace.API/TLM.Services.TrackTrace.API.csproj"\n\n# Build application\nRUN dotnet build "TLM.Services.TrackTrace.API/TLM.Services.TrackTrace.API.csproj" -c Release -o /app/build\n\n# Publish\nFROM build AS publish\nRUN dotnet publish "TLM.Services.TrackTrace.API/TLM.Services.TrackTrace.API.csproj" -c Release -o /app/publish\n\n# Runtime image\nFROM mcr.microsoft.com/dotnet/aspnet:8.0 AS runtime\nWORKDIR /app\n\n# Seguridad: Ejecutar como usuario no-root\nRUN adduser --disabled-password --home /app --gecos \'\' appuser && chown -R appuser /app\nUSER appuser\n\nCOPY --from=publish /app/publish .\nEXPOSE 8080\n\n# Verificaci\xf3n de salud\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:8080/health || exit 1\n\nENTRYPOINT ["dotnet", "TLM.Services.TrackTrace.API.dll"]\n'})}),"\n",(0,a.jsx)(n.h3,{id:"722-despliegue-en-kubernetes",children:"7.2.2 Despliegue en Kubernetes"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: tracktrace-api\n  namespace: corporate-services\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: tracktrace-api\n  template:\n    metadata:\n      labels:\n        app: tracktrace-api\n    spec:\n      containers:\n      - name: api\n        image: tlm/tracktrace-api:latest\n        ports:\n        - containerPort: 8080\n        env:\n        - name: ASPNETCORE_ENVIRONMENT\n          value: "Production"\n        - name: ConnectionStrings__EventStore\n          valueFrom:\n            secretKeyRef:\n              name: db-secrets\n              key: eventstore-connection\n        - name: EventBus__Configuration\n          valueFrom:\n            configMapKeyRef:\n              name: eventbus-config\n              key: bootstrap-servers\n        resources:\n          requests:\n            memory: "256Mi"\n            cpu: "250m"\n          limits:\n            memory: "512Mi"\n            cpu: "500m"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8080\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8080\n          initialDelaySeconds: 5\n          periodSeconds: 5\n'})}),"\n",(0,a.jsx)(n.h3,{id:"723-configuraci\xf3n-de-ambiente",children:"7.2.3 Configuraci\xf3n de Ambiente"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'# application.yml\nDatabase:\n  EventStore:\n    ConnectionString: "Host=${DB_HOST};Database=${DB_NAME};Username=${DB_USER};Password=${DB_PASSWORD}"\n    CommandTimeout: 30\n    MaxPoolSize: 100\n\n  ReadModel:\n    ConnectionString: "Host=${READ_DB_HOST};Database=${READ_DB_NAME};Username=${READ_DB_USER};Password=${READ_DB_PASSWORD}"\n    MaxPoolSize: 50\n\nEventSourcing:\n  SnapshotFrequency: 100  # Create snapshot every 100 events\n  MaxEventsInMemory: 1000\n\nAuthentication:\n  Authority: "${KEYCLOAK_AUTHORITY}"\n  Audience: "tracktrace-api"\n  ValidateLifetime: true\n  ClockSkew: 300  # 5 minutes\n\nEventBus:\n  Configuration: "${EVENTBUS_CONFIG}"\n  GroupId: "tracktrace-consumers"\n  Topics:\n    Events: "track-trace-events"\n    Commands: "track-trace-commands"\n    Notifications: "system-notifications"\n\nMonitoring:\n  OpenTelemetry:\n    Endpoint: "${OTEL_EXPORTER_OTLP_ENDPOINT}"\n    ServiceName: "track-trace-api"\n\n  Prometheus:\n    Enabled: true\n    Port: 9090\n    Path: "/metrics"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"724-variables-de-entorno",children:"7.2.4 Variables de Entorno"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Variable"}),(0,a.jsx)(n.th,{children:"Descripci\xf3n"}),(0,a.jsx)(n.th,{children:"Valor por Defecto"}),(0,a.jsx)(n.th,{children:"Requerido"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"DB_HOST"})}),(0,a.jsx)(n.td,{children:"Host del Event Store PostgreSQL"}),(0,a.jsx)(n.td,{children:"localhost"}),(0,a.jsx)(n.td,{children:"\u2705"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"DB_NAME"})}),(0,a.jsx)(n.td,{children:"Nombre de la base de datos"}),(0,a.jsx)(n.td,{children:"tracktracedb"}),(0,a.jsx)(n.td,{children:"\u2705"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"DB_USER"})}),(0,a.jsx)(n.td,{children:"Usuario de base de datos"}),(0,a.jsx)(n.td,{children:"tracktraceuser"}),(0,a.jsx)(n.td,{children:"\u2705"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"DB_PASSWORD"})}),(0,a.jsx)(n.td,{children:"Contrase\xf1a de base de datos"}),(0,a.jsx)(n.td,{children:"-"}),(0,a.jsx)(n.td,{children:"\u2705"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"READ_DB_HOST"})}),(0,a.jsx)(n.td,{children:"Host del Read Model PostgreSQL"}),(0,a.jsx)(n.td,{children:"localhost"}),(0,a.jsx)(n.td,{children:"\u2705"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"KEYCLOAK_AUTHORITY"})}),(0,a.jsx)(n.td,{children:"Authority del proveedor OAuth2"}),(0,a.jsx)(n.td,{children:"-"}),(0,a.jsx)(n.td,{children:"\u2705"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"EVENTBUS_CONFIG"})}),(0,a.jsx)(n.td,{children:"Event Bus configuration"}),(0,a.jsx)(n.td,{children:"localhost:5672"}),(0,a.jsx)(n.td,{children:"\u2705"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"OTEL_EXPORTER_OTLP_ENDPOINT"})}),(0,a.jsx)(n.td,{children:"Endpoint OpenTelemetry"}),(0,a.jsx)(n.td,{children:"-"}),(0,a.jsx)(n.td,{children:"\u274c"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"LOG_LEVEL"})}),(0,a.jsx)(n.td,{children:"Nivel de logging"}),(0,a.jsx)(n.td,{children:"Information"}),(0,a.jsx)(n.td,{children:"\u274c"})]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"73-infraestructura-como-c\xf3digo",children:"7.3 Infraestructura como C\xf3digo"}),"\n",(0,a.jsx)(n.h3,{id:"731-configuraci\xf3n-terraform",children:"7.3.1 Configuraci\xf3n Terraform"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-hcl",children:'# Base de Datos Event Store\nresource "aws_rds_instance" "event_store" {\n  identifier     = "tracktrace-eventstore-${var.environment}"\n  engine         = "postgres"\n  engine_version = "16.1"\n  instance_class = "db.r6g.large"\n\n  allocated_storage     = 100\n  max_allocated_storage = 1000\n  storage_type         = "gp3"\n  storage_encrypted    = true\n\n  db_name  = "tracktracedb"\n  username = var.db_username\n  password = var.db_password\n\n  backup_retention_period = 7\n  backup_window          = "03:00-04:00"\n  maintenance_window     = "sun:04:00-sun:05:00"\n\n  multi_az               = true\n  publicly_accessible    = false\n  vpc_security_group_ids = [aws_security_group.rds.id]\n  db_subnet_group_name   = aws_db_subnet_group.main.name\n\n  performance_insights_enabled = true\n  monitoring_interval          = 60\n  monitoring_role_arn         = aws_iam_role.rds_monitoring.arn\n\n  tags = {\n    Name        = "TrackTrace EventStore"\n    Environment = var.environment\n    Service     = "track-trace"\n  }\n}\n\n# Base de Datos Read Model\nresource "aws_rds_instance" "read_model" {\n  identifier     = "tracktrace-readmodel-${var.environment}"\n  engine         = "postgres"\n  engine_version = "16.1"\n  instance_class = "db.t4g.medium"\n\n  allocated_storage = 50\n  storage_type     = "gp3"\n  storage_encrypted = true\n\n  db_name  = "tracktraceread"\n  username = var.read_db_username\n  password = var.read_db_password\n\n  backup_retention_period = 3\n  multi_az               = false\n  publicly_accessible    = false\n\n  vpc_security_group_ids = [aws_security_group.rds.id]\n  db_subnet_group_name   = aws_db_subnet_group.main.name\n\n  tags = {\n    Name        = "TrackTrace ReadModel"\n    Environment = var.environment\n    Service     = "track-trace"\n  }\n}\n\n# ECS Service\nresource "aws_ecs_service" "tracktrace_api" {\n  name            = "tracktrace-api"\n  cluster         = aws_ecs_cluster.main.id\n  task_definition = aws_ecs_task_definition.tracktrace_api.arn\n  desired_count   = 3\n\n  launch_type = "FARGATE"\n\n  network_configuration {\n    subnets         = var.private_subnet_ids\n    security_groups = [aws_security_group.api.id]\n  }\n\n  load_balancer {\n    target_group_arn = aws_lb_target_group.tracktrace_api.arn\n    container_name   = "tracktrace-api"\n    container_port   = 8080\n  }\n\n  service_registries {\n    registry_arn = aws_service_discovery_service.tracktrace_api.arn\n  }\n\n  tags = {\n    Environment = var.environment\n    Service     = "track-trace"\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"732-valores-de-helm-chart",children:"7.3.2 Valores de Helm Chart"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'# values.yaml\nreplicaCount: 3\n\nimage:\n  repository: tlm/track-trace-api\n  tag: "1.0.0"\n  pullPolicy: IfNotPresent\n\nservice:\n  type: ClusterIP\n  port: 8080\n  targetPort: 8080\n\ningress:\n  enabled: true\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    cert-manager.io/cluster-issuer: letsencrypt-prod\n    nginx.ingress.kubernetes.io/use-regex: "true"\n  hosts:\n    - host: api.tracktrace.talma.pe\n      paths:\n        - path: /\n          pathType: Prefix\n  tls:\n    - secretName: tracktrace-api-tls\n      hosts:\n        - api.tracktrace.talma.pe\n\nresources:\n  limits:\n    cpu: 1000m\n    memory: 2Gi\n  requests:\n    cpu: 500m\n    memory: 1Gi\n\nautoscaling:\n  enabled: true\n  minReplicas: 3\n  maxReplicas: 10\n  targetCPUUtilizationPercentage: 70\n  targetMemoryUtilizationPercentage: 80\n\nnodeSelector:\n  kubernetes.io/arch: amd64\n\ntolerations: []\n\naffinity:\n  podAntiAffinity:\n    preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 100\n        podAffinityTerm:\n          labelSelector:\n            matchExpressions:\n              - key: app.kubernetes.io/name\n                operator: In\n                values:\n                  - track-trace-api\n          topologyKey: kubernetes.io/hostname\n\n# ConfigMap\nconfigMap:\n  data:\n    appsettings.json: |\n      {\n        "Authentication": {\n          "Authority": "https://identity.talma.pe"\n        },\n        "EventSourcing": {\n          "SnapshotFrequency": 100\n        },\n        "Monitoring": {\n          "OpenTelemetry": {\n            "ServiceName": "track-trace-api"\n          }\n        }\n      }\n'})}),"\n",(0,a.jsx)(n.h2,{id:"74-migraci\xf3n-y-versionado",children:"7.4 Migraci\xf3n y Versionado"}),"\n",(0,a.jsx)(n.h3,{id:"741-migraciones-de-base-de-datos",children:"7.4.1 Migraciones de Base de Datos"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'// Migraci\xf3n de Esquema Event Store\npublic class InitialEventStoreMigration : Migration\n{\n    protected override void Up(MigrationBuilder migrationBuilder)\n    {\n        // Events table\n        migrationBuilder.CreateTable(\n            name: "events",\n            columns: table => new\n            {\n                id = table.Column<long>(type: "bigint", nullable: false)\n                    .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),\n                stream_id = table.Column<string>(type: "varchar(255)", nullable: false),\n                version = table.Column<long>(type: "bigint", nullable: false),\n                event_type = table.Column<string>(type: "varchar(255)", nullable: false),\n                data = table.Column<string>(type: "jsonb", nullable: false),\n                metadata = table.Column<string>(type: "jsonb", nullable: true),\n                timestamp = table.Column<DateTimeOffset>(type: "timestamptz", nullable: false),\n                correlation_id = table.Column<Guid>(type: "uuid", nullable: true),\n                causation_id = table.Column<Guid>(type: "uuid", nullable: true)\n            },\n            constraints: table =>\n            {\n                table.PrimaryKey("pk_events", x => x.id);\n                table.UniqueConstraint("uq_events_stream_version", x => new { x.stream_id, x.version });\n            });\n\n        // Indexes for performance\n        migrationBuilder.CreateIndex(\n            name: "ix_events_stream_id",\n            table: "events",\n            column: "stream_id");\n\n        migrationBuilder.CreateIndex(\n            name: "ix_events_timestamp",\n            table: "events",\n            column: "timestamp");\n\n        migrationBuilder.CreateIndex(\n            name: "ix_events_event_type",\n            table: "events",\n            column: "event_type");\n\n        // Snapshots table\n        migrationBuilder.CreateTable(\n            name: "snapshots",\n            columns: table => new\n            {\n                stream_id = table.Column<string>(type: "varchar(255)", nullable: false),\n                version = table.Column<long>(type: "bigint", nullable: false),\n                data = table.Column<string>(type: "jsonb", nullable: false),\n                timestamp = table.Column<DateTimeOffset>(type: "timestamptz", nullable: false)\n            },\n            constraints: table =>\n            {\n                table.PrimaryKey("pk_snapshots", x => x.stream_id);\n            });\n    }\n\n    protected override void Down(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.DropTable(name: "snapshots");\n        migrationBuilder.DropTable(name: "events");\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"742-event-schema-evolution",children:"7.4.2 Event Schema Evolution"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'// Event versioning strategy\npublic interface IEventUpgrader\n{\n    bool CanUpgrade(string eventType, int version);\n    DomainEvent Upgrade(string eventData, string eventType, int version);\n}\n\npublic class FlightStatusEventUpgrader : IEventUpgrader\n{\n    public bool CanUpgrade(string eventType, int version)\n    {\n        return eventType == "FlightStatusChanged" && version < 2;\n    }\n\n    public DomainEvent Upgrade(string eventData, string eventType, int version)\n    {\n        if (version == 1)\n        {\n            var v1Event = JsonSerializer.Deserialize<FlightStatusChangedV1>(eventData);\n\n            // Transform to V2 format\n            return new FlightStatusChangedV2\n            {\n                FlightId = v1Event.FlightId,\n                OldStatus = MapOldStatus(v1Event.Status),\n                NewStatus = MapNewStatus(v1Event.NewStatus),\n                Timestamp = v1Event.Timestamp,\n                Reason = v1Event.Reason ?? "Not specified", // New required field\n                UpdatedBy = "system", // New required field\n                // New fields with defaults\n                LocationCode = v1Event.Location ?? "UNKNOWN",\n                DelayMinutes = v1Event.DelayMinutes ?? 0\n            };\n        }\n\n        throw new InvalidOperationException($"Cannot upgrade version {version}");\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"75-estrategia-de-deployment",children:"7.5 Estrategia de Deployment"}),"\n",(0,a.jsx)(n.h3,{id:"751-despliegue-blue-green",children:"7.5.1 Despliegue Blue-Green"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# Estrategia de despliegue Blue-Green\napiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  name: tracktrace-api-rollout\nspec:\n  replicas: 6\n  strategy:\n    blueGreen:\n      activeService: tracktrace-api-active\n      previewService: tracktrace-api-preview\n      autoPromotionEnabled: false\n      scaleDownDelaySeconds: 30\n      prePromotionAnalysis:\n        templates:\n          - templateName: success-rate\n        args:\n          - name: service-name\n            value: tracktrace-api-preview\n      postPromotionAnalysis:\n        templates:\n          - templateName: success-rate\n        args:\n          - name: service-name\n            value: tracktrace-api-active\n  selector:\n    matchLabels:\n      app: tracktrace-api\n  template:\n    metadata:\n      labels:\n        app: tracktrace-api\n    spec:\n      containers:\n        - name: tracktrace-api\n          image: tlm/track-trace-api:latest\n          ports:\n            - containerPort: 8080\n          readinessProbe:\n            httpGet:\n              path: /health/ready\n              port: 8080\n            initialDelaySeconds: 10\n            periodSeconds: 5\n          livenessProbe:\n            httpGet:\n              path: /health/live\n              port: 8080\n            initialDelaySeconds: 30\n            periodSeconds: 10\n"})}),"\n",(0,a.jsx)(n.h3,{id:"752-pipeline-de-cicd",children:"7.5.2 Pipeline de CI/CD"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/deploy.yml\nname: Build and Deploy Track & Trace API\n\non:\n  push:\n    branches: [main, develop]\n    paths: ['src/TLM.Services.TrackTrace/**']\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: '8.0.x'\n\n      - name: Restore dependencies\n        run: dotnet restore src/TLM.Services.TrackTrace/TLM.Services.TrackTrace.sln\n\n      - name: Build\n        run: dotnet build src/TLM.Services.TrackTrace/TLM.Services.TrackTrace.sln --no-restore\n\n      - name: Unit Tests\n        run: |\n          dotnet test src/TLM.Services.TrackTrace/tests/Unit \\\n            --no-build --verbosity normal \\\n            --collect:\"XPlat Code Coverage\" \\\n            --results-directory ./coverage\n\n      - name: Integration Tests\n        run: |\n          docker-compose -f docker-compose.test.yml up -d\n          dotnet test src/TLM.Services.TrackTrace/tests/Integration \\\n            --no-build --verbosity normal\n          docker-compose -f docker-compose.test.yml down\n\n      - name: SonarCloud Scan\n        uses: SonarSource/sonarcloud-github-action@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n\n  security:\n    runs-on: ubuntu-latest\n    needs: test\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Run Trivy vulnerability scanner\n        uses: aquasecurity/trivy-action@master\n        with:\n          scan-type: 'fs'\n          scan-ref: 'src/TLM.Services.TrackTrace'\n          format: 'sarif'\n          output: 'trivy-results.sarif'\n\n      - name: Upload Trivy scan results\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: 'trivy-results.sarif'\n\n  build-and-push:\n    runs-on: ubuntu-latest\n    needs: [test, security]\n    if: github.ref == 'refs/heads/main'\n    outputs:\n      image-tag: ${{ steps.meta.outputs.tags }}\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Log in to registry\n        uses: docker/login-action@v3\n        with:\n          registry: ${{ secrets.REGISTRY_URL }}\n          username: ${{ secrets.REGISTRY_USERNAME }}\n          password: ${{ secrets.REGISTRY_PASSWORD }}\n\n      - name: Extract metadata\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ secrets.REGISTRY_URL }}/tlm/track-trace-api\n          tags: |\n            type=ref,event=branch\n            type=sha,prefix={{branch}}-\n            type=raw,value=latest,enable={{is_default_branch}}\n\n      - name: Build and push\n        uses: docker/build-push-action@v5\n        with:\n          context: src/TLM.Services.TrackTrace\n          file: src/TLM.Services.TrackTrace/Dockerfile\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build-and-push\n    environment: production\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Deploy to Kubernetes\n        uses: azure/k8s-deploy@v1\n        with:\n          manifests: |\n            k8s/deployment.yml\n            k8s/service.yml\n            k8s/ingress.yml\n          images: |\n            ${{ needs.build-and-push.outputs.image-tag }}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"753-monitoring-y-observabilidad",children:"7.5.3 Monitoring y Observabilidad"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'// Application metrics\npublic class TrackTraceMetrics\n{\n    private readonly IMetricsLogger _metricsLogger;\n    private readonly Counter<long> _eventsProcessed;\n    private readonly Histogram<double> _eventProcessingDuration;\n    private readonly Gauge<int> _activeStreams;\n\n    public TrackTraceMetrics(IMeterFactory meterFactory)\n    {\n        var meter = meterFactory.Create("TLM.Services.TrackTrace");\n\n        _eventsProcessed = meter.CreateCounter<long>(\n            "events_processed_total",\n            description: "Total number of events processed");\n\n        _eventProcessingDuration = meter.CreateHistogram<double>(\n            "event_processing_duration_seconds",\n            description: "Duration of event processing");\n\n        _activeStreams = meter.CreateGauge<int>(\n            "active_streams_count",\n            description: "Number of currently active event streams");\n    }\n\n    public void RecordEventProcessed(string eventType, string tenantId, double duration)\n    {\n        _eventsProcessed.Add(1,\n            new("event_type", eventType),\n            new("tenant_id", tenantId));\n\n        _eventProcessingDuration.Record(duration,\n            new("event_type", eventType),\n            new("tenant_id", tenantId));\n    }\n\n    public void SetActiveStreams(int count)\n    {\n        _activeStreams.Record(count);\n    }\n}\n\n// Health checks implementation\npublic class EventStoreHealthCheck : IHealthCheck\n{\n    private readonly IEventStore _eventStore;\n\n    public async Task<HealthCheckResult> CheckHealthAsync(\n        HealthCheckContext context,\n        CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            // Test connection by attempting to read a system stream\n            await _eventStore.GetEventsAsync("$system-health-check", 0);\n            return HealthCheckResult.Healthy("Event store is responding");\n        }\n        catch (Exception ex)\n        {\n            return HealthCheckResult.Unhealthy(\n                "Event store is not responding", ex);\n        }\n    }\n}\n\n// Distributed tracing\npublic class EventHandlerTracing\n{\n    private static readonly ActivitySource ActivitySource = new("TLM.Services.TrackTrace");\n\n    public async Task<T> TraceEventHandling<T>(string eventType, string streamId, Func<Task<T>> handler)\n    {\n        using var activity = ActivitySource.StartActivity($"handle-{eventType}");\n        activity?.SetTag("stream.id", streamId);\n        activity?.SetTag("event.type", eventType);\n\n        try\n        {\n            var result = await handler();\n            activity?.SetStatus(ActivityStatusCode.Ok);\n            return result;\n        }\n        catch (Exception ex)\n        {\n            activity?.SetStatus(ActivityStatusCode.Error, ex.Message);\n            throw;\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"76-consideraciones-de-seguridad",children:"7.6 Consideraciones de Seguridad"}),"\n",(0,a.jsx)(n.h3,{id:"761-configuraci\xf3n-de-seguridad-de-contenedores",children:"7.6.1 Configuraci\xf3n de Seguridad de Contenedores"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dockerfile",children:'# Dockerfile reforzado en seguridad\nFROM mcr.microsoft.com/dotnet/aspnet:8.0-alpine AS runtime\n\n# Instalar actualizaciones de seguridad\nRUN apk upgrade --no-cache\n\n# Create non-root user\nRUN addgroup -g 1001 -S appuser && \\\n    adduser -S -D -H -u 1001 -h /app -s /sbin/nologin -G appuser appuser\n\n# Set up application directory with proper permissions\nWORKDIR /app\nCOPY --from=publish --chown=appuser:appuser /app/publish .\n\n# Remove unnecessary packages and files\nRUN apk del --no-cache \\\n    && rm -rf /var/cache/apk/* \\\n    && rm -rf /tmp/*\n\n# Switch to non-root user\nUSER 1001\n\n# Configuraciones de seguridad\nENV ASPNETCORE_URLS=http://+:8080\nENV DOTNET_RUNNING_IN_CONTAINER=true\nENV DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=true\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \\\n    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1\n\nEXPOSE 8080\nENTRYPOINT ["dotnet", "TLM.Services.TrackTrace.API.dll"]\n'})}),"\n",(0,a.jsx)(n.h3,{id:"762-pol\xedticas-de-red",children:"7.6.2 Pol\xedticas de Red"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# Network policy for Track & Trace API\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: tracktrace-api-netpol\n  namespace: corporate-services\nspec:\n  podSelector:\n    matchLabels:\n      app: tracktrace-api\n  policyTypes:\n    - Ingress\n    - Egress\n  ingress:\n    - from:\n        - namespaceSelector:\n            matchLabels:\n              name: ingress-nginx\n      ports:\n        - protocol: TCP\n          port: 8080\n    - from:\n        - podSelector:\n            matchLabels:\n              app: api-gateway\n      ports:\n        - protocol: TCP\n          port: 8080\n  egress:\n    - to:\n        - namespaceSelector:\n            matchLabels:\n              name: databases\n      ports:\n        - protocol: TCP\n          port: 5432\n    - to:\n        - namespaceSelector:\n            matchLabels:\n              name: identity-services\n      ports:\n        - protocol: TCP\n          port: 8080\n    - to: []\n      ports:\n        - protocol: TCP\n          port: 53\n        - protocol: UDP\n          port: 53\n"})}),"\n",(0,a.jsx)(n.h2,{id:"77-soluci\xf3n-de-problemas-y-depuraci\xf3n",children:"7.7 Soluci\xf3n de Problemas y Depuraci\xf3n"}),"\n",(0,a.jsx)(n.h3,{id:"771-configuraci\xf3n-de-logging",children:"7.7.1 Configuraci\xf3n de Logging"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'// Configuraci\xf3n de logging estructurado\npublic static class LoggingConfiguration\n{\n    public static IServiceCollection AddStructuredLogging(\n        this IServiceCollection services,\n        IConfiguration configuration)\n    {\n        Log.Logger = new LoggerConfiguration()\n            .ReadFrom.Configuration(configuration)\n            .Enrich.FromLogContext()\n            .Enrich.WithProperty("Service", "track-trace-api")\n            .Enrich.WithProperty("Version", Assembly.GetEntryAssembly()?.GetName().Version?.ToString())\n            .WriteTo.Console(outputTemplate:\n                "[{Timestamp:HH:mm:ss} {Level:u3}] [{Service}] {Message:lj} {Properties:j}{NewLine}{Exception}")\n            .WriteTo.OpenTelemetry(options =>\n            {\n                options.Endpoint = configuration["Logging:OpenTelemetry:Endpoint"];\n                options.ResourceAttributes = new Dictionary<string, object>\n                {\n                    ["service.name"] = "track-trace-api",\n                    ["service.version"] = "1.0.0",\n                };\n            })\n            .CreateLogger();\n\n        services.AddSerilog();\n        return services;\n    }\n}\n\n// Event handling logging\npublic class EventHandlerLoggingBehavior<TRequest, TResponse> : IPipelineBehavior<TRequest, TResponse>\n    where TRequest : IRequest<TResponse>\n{\n    private readonly ILogger<EventHandlerLoggingBehavior<TRequest, TResponse>> _logger;\n\n    public async Task<TResponse> Handle(TRequest request, RequestHandlerDelegate<TResponse> next, CancellationToken cancellationToken)\n    {\n        var requestName = typeof(TRequest).Name;\n        var requestId = Guid.NewGuid();\n\n        _logger.LogInformation("Starting request {RequestName} with ID {RequestId}",\n            requestName, requestId);\n\n        var stopwatch = Stopwatch.StartNew();\n        try\n        {\n            var response = await next();\n            stopwatch.Stop();\n\n            _logger.LogInformation("Completed request {RequestName} with ID {RequestId} in {ElapsedMs}ms",\n                requestName, requestId, stopwatch.ElapsedMilliseconds);\n\n            return response;\n        }\n        catch (Exception ex)\n        {\n            stopwatch.Stop();\n            _logger.LogError(ex, "Request {RequestName} with ID {RequestId} failed after {ElapsedMs}ms",\n                requestName, requestId, stopwatch.ElapsedMilliseconds);\n            throw;\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"772-debugging-tools",children:"7.7.2 Debugging Tools"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# debug-toolkit.sh - Tools para debugging del sistema\n\n# Verificar salud de los componentes\ncheck_health() {\n    echo "=== Health Check ==="\n    kubectl get pods -n corporate-services -l app=tracktrace-api\n    echo ""\n    kubectl exec -n corporate-services deployment/tracktrace-api -- \\\n        curl -s http://localhost:8080/health | jq \'.\'\n}\n\n# Revisar logs recientes\ncheck_logs() {\n    echo "=== Recent Logs ==="\n    kubectl logs -n corporate-services deployment/tracktrace-api \\\n        --tail=100 --since=10m\n}\n\n# Verificar m\xe9tricas de performance\ncheck_metrics() {\n    echo "=== Performance Metrics ==="\n    kubectl exec -n corporate-services deployment/tracktrace-api -- \\\n        curl -s http://localhost:9090/metrics | grep -E "(events_processed|processing_duration)"\n}\n\n# Verificar configuraci\xf3n\ncheck_config() {\n    echo "=== Configuration ==="\n    kubectl describe configmap -n corporate-services tracktrace-config\n}\n\n# An\xe1lisis de eventos en el event store\nanalyze_events() {\n    local stream_id=$1\n    echo "=== Event Analysis for Stream: $stream_id ==="\n\n    # Conectar a la base de datos y consultar eventos\n    kubectl exec -it -n databases postgres-0 -- \\\n        psql -U tracktraceuser -d tracktracedb -c \\\n        "SELECT event_type, timestamp, version FROM events WHERE stream_id = \'$stream_id\' ORDER BY version;"\n}\n\n# Funci\xf3n principal\ncase "$1" in\n    "health")\n        check_health\n        ;;\n    "logs")\n        check_logs\n        ;;\n    "metrics")\n        check_metrics\n        ;;\n    "config")\n        check_config\n        ;;\n    "events")\n        analyze_events "$2"\n        ;;\n    *)\n        echo "Uso: $0 {health|logs|metrics|config|events <stream_id>}"\n        exit 1\n        ;;\nesac\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Referencias:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://martinfowler.com/eaaDev/EventSourcing.html",children:"Event Sourcing Patterns"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/previous-versions/msp-n-p/jj554200(v=pandp.10)",children:"CQRS Journey"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/architecture/",children:".NET Application Architecture Guides"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/configuration/overview/",children:"Kubernetes Mejores Pr\xe1cticas"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://docs.docker.com/develop/security-best-practices/",children:"Docker Security Mejores Pr\xe1cticas"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);