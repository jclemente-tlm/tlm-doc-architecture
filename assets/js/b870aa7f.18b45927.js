"use strict";(self.webpackChunktlm_doc_architecture=self.webpackChunktlm_doc_architecture||[]).push([[9917],{27756:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"lineamientos/desarrollo-de-apis/validacion-y-errores","title":"Validaci\xf3n y manejo de errores","description":"Esta gu\xeda define las mejores pr\xe1cticas para validaci\xf3n de entrada y manejo consistente de errores en APIs REST.","source":"@site/docs/lineamientos/desarrollo-de-apis/03-validacion-y-errores.md","sourceDirName":"lineamientos/desarrollo-de-apis","slug":"/lineamientos/desarrollo-de-apis/validacion-y-errores","permalink":"/tlm-doc-architecture/docs/lineamientos/desarrollo-de-apis/validacion-y-errores","draft":false,"unlisted":false,"editUrl":"https://github.com/jclemente-tlm/tlm-doc-architecture/edit/main/docs/lineamientos/desarrollo-de-apis/03-validacion-y-errores.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Validaci\xf3n y manejo de errores","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Seguridad de APIs","permalink":"/tlm-doc-architecture/docs/lineamientos/desarrollo-de-apis/seguridad"},"next":{"title":"Versionado y documentaci\xf3n","permalink":"/tlm-doc-architecture/docs/lineamientos/desarrollo-de-apis/versionado-y-documentacion"}}');var s=r(74848),i=r(28453);const o={title:"Validaci\xf3n y manejo de errores",sidebar_position:3},t=void 0,l={},d=[{value:"\ud83d\udd0d Validaci\xf3n de entrada",id:"-validaci\xf3n-de-entrada",level:2},{value:"Principios de validaci\xf3n",id:"principios-de-validaci\xf3n",level:3},{value:"Implementaci\xf3n con FluentValidation (Recomendado)",id:"implementaci\xf3n-con-fluentvalidation-recomendado",level:3},{value:"Implementaci\xf3n alternativa con Data Annotations",id:"implementaci\xf3n-alternativa-con-data-annotations",level:3},{value:"Validaci\xf3n personalizada con Data Annotations",id:"validaci\xf3n-personalizada-con-data-annotations",level:3},{value:"Validaci\xf3n a nivel de negocio",id:"validaci\xf3n-a-nivel-de-negocio",level:3},{value:"\u26a0\ufe0f Manejo de errores",id:"\ufe0f-manejo-de-errores",level:2},{value:"Estructura est\xe1ndar de respuesta de error",id:"estructura-est\xe1ndar-de-respuesta-de-error",level:3},{value:"Middleware de manejo global de errores",id:"middleware-de-manejo-global-de-errores",level:3},{value:"Controller con manejo de errores y FluentValidation",id:"controller-con-manejo-de-errores-y-fluentvalidation",level:3},{value:"\ud83d\udd27 Configuraci\xf3n en Program.cs",id:"-configuraci\xf3n-en-programcs",level:2},{value:"Configuraci\xf3n con FluentValidation (Recomendado)",id:"configuraci\xf3n-con-fluentvalidation-recomendado",level:3},{value:"Configuraci\xf3n alternativa con Data Annotations",id:"configuraci\xf3n-alternativa-con-data-annotations",level:3},{value:"\u2705 Ejemplos de respuestas",id:"-ejemplos-de-respuestas",level:2},{value:"Error de validaci\xf3n (400)",id:"error-de-validaci\xf3n-400",level:3},{value:"Error de l\xf3gica de negocio (422)",id:"error-de-l\xf3gica-de-negocio-422",level:3},{value:"Error de autorizaci\xf3n (403)",id:"error-de-autorizaci\xf3n-403",level:3},{value:"Respuesta exitosa para referencia",id:"respuesta-exitosa-para-referencia",level:3},{value:"\ud83d\udcd6 Referencias",id:"-referencias",level:2},{value:"ADRs relacionados",id:"adrs-relacionados",level:3},{value:"Recursos externos",id:"recursos-externos",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Esta gu\xeda define las mejores pr\xe1cticas para validaci\xf3n de entrada y manejo consistente de errores en APIs REST."}),"\n",(0,s.jsx)(n.h2,{id:"-validaci\xf3n-de-entrada",children:"\ud83d\udd0d Validaci\xf3n de entrada"}),"\n",(0,s.jsx)(n.h3,{id:"principios-de-validaci\xf3n",children:"Principios de validaci\xf3n"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Validar todo"}),": Nunca conf\xedes en los datos de entrada"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fallar r\xe1pido"}),": Validar antes de procesar l\xf3gica de negocio"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mensajes claros"}),": Proporcionar feedback \xfatil al cliente"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consistencia"}),": Usar estructura est\xe1ndar de respuesta para todos los errores"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"implementaci\xf3n-con-fluentvalidation-recomendado",children:"Implementaci\xf3n con FluentValidation (Recomendado)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class CreateUserRequestValidator : AbstractValidator<CreateUserRequest>\n{\n    public CreateUserRequestValidator()\n    {\n        RuleFor(x => x.Name)\n            .NotEmpty().WithMessage("El nombre es obligatorio")\n            .Length(2, 100).WithMessage("El nombre debe tener entre 2 y 100 caracteres")\n            .Matches(@"^[a-zA-Z\xe1\xe9\xed\xf3\xfa\xc1\xc9\xcd\xd3\xda\xf1\xd1\\s]+$")\n            .WithMessage("El nombre solo puede contener letras y espacios");\n\n        RuleFor(x => x.Email)\n            .NotEmpty().WithMessage("El email es obligatorio")\n            .EmailAddress().WithMessage("El formato del email no es v\xe1lido")\n            .MaximumLength(255).WithMessage("El email es demasiado largo")\n            .Must(HaveValidDomain).WithMessage("Solo se permiten emails de dominios: talma.pe, talma.com");\n\n        RuleFor(x => x.Phone)\n            .Matches(@"^\\+?[\\d\\s\\-\\(\\)]{7,15}$")\n            .WithMessage("El formato del tel\xe9fono no es v\xe1lido")\n            .When(x => !string.IsNullOrEmpty(x.Phone));\n\n        RuleFor(x => x.Age)\n            .InclusiveBetween(18, 120)\n            .WithMessage("La edad debe estar entre 18 y 120 a\xf1os");\n\n        RuleFor(x => x.Roles)\n            .NotEmpty().WithMessage("Debe seleccionar al menos un rol")\n            .Must(roles => roles.All(role => IsValidRole(role)))\n            .WithMessage("Uno o m\xe1s roles no son v\xe1lidos");\n    }\n\n    private static bool HaveValidDomain(string email)\n    {\n        if (string.IsNullOrEmpty(email)) return true;\n\n        var allowedDomains = new[] { "talma.pe", "talma.com" };\n        var domain = email.Split(\'@\').LastOrDefault()?.ToLower();\n        return allowedDomains.Contains(domain);\n    }\n\n    private static bool IsValidRole(string role)\n    {\n        var validRoles = new[] { "Admin", "User", "Manager", "Operator" };\n        return validRoles.Contains(role);\n    }\n}\n\npublic class CreateUserRequest\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n    public string Phone { get; set; }\n    public int Age { get; set; }\n    public List<string> Roles { get; set; } = new();\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"implementaci\xf3n-alternativa-con-data-annotations",children:"Implementaci\xf3n alternativa con Data Annotations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class CreateUserRequest\n{\n    [Required(ErrorMessage = "El nombre es obligatorio")]\n    [StringLength(100, MinimumLength = 2,\n        ErrorMessage = "El nombre debe tener entre 2 y 100 caracteres")]\n    [RegularExpression(@"^[a-zA-Z\xe1\xe9\xed\xf3\xfa\xc1\xc9\xcd\xd3\xda\xf1\xd1\\s]+$",\n        ErrorMessage = "El nombre solo puede contener letras y espacios")]\n    public string Name { get; set; }\n\n    [Required(ErrorMessage = "El email es obligatorio")]\n    [EmailAddress(ErrorMessage = "El formato del email no es v\xe1lido")]\n    [StringLength(255, ErrorMessage = "El email es demasiado largo")]\n    [ValidEmailDomain]\n    public string Email { get; set; }\n\n    [Phone(ErrorMessage = "El formato del tel\xe9fono no es v\xe1lido")]\n    [StringLength(15, ErrorMessage = "Tel\xe9fono demasiado largo")]\n    public string Phone { get; set; }\n\n    [Range(18, 120, ErrorMessage = "La edad debe estar entre 18 y 120 a\xf1os")]\n    public int Age { get; set; }\n\n    [Required]\n    [MinLength(1, ErrorMessage = "Debe seleccionar al menos un rol")]\n    public List<string> Roles { get; set; } = new();\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"validaci\xf3n-personalizada-con-data-annotations",children:"Validaci\xf3n personalizada con Data Annotations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class ValidEmailDomainAttribute : ValidationAttribute\n{\n    private readonly string[] _allowedDomains = { "talma.pe", "talma.com" };\n\n    protected override ValidationResult IsValid(object value, ValidationContext validationContext)\n    {\n        if (value is string email && !string.IsNullOrEmpty(email))\n        {\n            var domain = email.Split(\'@\').LastOrDefault();\n            if (!_allowedDomains.Contains(domain?.ToLower()))\n            {\n                return new ValidationResult(\n                    $"Solo se permiten emails de dominios: {string.Join(", ", _allowedDomains)}");\n            }\n        }\n        return ValidationResult.Success;\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"validaci\xf3n-a-nivel-de-negocio",children:"Validaci\xf3n a nivel de negocio"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class UserService\n{\n    public async Task<Result<User>> CreateUserAsync(CreateUserRequest request)\n    {\n        // Validaciones de negocio\n        if (await EmailExistsAsync(request.Email))\n            return Result<User>.Failure("EMAIL_EXISTS", "Ya existe un usuario con este email");\n\n        if (await IsRestrictedUsernameAsync(request.Name))\n            return Result<User>.Failure("RESTRICTED_USERNAME", "Nombre de usuario no permitido");\n\n        if (!await HasValidLicenseForNewUserAsync())\n            return Result<User>.Failure("NO_LICENSES", "No hay licencias disponibles");\n\n        // Crear usuario...\n        var user = new User { /* ... */ };\n        return Result<User>.Success(user);\n    }\n}\n\npublic class Result<T>\n{\n    public bool IsSuccess { get; private set; }\n    public T Value { get; private set; }\n    public string ErrorCode { get; private set; }\n    public string Error { get; private set; }\n\n    private Result(bool isSuccess, T value, string errorCode, string error)\n    {\n        IsSuccess = isSuccess;\n        Value = value;\n        ErrorCode = errorCode;\n        Error = error;\n    }\n\n    public static Result<T> Success(T value) => new(true, value, null, null);\n    public static Result<T> Failure(string errorCode, string error) => new(false, default, errorCode, error);\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"\ufe0f-manejo-de-errores",children:"\u26a0\ufe0f Manejo de errores"}),"\n",(0,s.jsx)(n.h3,{id:"estructura-est\xe1ndar-de-respuesta-de-error",children:"Estructura est\xe1ndar de respuesta de error"}),"\n",(0,s.jsx)(n.p,{children:"Siguiendo el est\xe1ndar definido en los lineamientos de desarrollo de APIs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class ApiResponse<T>\n{\n    public string Status { get; set; } = "success";\n    public T Data { get; set; }\n    public ErrorInfo Error { get; set; }\n    public MetaData Meta { get; set; } = new();\n    public Dictionary<string, string> Links { get; set; }\n    [JsonPropertyName("trace_id")]\n    public string TraceId { get; set; }\n}\n\npublic class ErrorInfo\n{\n    public string Code { get; set; }\n    public string Message { get; set; }\n    public List<ErrorDetail> Details { get; set; } = new();\n}\n\npublic class ErrorDetail\n{\n    public string Field { get; set; }\n    public string Issue { get; set; }\n}\n\npublic class MetaData\n{\n    public DateTime Timestamp { get; set; } = DateTime.UtcNow;\n    public List<WarningInfo> Warnings { get; set; } = new();\n}\n\npublic class WarningInfo\n{\n    public string Code { get; set; }\n    public string Message { get; set; }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"middleware-de-manejo-global-de-errores",children:"Middleware de manejo global de errores"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class GlobalExceptionMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger<GlobalExceptionMiddleware> _logger;\n\n    public GlobalExceptionMiddleware(RequestDelegate next, ILogger<GlobalExceptionMiddleware> logger)\n    {\n        _next = next;\n        _logger = logger;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        try\n        {\n            await _next(context);\n        }\n        catch (Exception ex)\n        {\n            await HandleExceptionAsync(context, ex);\n        }\n    }\n\n    private async Task HandleExceptionAsync(HttpContext context, Exception exception)\n    {\n        var response = context.Response;\n        response.ContentType = "application/json";\n\n        var errorResponse = new ApiResponse<object>\n        {\n            Status = "error",\n            Meta = new MetaData(),\n            TraceId = Activity.Current?.Id ?? context.TraceIdentifier\n        };\n\n        switch (exception)\n        {\n            case ValidationException validationEx:\n                errorResponse.Error = new ErrorInfo\n                {\n                    Code = "VALIDATION_FAILED",\n                    Message = "La solicitud contiene errores de validaci\xf3n",\n                    Details = validationEx.Errors.SelectMany(kvp =>\n                        kvp.Value.Select(error => new ErrorDetail\n                        {\n                            Field = kvp.Key,\n                            Issue = error\n                        })).ToList()\n                };\n                response.StatusCode = 400;\n                break;\n\n            case NotFoundException notFoundEx:\n                errorResponse.Error = new ErrorInfo\n                {\n                    Code = "RESOURCE_NOT_FOUND",\n                    Message = notFoundEx.Message,\n                    Details = new List<ErrorDetail>()\n                };\n                response.StatusCode = 404;\n                break;\n\n            case UnauthorizedException unauthorizedEx:\n                errorResponse.Error = new ErrorInfo\n                {\n                    Code = "UNAUTHORIZED_ACCESS",\n                    Message = "Credenciales inv\xe1lidas o sesi\xf3n expirada",\n                    Details = new List<ErrorDetail>()\n                };\n                response.StatusCode = 401;\n                break;\n\n            case ForbiddenException forbiddenEx:\n                errorResponse.Error = new ErrorInfo\n                {\n                    Code = "FORBIDDEN_ACCESS",\n                    Message = "No tienes permisos para realizar esta acci\xf3n",\n                    Details = new List<ErrorDetail>()\n                };\n                response.StatusCode = 403;\n                break;\n\n            case BusinessLogicException businessEx:\n                errorResponse.Error = new ErrorInfo\n                {\n                    Code = businessEx.ErrorCode ?? "BUSINESS_LOGIC_ERROR",\n                    Message = businessEx.Message,\n                    Details = businessEx.Details ?? new List<ErrorDetail>()\n                };\n                response.StatusCode = 422;\n                break;\n\n            default:\n                _logger.LogError(exception, "Error interno no controlado");\n                errorResponse.Error = new ErrorInfo\n                {\n                    Code = "INTERNAL_SERVER_ERROR",\n                    Message = "Ocurri\xf3 un error interno. Contacta al administrador.",\n                    Details = new List<ErrorDetail>()\n                };\n                response.StatusCode = 500;\n                break;\n        }\n\n        var json = JsonSerializer.Serialize(errorResponse, new JsonSerializerOptions\n        {\n            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,\n            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull\n        });\n\n        await response.WriteAsync(json);\n    }\n}\n\n// Excepciones personalizadas\npublic class BusinessLogicException : Exception\n{\n    public string ErrorCode { get; }\n    public List<ErrorDetail> Details { get; }\n\n    public BusinessLogicException(string errorCode, string message, List<ErrorDetail> details = null)\n        : base(message)\n    {\n        ErrorCode = errorCode;\n        Details = details ?? new List<ErrorDetail>();\n    }\n}\n\npublic class ValidationException : Exception\n{\n    public Dictionary<string, string[]> Errors { get; }\n\n    public ValidationException(Dictionary<string, string[]> errors)\n        : base("Errores de validaci\xf3n")\n    {\n        Errors = errors;\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"controller-con-manejo-de-errores-y-fluentvalidation",children:"Controller con manejo de errores y FluentValidation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'[ApiController]\n[Route("api/v{version:apiVersion}/[controller]")]\npublic class UsersController : ControllerBase\n{\n    private readonly IUserService _userService;\n    private readonly IValidator<CreateUserRequest> _validator;\n\n    public UsersController(IUserService userService, IValidator<CreateUserRequest> validator)\n    {\n        _userService = userService;\n        _validator = validator;\n    }\n\n    [HttpPost]\n    [ProducesResponseType(typeof(ApiResponse<UserDto>), 201)]\n    [ProducesResponseType(typeof(ApiResponse<object>), 400)]\n    [ProducesResponseType(typeof(ApiResponse<object>), 422)]\n    public async Task<ActionResult<ApiResponse<UserDto>>> CreateUser(\n        [FromBody] CreateUserRequest request)\n    {\n        // Validaci\xf3n con FluentValidation\n        var validationResult = await _validator.ValidateAsync(request);\n        if (!validationResult.IsValid)\n        {\n            var errorResponse = new ApiResponse<object>\n            {\n                Status = "error",\n                Error = new ErrorInfo\n                {\n                    Code = "VALIDATION_FAILED",\n                    Message = "La solicitud contiene errores de validaci\xf3n",\n                    Details = validationResult.Errors.Select(error => new ErrorDetail\n                    {\n                        Field = error.PropertyName,\n                        Issue = error.ErrorMessage\n                    }).ToList()\n                },\n                Meta = new MetaData(),\n                TraceId = Activity.Current?.Id ?? HttpContext.TraceIdentifier\n            };\n\n            return BadRequest(errorResponse);\n        }\n\n        var result = await _userService.CreateUserAsync(request);\n        if (!result.IsSuccess)\n        {\n            var businessErrorResponse = new ApiResponse<object>\n            {\n                Status = "error",\n                Error = new ErrorInfo\n                {\n                    Code = result.ErrorCode,\n                    Message = result.Error,\n                    Details = new List<ErrorDetail>()\n                },\n                Meta = new MetaData(),\n                TraceId = Activity.Current?.Id ?? HttpContext.TraceIdentifier\n            };\n\n            return UnprocessableEntity(businessErrorResponse);\n        }\n\n        var successResponse = new ApiResponse<UserDto>\n        {\n            Status = "success",\n            Data = _mapper.Map<UserDto>(result.Value),\n            Meta = new MetaData(),\n            TraceId = Activity.Current?.Id ?? HttpContext.TraceIdentifier\n        };\n\n        return CreatedAtAction(nameof(GetUser),\n            new { id = result.Value.Id }, successResponse);\n    }\n\n    [HttpGet("{id}")]\n    [ProducesResponseType(typeof(ApiResponse<UserDto>), 200)]\n    [ProducesResponseType(typeof(ApiResponse<object>), 404)]\n    public async Task<ActionResult<ApiResponse<UserDto>>> GetUser(string id)\n    {\n        var user = await _userService.GetUserByIdAsync(id);\n        if (user == null)\n        {\n            var errorResponse = new ApiResponse<object>\n            {\n                Status = "error",\n                Error = new ErrorInfo\n                {\n                    Code = "USER_NOT_FOUND",\n                    Message = "El usuario no existe",\n                    Details = new List<ErrorDetail>\n                    {\n                        new() { Field = "id", Issue = $"No se encontr\xf3 ning\xfan usuario con el identificador \'{id}\'" }\n                    }\n                },\n                Meta = new MetaData(),\n                TraceId = Activity.Current?.Id ?? HttpContext.TraceIdentifier\n            };\n\n            return NotFound(errorResponse);\n        }\n\n        var response = new ApiResponse<UserDto>\n        {\n            Status = "success",\n            Data = _mapper.Map<UserDto>(user),\n            Meta = new MetaData(),\n            TraceId = Activity.Current?.Id ?? HttpContext.TraceIdentifier\n        };\n\n        return Ok(response);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-configuraci\xf3n-en-programcs",children:"\ud83d\udd27 Configuraci\xf3n en Program.cs"}),"\n",(0,s.jsx)(n.h3,{id:"configuraci\xf3n-con-fluentvalidation-recomendado",children:"Configuraci\xf3n con FluentValidation (Recomendado)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"var builder = WebApplication.CreateBuilder(args);\n\n// Configurar controladores\nbuilder.Services.AddControllers();\n\n// Configurar FluentValidation\nbuilder.Services.AddFluentValidationAutoValidation(config =>\n{\n    // Deshabilitar validaci\xf3n autom\xe1tica de DataAnnotations\n    config.DisableDataAnnotationsValidation = true;\n});\n\nbuilder.Services.AddFluentValidationClientsideAdapters();\nbuilder.Services.AddValidatorsFromAssemblyContaining<CreateUserRequestValidator>();\n\n// Configurar comportamiento de APIs\nbuilder.Services.Configure<ApiBehaviorOptions>(options =>\n{\n    // Deshabilitar respuesta autom\xe1tica de ModelState para manejarla manualmente\n    options.SuppressModelStateInvalidFilter = true;\n});\n\n// Configurar JSON\nbuilder.Services.ConfigureHttpJsonOptions(options =>\n{\n    options.SerializerOptions.PropertyNamingPolicy = JsonNamingPolicy.CamelCase;\n    options.SerializerOptions.DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull;\n});\n\n// Otros servicios\nbuilder.Services.AddScoped<IUserService, UserService>();\nbuilder.Services.AddAutoMapper(typeof(Program));\n\nvar app = builder.Build();\n\n// Middleware de manejo global de errores (debe ir primero)\napp.UseMiddleware<GlobalExceptionMiddleware>();\n\n// Otros middlewares...\napp.UseAuthentication();\napp.UseAuthorization();\n\napp.MapControllers();\napp.Run();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"configuraci\xf3n-alternativa-con-data-annotations",children:"Configuraci\xf3n alternativa con Data Annotations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'var builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\n\n// Configurar validaci\xf3n\nbuilder.Services.Configure<ApiBehaviorOptions>(options =>\n{\n    // Personalizar respuesta de validaci\xf3n autom\xe1tica\n    options.InvalidModelStateResponseFactory = context =>\n    {\n        var errors = context.ModelState\n            .Where(x => x.Value.Errors.Count > 0)\n            .SelectMany(x => x.Value.Errors.Select(e => new ErrorDetail\n            {\n                Field = x.Key,\n                Issue = e.ErrorMessage\n            }))\n            .ToList();\n\n        var errorResponse = new ApiResponse<object>\n        {\n            Status = "error",\n            Error = new ErrorInfo\n            {\n                Code = "VALIDATION_FAILED",\n                Message = "La solicitud contiene errores de validaci\xf3n",\n                Details = errors\n            },\n            Meta = new MetaData(),\n            TraceId = Activity.Current?.Id ?? context.HttpContext.TraceIdentifier\n        };\n\n        return new BadRequestObjectResult(errorResponse);\n    };\n});\n\nvar app = builder.Build();\n\n// Middleware de manejo global de errores\napp.UseMiddleware<GlobalExceptionMiddleware>();\n\napp.UseAuthentication();\napp.UseAuthorization();\napp.MapControllers();\napp.Run();\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-ejemplos-de-respuestas",children:"\u2705 Ejemplos de respuestas"}),"\n",(0,s.jsx)(n.h3,{id:"error-de-validaci\xf3n-400",children:"Error de validaci\xf3n (400)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "status": "error",\n  "error": {\n    "code": "VALIDATION_FAILED",\n    "message": "La solicitud contiene errores de validaci\xf3n",\n    "details": [\n      {\n        "field": "name",\n        "issue": "El nombre es obligatorio"\n      },\n      {\n        "field": "email",\n        "issue": "El formato del email no es v\xe1lido"\n      },\n      {\n        "field": "email",\n        "issue": "Solo se permiten emails de dominios: talma.pe, talma.com"\n      },\n      {\n        "field": "age",\n        "issue": "La edad debe estar entre 18 y 120 a\xf1os"\n      }\n    ]\n  },\n  "meta": {\n    "timestamp": "2025-09-22T10:30:00Z"\n  },\n  "trace_id": "c1d2e3f4-5678-90ab-cdef-1234567890ab"\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"error-de-l\xf3gica-de-negocio-422",children:"Error de l\xf3gica de negocio (422)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "status": "error",\n  "error": {\n    "code": "EMAIL_EXISTS",\n    "message": "Ya existe un usuario con este email",\n    "details": []\n  },\n  "meta": {\n    "timestamp": "2025-09-22T10:30:00Z"\n  },\n  "trace_id": "de9f8c7b-6543-21fe-cdba-123456789abc"\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"error-de-autorizaci\xf3n-403",children:"Error de autorizaci\xf3n (403)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "status": "error",\n  "error": {\n    "code": "FORBIDDEN_ACCESS",\n    "message": "No tienes permisos para realizar esta acci\xf3n",\n    "details": []\n  },\n  "meta": {\n    "timestamp": "2025-09-22T10:30:00Z"\n  },\n  "trace_id": "12ab34cd-5678-90ef-gh12-34567890abcd"\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"respuesta-exitosa-para-referencia",children:"Respuesta exitosa para referencia"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "status": "success",\n  "data": {\n    "id": "usr_123",\n    "name": "Juan P\xe9rez",\n    "email": "juan.perez@talma.pe",\n    "active": true,\n    "created_at": "2025-09-22T10:30:00Z"\n  },\n  "meta": {\n    "timestamp": "2025-09-22T10:30:01Z"\n  },\n  "trace_id": "abc123-def456-789012"\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-referencias",children:"\ud83d\udcd6 Referencias"}),"\n",(0,s.jsx)(n.h3,{id:"adrs-relacionados",children:"ADRs relacionados"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/adrs/adr-002-estandard-apis-rest",children:"ADR-002: Est\xe1ndar para APIs REST"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/adrs/adr-016-logging-estructurado",children:"ADR-016: Logging estructurado"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"recursos-externos",children:"Recursos externos"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.fluentvalidation.net/",children:"FluentValidation Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation",children:"ASP.NET Core Model Validation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-overview",children:"System.Text.Json Documentation"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>t});var a=r(96540);const s={},i=a.createContext(s);function o(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);