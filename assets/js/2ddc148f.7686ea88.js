"use strict";(self.webpackChunktlm_doc_architecture=self.webpackChunktlm_doc_architecture||[]).push([[9315],{28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var t=s(96540);const r={},a=t.createContext(r);function i(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}},96614:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"servicios-corporativos/api-gateway/vista-implementacion","title":"7. Vista de implementaci\xf3n","description":"7.1 Estructura del proyecto","source":"@site/docs/servicios-corporativos/api-gateway/07-vista-implementacion.md","sourceDirName":"servicios-corporativos/api-gateway","slug":"/servicios-corporativos/api-gateway/vista-implementacion","permalink":"/docs/servicios-corporativos/api-gateway/vista-implementacion","draft":false,"unlisted":false,"editUrl":"https://github.com/jclemente-tlm/tlm-doc-architecture/edit/main/docs/servicios-corporativos/api-gateway/07-vista-implementacion.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"6. Vista de tiempo de ejecuci\xf3n","permalink":"/docs/servicios-corporativos/api-gateway/vista-tiempo-ejecucion"},"next":{"title":"8. Conceptos transversales","permalink":"/docs/servicios-corporativos/api-gateway/conceptos-transversales"}}');var r=s(74848),a=s(28453);const i={},c="7. Vista de implementaci\xf3n",o={},l=[{value:"7.1 Estructura del proyecto",id:"71-estructura-del-proyecto",level:2},{value:"7.2 Dependencias principales",id:"72-dependencias-principales",level:2},{value:"7.3 Infraestructura y despliegue",id:"73-infraestructura-y-despliegue",level:2},{value:"7.3.1 Arquitectura de contenedores (local)",id:"731-arquitectura-de-contenedores-local",level:3},{value:"7.3.2 Dockerfile optimizado",id:"732-dockerfile-optimizado",level:3},{value:"7.3.3 Despliegue en AWS ECS con Terraform",id:"733-despliegue-en-aws-ecs-con-terraform",level:3},{value:"7.4 Configuraci\xf3n y secretos",id:"74-configuraci\xf3n-y-secretos",level:2},{value:"7.4.1 Configuraci\xf3n de la aplicaci\xf3n",id:"741-configuraci\xf3n-de-la-aplicaci\xf3n",level:3},{value:"7.4.2 Gesti\xf3n de secretos",id:"742-gesti\xf3n-de-secretos",level:3},{value:"7.5 Infraestructura como c\xf3digo",id:"75-infraestructura-como-c\xf3digo",level:2},{value:"7.6 CI/CD Pipeline",id:"76-cicd-pipeline",level:2},{value:"7.7 Monitoring y observabilidad",id:"77-monitoring-y-observabilidad",level:2},{value:"7.7.2 Alertas rules",id:"772-alertas-rules",level:3}];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"7-vista-de-implementaci\xf3n",children:"7. Vista de implementaci\xf3n"})}),"\n",(0,r.jsx)(n.h2,{id:"71-estructura-del-proyecto",children:"7.1 Estructura del proyecto"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Componente"}),(0,r.jsx)(n.th,{children:"Ubicaci\xf3n"}),(0,r.jsx)(n.th,{children:"Tecnolog\xeda"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"API Gateway"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/src/ApiGateway"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:".NET 8 Web API"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"YARP"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Microsoft.ReverseProxy"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"YARP 2.0+"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Redis"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"AWS ElastiCache"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Redis 7+"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Configuraci\xf3n"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"AWS Secrets Manager"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"JSON"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Docker"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/docker"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Dockerfile"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Scripts"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/scripts"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"PowerShell/Bash"})})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"72-dependencias-principales",children:"7.2 Dependencias principales"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Dependencia"}),(0,r.jsx)(n.th,{children:"Versi\xf3n"}),(0,r.jsx)(n.th,{children:"Prop\xf3sito"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"YARP"})}),(0,r.jsx)(n.td,{children:"2.0+"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Reverse Proxy"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"StackExchange.Redis"})}),(0,r.jsx)(n.td,{children:"2.6+"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Rate limiting"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Polly"})}),(0,r.jsx)(n.td,{children:"7.0+"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Resiliencia"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Serilog"})}),(0,r.jsx)(n.td,{children:"3.0+"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Logging"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Redis"})}),(0,r.jsx)(n.td,{children:"7.0+"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Cache y rate limiting"})})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"73-infraestructura-y-despliegue",children:"7.3 Infraestructura y despliegue"}),"\n",(0,r.jsx)(n.h3,{id:"731-arquitectura-de-contenedores-local",children:"7.3.1 Arquitectura de contenedores (local)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# docker-compose.yml para desarrollo local\nversion: \'3.8\'\nservices:\n  api-gateway:\n    build:\n      context: ./src/ApiGateway\n      dockerfile: Dockerfile\n    ports:\n      - "8080:8080"\n      - "8443:8443"\n    environment:\n      - ASPNETCORE_ENVIRONMENT=Development\n      - ASPNETCORE_URLS=http://+:8080;https://+:8443\n      - ASPNETCORE_Kestrel__Certificates__Default__Password=password\n      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/certificate.pfx\n    volumes:\n      - ./certs:/https:ro\n      - ./config:/app/config:ro\n    networks:\n      - gateway-network\n    depends_on:\n      - redis\n      - identity-service\n    restart: unless-stopped\n\n  redis:\n    image: redis:7-alpine\n    ports:\n      - "6379:6379"\n    command: redis-server --appendonly yes\n    volumes:\n      - redis-data:/data\n    networks:\n      - gateway-network\n    restart: unless-stopped\n\n  identity-service:\n    image: identity-service:latest\n    ports:\n      - "8081:8080"\n    environment:\n      - ASPNETCORE_ENVIRONMENT=Development\n    networks:\n      - gateway-network\n    restart: unless-stopped\n\nnetworks:\n  gateway-network:\n    driver: bridge\n\nvolumes:\n  redis-data:\n'})}),"\n",(0,r.jsx)(n.h3,{id:"732-dockerfile-optimizado",children:"7.3.2 Dockerfile optimizado"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dockerfile",children:'# Etapa de construcci\xf3n\nFROM mcr.microsoft.com/dotnet/sdk:8.0 AS build\nWORKDIR /src\n\n# Copy csproj and restore dependencies\nCOPY ["ApiGateway.csproj", "."]\nRUN dotnet restore "ApiGateway.csproj"\n\n# Copiar c\xf3digo fuente y construir\nCOPY . .\nRUN dotnet build "ApiGateway.csproj" -c Release -o /app/build\n\n# Publish stage\nFROM build AS publish\nRUN dotnet publish "ApiGateway.csproj" -c Release -o /app/publish \\\n    --no-restore --no-build\n\n# Runtime stage\nFROM mcr.microsoft.com/dotnet/aspnet:8.0 AS runtime\nWORKDIR /app\n\n# Create non-root user\nRUN groupadd -r appuser && useradd -r -g appuser appuser\n\n# Install required packages for observability\nRUN apt-get update && apt-get install -y \\\n    curl \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Copy published application\nCOPY --from=publish /app/publish .\n\n# Set ownership and permissions\nRUN chown -R appuser:appuser /app\nUSER appuser\n\n# Verificaci\xf3n de salud\nHEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \\\n    CMD curl -f http://localhost:8080/health || exit 1\n\n# Expose ports\nEXPOSE 8080\nEXPOSE 8443\n\nENTRYPOINT ["dotnet", "ApiGateway.dll"]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"733-despliegue-en-aws-ecs-con-terraform",children:"7.3.3 Despliegue en AWS ECS con Terraform"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-hcl",children:'# infrastructure/terraform/api-gateway-ecs.tf\nresource "aws_ecs_cluster" "api_gateway" {\n  name = "api-gateway-cluster"\n}\n\nresource "aws_ecs_task_definition" "api_gateway" {\n  family                   = "api-gateway"\n  network_mode             = "awsvpc"\n  requires_compatibilities = ["FARGATE"]\n  cpu                      = "512"\n  memory                   = "1024"\n  execution_role_arn       = aws_iam_role.ecs_task_execution_role.arn\n  task_role_arn            = aws_iam_role.ecs_task_role.arn\n\n  container_definitions = jsonencode([\n    {\n      name      = "api-gateway"\n      image     = "${var.ecr_repo_url}:latest"\n      cpu       = 512\n      memory    = 1024\n      essential = true\n      portMappings = [\n        { containerPort = 8080, hostPort = 8080 },\n        { containerPort = 8443, hostPort = 8443 }\n      ]\n      environment = [\n        { name = "ASPNETCORE_ENVIRONMENT", value = "Production" },\n        { name = "ConnectionStrings__Redis", value = var.redis_connection_string },\n        { name = "Authentication__Authority", value = var.identity_authority }\n      ]\n      logConfiguration = {\n        logDriver = "awslogs"\n        options = {\n          awslogs-group         = "/ecs/api-gateway"\n          awslogs-region        = var.aws_region\n          awslogs-stream-prefix = "ecs"\n        }\n      }\n      healthCheck = {\n        command     = ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]\n        interval    = 30\n        timeout     = 5\n        retries     = 3\n        startPeriod = 10\n      }\n    }\n  ])\n}\n\nresource "aws_ecs_service" "api_gateway" {\n  name            = "api-gateway-service"\n  cluster         = aws_ecs_cluster.api_gateway.id\n  task_definition = aws_ecs_task_definition.api_gateway.arn\n  desired_count   = 3\n  launch_type     = "FARGATE"\n  network_configuration {\n    subnets          = var.private_subnets\n    security_groups  = [aws_security_group.api_gateway.id]\n    assign_public_ip = false\n  }\n  load_balancer {\n    target_group_arn = aws_lb_target_group.api_gateway.arn\n    container_name   = "api-gateway"\n    container_port   = 8080\n  }\n  depends_on = [aws_lb_listener.api_gateway]\n}\n\n# ElastiCache Redis Cluster\nresource "aws_elasticache_replication_group" "redis_cluster" {\n  replication_group_id       = "api-gateway-redis"\n  description                = "Redis cluster for API Gateway"\n\n  node_type                  = "cache.t3.micro"\n  port                       = 6379\n  parameter_group_name       = "default.redis7"\n\n  num_cache_clusters         = 2\n  automatic_failover_enabled = true\n  multi_az_enabled          = true\n\n  subnet_group_name = aws_elasticache_subnet_group.redis.name\n  security_group_ids = [aws_security_group.redis.id]\n\n  at_rest_encryption_enabled = true\n  transit_encryption_enabled = true\n\n  tags = {\n    Environment = "production"\n    Service     = "api-gateway"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"74-configuraci\xf3n-y-secretos",children:"7.4 Configuraci\xf3n y secretos"}),"\n",(0,r.jsx)(n.h3,{id:"741-configuraci\xf3n-de-la-aplicaci\xf3n",children:"7.4.1 Configuraci\xf3n de la aplicaci\xf3n"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'// appsettings.Production.json (fragmento)\n{\n  "Logging": {\n    "LogLevel": {\n      "Default": "Information",\n      "Microsoft": "Warning"\n    }\n  },\n  "ReverseProxy": {\n    "Routes": {\n      "identity-route": {\n        "ClusterId": "identity-cluster",\n        "Match": { "Path": "/api/identity/{**catch-all}" }\n      }\n    },\n    "Clusters": {\n      "identity-cluster": {\n        "Destinations": {\n          "identity-1": { "Address": "http://identity-service:8080" }\n        }\n      }\n    }\n  },\n  "Authentication": {\n    "Authority": "https://identity.corporate-services.local",\n    "RequireHttpsMetadata": true\n  },\n  "RateLimiting": {\n    "DefaultPolicy": {\n      "PermitLimit": 1000,\n      "Window": "00:01:00"\n    }\n  },\n  "Observability": {\n    "ServiceName": "api-gateway",\n    "Jaeger": { "AgentHost": "jaeger-agent", "AgentPort": 6831 },\n    "Prometheus": { "Enabled": true, "Path": "/metrics" }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"742-gesti\xf3n-de-secretos",children:"7.4.2 Gesti\xf3n de secretos"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"AWS Secrets Manager"})," para credenciales sensibles (",(0,r.jsx)(n.code,{children:"Redis"}),", JWT, certificados TLS)."]}),"\n",(0,r.jsx)(n.li,{children:"Acceso a secretos v\xeda variables de entorno y configuraci\xf3n segura en tiempo de despliegue."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"75-infraestructura-como-c\xf3digo",children:"7.5 Infraestructura como c\xf3digo"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Todo el despliegue productivo se realiza con ",(0,r.jsx)(n.code,{children:"Terraform"})," sobre AWS (",(0,r.jsx)(n.code,{children:"ECS Fargate"}),", ",(0,r.jsx)(n.code,{children:"ElastiCache"}),", ",(0,r.jsx)(n.code,{children:"ALB"}),", ",(0,r.jsx)(n.code,{children:"Secrets Manager"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Los entornos de desarrollo usan ",(0,r.jsx)(n.code,{children:"docker-compose"})," y scripts Bash/PowerShell."]}),"\n",(0,r.jsxs)(n.li,{children:["Los pipelines CI/CD integran validaciones de seguridad (",(0,r.jsx)(n.code,{children:"Checkov"}),"), an\xe1lisis de c\xf3digo (",(0,r.jsx)(n.code,{children:"SonarQube"}),") y despliegue automatizado (",(0,r.jsx)(n.code,{children:"GitHub Actions"}),")."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"76-cicd-pipeline",children:"7.6 CI/CD Pipeline"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Pipeline basado en ",(0,r.jsx)(n.code,{children:"GitHub Actions"})," con etapas de build, test, an\xe1lisis de seguridad (",(0,r.jsx)(n.code,{children:"Trivy"}),"), an\xe1lisis de calidad (",(0,r.jsx)(n.code,{children:"SonarCloud"}),"), build/push de imagen y despliegue a AWS ECS v\xeda ",(0,r.jsx)(n.code,{children:"Terraform"})," y ",(0,r.jsx)(n.code,{children:"Helm"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Ejemplo de workflow:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/api-gateway-deploy.yml\nname: API Gateway CI/CD\n\non:\n  push:\n    branches: [ main, develop ]\n    paths: [ 'src/ApiGateway/**' ]\n  pull_request:\n    branches: [ main ]\n    paths: [ 'src/ApiGateway/**' ]\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: corporate-services/api-gateway\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Setup .NET\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: '8.0.x'\n\n    - name: Restore dependencies\n      run: dotnet restore src/ApiGateway/ApiGateway.csproj\n\n    - name: Build\n      run: dotnet build src/ApiGateway/ApiGateway.csproj --no-restore\n\n    - name: Test\n      run: dotnet test src/ApiGateway.Tests/ApiGateway.Tests.csproj --no-build --verbosity normal --collect:\"XPlat Code Coverage\"\n\n    - name: SonarCloud Scan\n      uses: SonarSource/sonarcloud-github-action@master\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n\n  security-scan:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Run Trivy vulnerability scanner\n      uses: aquasecurity/trivy-action@master\n      with:\n        scan-type: 'fs'\n        scan-ref: 'src/ApiGateway'\n        format: 'sarif'\n        output: 'trivy-results.sarif'\n\n    - name: Upload Trivy scan results\n      uses: github/codeql-action/upload-sarif@v2\n      with:\n        sarif_file: 'trivy-results.sarif'\n\n  build-and-push:\n    needs: [test, security-scan]\n    runs-on: ubuntu-latest\n    if: github.event_name == 'push' && github.ref == 'refs/heads/main'\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Log in to Container Registry\n      uses: docker/login-action@v2\n      with:\n        registry: ${{ env.REGISTRY }}\n        username: ${{ github.actor }}\n        password: ${{ secrets.GITHUB_TOKEN }}\n\n    - name: Extract metadata\n      id: meta\n      uses: docker/metadata-action@v4\n      with:\n        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n        tags: |\n          type=ref,event=branch\n          type=ref,event=pr\n          type=sha\n          type=raw,value=latest,enable={{is_default_branch}}\n\n    - name: Build and push Docker image\n      uses: docker/build-push-action@v4\n      with:\n        context: src/ApiGateway\n        push: true\n        tags: ${{ steps.meta.outputs.tags }}\n        labels: ${{ steps.meta.outputs.labels }}\n\n  deploy:\n    needs: build-and-push\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Configure AWS credentials\n      uses: aws-actions/configure-aws-credentials@v2\n      with:\n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: us-east-1\n\n    - name: Update kubeconfig\n      run: aws eks update-kubeconfig --name corporate-services-cluster\n\n    - name: Deploy to EKS\n      run: |\n        helm upgrade --install api-gateway ./helm/api-gateway \\\n          --namespace corporate-services \\\n          --create-namespace \\\n          --set image.tag=${{ github.sha }} \\\n          --set environment=production \\\n          --wait\n\n    - name: Verify deployment\n      run: |\n        kubectl rollout status deployment/api-gateway -n corporate-services\n        kubectl get pods -n corporate-services -l app=api-gateway\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"77-monitoring-y-observabilidad",children:"7.7 Monitoring y observabilidad"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Stack de observabilidad: ",(0,r.jsx)(n.code,{children:"Prometheus"})," (m\xe9tricas), ",(0,r.jsx)(n.code,{children:"Grafana"})," (dashboards), ",(0,r.jsx)(n.code,{children:"Loki"})," (logs), ",(0,r.jsx)(n.code,{children:"Jaeger"})," (tracing distribuido)."]}),"\n",(0,r.jsx)(n.li,{children:"Dashboards y alertas preconfiguradas para latencia, errores 5xx, disponibilidad y saturaci\xf3n de recursos."}),"\n",(0,r.jsx)(n.li,{children:"Exporters y anotaciones autom\xe1ticas en los contenedores para scraping de m\xe9tricas y logs estructurados."}),"\n",(0,r.jsx)(n.li,{children:"Ejemplo de configuraci\xf3n Prometheus:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# monitoring/prometheus/prometheus.yml\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nrule_files:\n  - \"api-gateway-alerts.yml\"\n\nscrape_configs:\n  - job_name: 'api-gateway'\n    kubernetes_sd_configs:\n      - role: endpoints\n        namespaces:\n          names:\n            - corporate-services\n    relabel_configs:\n      - source_labels: [__meta_kubernetes_service_name]\n        action: keep\n        regex: api-gateway-service\n      - source_labels: [__meta_kubernetes_endpoint_port_name]\n        action: keep\n        regex: http\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n        action: keep\n        regex: true\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n        action: replace\n        target_label: __metrics_path__\n        regex: (.+)\n\nalertas:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          - alertmanager:9093\n"})}),"\n",(0,r.jsx)(n.h3,{id:"772-alertas-rules",children:"7.7.2 Alertas rules"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# monitoring/prometheus/api-gateway-alerts.yml\ngroups:\n- name: api-gateway\n  rules:\n  - alert: APIGatewayHighErrorRate\n    expr: (rate(http_requests_total{job="api-gateway",code=~"5.."}[5m]) / rate(http_requests_total{job="api-gateway"}[5m])) > 0.05\n    for: 5m\n    labels:\n      severity: critical\n    annotations:\n      summary: "API Gateway error rate is above 5%"\n      description: "API Gateway error rate is {{ $value | humanizePercentage }} for the last 5 minutes"\n\n  - alert: APIGatewayHighLatency\n    expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job="api-gateway"}[5m])) > 1\n    for: 10m\n    labels:\n      severity: warning\n    annotations:\n      summary: "API Gateway 95th percentile latency is high"\n      description: "API Gateway 95th percentile latency is {{ $value }}s"\n\n  - alert: APIGatewayDown\n    expr: up{job="api-gateway"} == 0\n    for: 1m\n    labels:\n      severity: critical\n    annotations:\n      summary: "API Gateway is down"\n      description: "API Gateway has been down for more than 1 minute"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"La implementaci\xf3n del API Gateway sigue los principios de Clean Architecture, IaC, seguridad y observabilidad, alineada a los ADRs y modelos C4/Structurizr DSL del sistema."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);