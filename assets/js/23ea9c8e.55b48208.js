"use strict";(self.webpackChunktlm_doc_architecture=self.webpackChunktlm_doc_architecture||[]).push([[697],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(96540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},77122:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"lineamientos/desarrollo-de-apis/performance-y-monitoreo","title":"Performance y monitoreo","description":"Esta gu\xeda establece las mejores pr\xe1cticas para optimizaci\xf3n de performance y monitoreo efectivo de APIs REST.","source":"@site/docs/lineamientos/desarrollo-de-apis/05-performance-y-monitoreo.md","sourceDirName":"lineamientos/desarrollo-de-apis","slug":"/lineamientos/desarrollo-de-apis/performance-y-monitoreo","permalink":"/tlm-doc-architecture/docs/lineamientos/desarrollo-de-apis/performance-y-monitoreo","draft":false,"unlisted":false,"editUrl":"https://github.com/jclemente-tlm/tlm-doc-architecture/edit/main/docs/lineamientos/desarrollo-de-apis/05-performance-y-monitoreo.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Performance y monitoreo","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Versionado y documentaci\xf3n","permalink":"/tlm-doc-architecture/docs/lineamientos/desarrollo-de-apis/versionado-y-documentacion"},"next":{"title":"Lineamientos para desarrollo de APIs","permalink":"/tlm-doc-architecture/docs/lineamientos/desarrollo-de-apis/"}}');var i=t(74848),s=t(28453);const a={title:"Performance y monitoreo",sidebar_position:5},o=void 0,c={},l=[{value:"\u26a1 Optimizaci\xf3n de performance",id:"-optimizaci\xf3n-de-performance",level:2},{value:"Paginaci\xf3n eficiente",id:"paginaci\xf3n-eficiente",level:3},{value:"Caching estrat\xe9gico",id:"caching-estrat\xe9gico",level:3},{value:"Compresi\xf3n de respuestas",id:"compresi\xf3n-de-respuestas",level:3},{value:"Async/await patterns",id:"asyncawait-patterns",level:3},{value:"\ud83d\udcca Monitoreo y m\xe9tricas",id:"-monitoreo-y-m\xe9tricas",level:2},{value:"M\xe9tricas de performance",id:"m\xe9tricas-de-performance",level:3},{value:"Health checks",id:"health-checks",level:3},{value:"Logging estructurado",id:"logging-estructurado",level:3},{value:"Distributed tracing",id:"distributed-tracing",level:3},{value:"\ud83d\udcc8 Rate limiting",id:"-rate-limiting",level:2},{value:"Implementaci\xf3n con AspNetCoreRateLimit",id:"implementaci\xf3n-con-aspnetcoreratelimit",level:3},{value:"\ud83d\udccb Checklist de performance",id:"-checklist-de-performance",level:2},{value:"Pre-deployment",id:"pre-deployment",level:3},{value:"Monitoring",id:"monitoring",level:3},{value:"\ud83d\udcd6 Referencias",id:"-referencias",level:2},{value:"ADRs relacionados",id:"adrs-relacionados",level:3},{value:"Recursos externos",id:"recursos-externos",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Esta gu\xeda establece las mejores pr\xe1cticas para optimizaci\xf3n de performance y monitoreo efectivo de APIs REST."}),"\n",(0,i.jsx)(n.h2,{id:"-optimizaci\xf3n-de-performance",children:"\u26a1 Optimizaci\xf3n de performance"}),"\n",(0,i.jsx)(n.h3,{id:"paginaci\xf3n-eficiente",children:"Paginaci\xf3n eficiente"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class PagedQuery\n{\n    [Range(1, int.MaxValue)]\n    public int Page { get; set; } = 1;\n\n    [Range(1, 100)]  // L\xedmite m\xe1ximo por p\xe1gina\n    public int Limit { get; set; } = 20;\n\n    public string Sort { get; set; } = "id";\n    public string Order { get; set; } = "asc";\n}\n\n[HttpGet]\npublic async Task<ActionResult<PagedResponse<UserDto>>> GetUsers(\n    [FromQuery] PagedQuery query)\n{\n    // Usar skip/take para paginaci\xf3n eficiente\n    var users = await _context.Users\n        .OrderBy(u => u.Id)\n        .Skip((query.Page - 1) * query.Limit)\n        .Take(query.Limit)\n        .Select(u => new UserDto\n        {\n            Id = u.Id,\n            Name = u.Name,\n            Email = u.Email\n        })\n        .ToListAsync();\n\n    var total = await _context.Users.CountAsync();\n\n    return Ok(new PagedResponse<UserDto>\n    {\n        Data = users,\n        Meta = new MetaData\n        {\n            Pagination = new PaginationMeta\n            {\n                Page = query.Page,\n                PerPage = query.Limit,\n                Total = total,\n                TotalPages = (int)Math.Ceiling(total / (double)query.Limit)\n            }\n        }\n    });\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"caching-estrat\xe9gico",children:"Caching estrat\xe9gico"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class UserService\n{\n    private readonly IMemoryCache _cache;\n    private readonly IUserRepository _repository;\n\n    public UserService(IMemoryCache cache, IUserRepository repository)\n    {\n        _cache = cache;\n        _repository = repository;\n    }\n\n    public async Task<UserDto> GetUserAsync(int id)\n    {\n        var cacheKey = $"user_{id}";\n\n        if (_cache.TryGetValue(cacheKey, out UserDto cachedUser))\n            return cachedUser;\n\n        var user = await _repository.GetUserAsync(id);\n        if (user == null) return null;\n\n        var userDto = _mapper.Map<UserDto>(user);\n\n        // Cache por 15 minutos\n        _cache.Set(cacheKey, userDto, TimeSpan.FromMinutes(15));\n\n        return userDto;\n    }\n\n    public async Task InvalidateUserCacheAsync(int id)\n    {\n        var cacheKey = $"user_{id}";\n        _cache.Remove(cacheKey);\n    }\n}\n\n// Controller con Response Caching\n[HttpGet("{id}")]\n[ResponseCache(Duration = 300, VaryByQueryKeys = new[] { "id" })]\npublic async Task<ActionResult<UserDto>> GetUser(int id)\n{\n    var user = await _userService.GetUserAsync(id);\n    if (user == null) return NotFound();\n\n    // Agregar ETag para cache del cliente\n    var etag = GenerateETag(user);\n    Response.Headers.ETag = etag;\n\n    if (Request.Headers.IfNoneMatch.Contains(etag))\n        return StatusCode(304); // Not Modified\n\n    return Ok(user);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"compresi\xf3n-de-respuestas",children:"Compresi\xf3n de respuestas"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// Program.cs\nbuilder.Services.AddResponseCompression(options =>\n{\n    options.EnableForHttps = true;\n    options.Providers.Add<BrotliCompressionProvider>();\n    options.Providers.Add<GzipCompressionProvider>();\n    options.MimeTypes = ResponseCompressionDefaults.MimeTypes.Concat(new[]\n    {\n        "application/json",\n        "application/xml"\n    });\n});\n\nbuilder.Services.Configure<BrotliCompressionProviderOptions>(options =>\n{\n    options.Level = CompressionLevel.Optimal;\n});\n\nvar app = builder.Build();\napp.UseResponseCompression();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"asyncawait-patterns",children:"Async/await patterns"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// \u2705 CORRECTO - Patr\xf3n async eficiente\npublic async Task<ActionResult<IEnumerable<UserDto>>> GetUsersWithOrdersAsync()\n{\n    // Ejecutar consultas en paralelo\n    var usersTask = _context.Users.ToListAsync();\n    var ordersTask = _context.Orders.ToListAsync();\n\n    await Task.WhenAll(usersTask, ordersTask);\n\n    var users = usersTask.Result;\n    var orders = ordersTask.Result;\n\n    // Procesar resultados...\n    return Ok(ProcessUsersAndOrders(users, orders));\n}\n\n// \u274c INCORRECTO - Bloqueo del hilo\npublic async Task<ActionResult<UserDto>> GetUserBadExample(int id)\n{\n    var user = _userService.GetUserAsync(id).Result; // Bloquea\n    return Ok(user);\n}\n\n// \u274c INCORRECTO - Consultas secuenciales innecesarias\npublic async Task<ActionResult<UserDto>> GetUserSequential(int id)\n{\n    var user = await _userService.GetUserAsync(id);\n    var orders = await _orderService.GetUserOrdersAsync(id); // Podr\xeda ser paralelo\n    var profile = await _profileService.GetUserProfileAsync(id);\n\n    return Ok(new { user, orders, profile });\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-monitoreo-y-m\xe9tricas",children:"\ud83d\udcca Monitoreo y m\xe9tricas"}),"\n",(0,i.jsx)(n.h3,{id:"m\xe9tricas-de-performance",children:"M\xe9tricas de performance"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class ApiMetrics\n{\n    private readonly IMeterFactory _meterFactory;\n    private readonly Meter _meter;\n    private readonly Counter<long> _requestCounter;\n    private readonly Histogram<double> _requestDuration;\n    private readonly Histogram<long> _requestSize;\n    private readonly Counter<long> _errorCounter;\n\n    public ApiMetrics(IMeterFactory meterFactory)\n    {\n        _meterFactory = meterFactory;\n        _meter = _meterFactory.Create("Talma.Api");\n\n        _requestCounter = _meter.CreateCounter<long>(\n            "http_requests_total",\n            description: "Total number of HTTP requests");\n\n        _requestDuration = _meter.CreateHistogram<double>(\n            "http_request_duration_seconds",\n            description: "HTTP request duration in seconds");\n\n        _requestSize = _meter.CreateHistogram<long>(\n            "http_request_size_bytes",\n            description: "HTTP request size in bytes");\n\n        _errorCounter = _meter.CreateCounter<long>(\n            "http_errors_total",\n            description: "Total number of HTTP errors");\n    }\n\n    public void RecordRequest(string method, string endpoint, int statusCode, double duration)\n    {\n        var tags = new TagList\n        {\n            { "method", method },\n            { "endpoint", endpoint },\n            { "status_code", statusCode.ToString() }\n        };\n\n        _requestCounter.Add(1, tags);\n        _requestDuration.Record(duration, tags);\n\n        if (statusCode >= 400)\n            _errorCounter.Add(1, tags);\n    }\n}\n\n// Middleware de m\xe9tricas\npublic class MetricsMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ApiMetrics _metrics;\n\n    public MetricsMiddleware(RequestDelegate next, ApiMetrics metrics)\n    {\n        _next = next;\n        _metrics = metrics;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        var stopwatch = Stopwatch.StartNew();\n\n        try\n        {\n            await _next(context);\n        }\n        finally\n        {\n            stopwatch.Stop();\n\n            var method = context.Request.Method;\n            var endpoint = context.Request.Path.Value;\n            var statusCode = context.Response.StatusCode;\n            var duration = stopwatch.Elapsed.TotalSeconds;\n\n            _metrics.RecordRequest(method, endpoint, statusCode, duration);\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"health-checks",children:"Health checks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// Program.cs\nbuilder.Services.AddHealthChecks()\n    .AddDbContext<ApplicationDbContext>()\n    .AddRedis(builder.Configuration.GetConnectionString("Redis"))\n    .AddCheck<ExternalApiHealthCheck>("external-api")\n    .AddCheck("memory", () =>\n    {\n        var allocated = GC.GetTotalMemory(false);\n        var threshold = 500_000_000; // 500MB\n\n        return allocated < threshold\n            ? HealthCheckResult.Healthy($"Memory usage: {allocated:N0} bytes")\n            : HealthCheckResult.Unhealthy($"Memory usage too high: {allocated:N0} bytes");\n    });\n\nvar app = builder.Build();\n\napp.MapHealthChecks("/health", new HealthCheckOptions\n{\n    ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse\n});\n\napp.MapHealthChecks("/health/ready", new HealthCheckOptions\n{\n    Predicate = check => check.Tags.Contains("ready")\n});\n\napp.MapHealthChecks("/health/live", new HealthCheckOptions\n{\n    Predicate = _ => false\n});\n\n// Health check personalizado\npublic class ExternalApiHealthCheck : IHealthCheck\n{\n    private readonly HttpClient _httpClient;\n    private readonly ILogger<ExternalApiHealthCheck> _logger;\n\n    public ExternalApiHealthCheck(HttpClient httpClient, ILogger<ExternalApiHealthCheck> logger)\n    {\n        _httpClient = httpClient;\n        _logger = logger;\n    }\n\n    public async Task<HealthCheckResult> CheckHealthAsync(\n        HealthCheckContext context,\n        CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var response = await _httpClient.GetAsync("/api/health", cancellationToken);\n\n            if (response.IsSuccessStatusCode)\n            {\n                return HealthCheckResult.Healthy("External API is responsive");\n            }\n\n            return HealthCheckResult.Unhealthy(\n                $"External API returned {response.StatusCode}");\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, "Health check failed for external API");\n            return HealthCheckResult.Unhealthy(\n                "External API is unreachable", ex);\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"logging-estructurado",children:"Logging estructurado"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class UserController : ControllerBase\n{\n    private readonly ILogger<UserController> _logger;\n\n    public UserController(ILogger<UserController> logger)\n    {\n        _logger = logger;\n    }\n\n    [HttpGet("{id}")]\n    public async Task<ActionResult<UserDto>> GetUser(int id)\n    {\n        using var activity = Activity.StartActivity("GetUser");\n        activity?.SetTag("user.id", id);\n\n        _logger.LogInformation("Getting user {UserId}", id);\n\n        var stopwatch = Stopwatch.StartNew();\n\n        try\n        {\n            var user = await _userService.GetUserAsync(id);\n\n            if (user == null)\n            {\n                _logger.LogWarning("User {UserId} not found", id);\n                return NotFound();\n            }\n\n            stopwatch.Stop();\n\n            _logger.LogInformation(\n                "Successfully retrieved user {UserId} in {ElapsedMs}ms",\n                id, stopwatch.ElapsedMilliseconds);\n\n            return Ok(user);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex,\n                "Error retrieving user {UserId} after {ElapsedMs}ms",\n                id, stopwatch.ElapsedMilliseconds);\n            throw;\n        }\n    }\n}\n\n// Configuraci\xf3n de logging\nbuilder.Logging.ClearProviders();\nbuilder.Logging.AddConsole();\nbuilder.Logging.AddJsonConsole(options =>\n{\n    options.IncludeScopes = true;\n    options.TimestampFormat = "yyyy-MM-dd HH:mm:ss.fff zzz";\n    options.JsonWriterOptions = new JsonWriterOptions\n    {\n        Indented = false\n    };\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"distributed-tracing",children:"Distributed tracing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// Program.cs\nbuilder.Services.AddOpenTelemetry()\n    .WithTracing(tracing =>\n    {\n        tracing\n            .AddAspNetCoreInstrumentation(options =>\n            {\n                options.RecordException = true;\n                options.Filter = httpContext =>\n                {\n                    // No rastrear health checks\n                    return !httpContext.Request.Path.StartsWithSegments("/health");\n                };\n            })\n            .AddEntityFrameworkCoreInstrumentation(options =>\n            {\n                options.SetDbStatementForText = true;\n                options.SetDbStatementForStoredProcedure = true;\n            })\n            .AddHttpClientInstrumentation()\n            .AddRedisInstrumentation()\n            .AddJaegerExporter();\n    });\n\n// En el controller\npublic async Task<ActionResult<UserDto>> GetUser(int id)\n{\n    using var activity = Activity.StartActivity("GetUser");\n    activity?.SetTag("user.id", id);\n    activity?.SetTag("operation", "read");\n\n    var user = await _userService.GetUserAsync(id);\n\n    activity?.SetTag("user.found", user != null);\n    activity?.SetStatus(user != null ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\n    return user != null ? Ok(user) : NotFound();\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-rate-limiting",children:"\ud83d\udcc8 Rate limiting"}),"\n",(0,i.jsx)(n.h3,{id:"implementaci\xf3n-con-aspnetcoreratelimit",children:"Implementaci\xf3n con AspNetCoreRateLimit"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// Program.cs\nbuilder.Services.AddMemoryCache();\nbuilder.Services.Configure<IpRateLimitOptions>(options =>\n{\n    options.EnableEndpointRateLimiting = true;\n    options.StackBlockedRequests = false;\n    options.HttpStatusCode = 429;\n    options.RealIpHeader = "X-Real-IP";\n    options.GeneralRules = new List<RateLimitRule>\n    {\n        new RateLimitRule\n        {\n            Endpoint = "*",\n            Period = "1m",\n            Limit = 100\n        },\n        new RateLimitRule\n        {\n            Endpoint = "POST:/api/*/users",\n            Period = "1h",\n            Limit = 10\n        }\n    };\n});\n\nbuilder.Services.Configure<IpRateLimitPolicies>(options =>\n{\n    options.IpRules = new List<IpRateLimitPolicy>\n    {\n        new IpRateLimitPolicy\n        {\n            Ip = "127.0.0.1",\n            Rules = new List<RateLimitRule>\n            {\n                new RateLimitRule\n                {\n                    Endpoint = "*",\n                    Period = "1m",\n                    Limit = 1000  // Mayor l\xedmite para desarrollo\n                }\n            }\n        }\n    };\n});\n\nbuilder.Services.AddSingleton<IIpPolicyStore, MemoryCacheIpPolicyStore>();\nbuilder.Services.AddSingleton<IRateLimitCounterStore, MemoryCacheRateLimitCounterStore>();\nbuilder.Services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();\nbuilder.Services.AddSingleton<IProcessingStrategy, AsyncKeyLockProcessingStrategy>();\n\nvar app = builder.Build();\napp.UseIpRateLimiting();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-checklist-de-performance",children:"\ud83d\udccb Checklist de performance"}),"\n",(0,i.jsx)(n.h3,{id:"pre-deployment",children:"Pre-deployment"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Paginaci\xf3n"}),": Implementada en endpoints de listado"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Caching"}),": Configurado para datos frecuentemente consultados"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Compresi\xf3n"}),": Habilitada para responses JSON/XML"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Async/await"}),": Usado consistentemente sin bloqueos"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Database queries"}),": Optimizadas con \xedndices apropiados"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"N+1 queries"}),": Identificadas y resueltas"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Response size"}),": Minimizado con DTOs espec\xedficos"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Rate limiting"}),": Configurado por tipo de endpoint"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"monitoring",children:"Monitoring"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"M\xe9tricas"}),": Request duration, error rates, throughput"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Health checks"}),": Database, external services, memoria"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Logging"}),": Estructurado con correlation IDs"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Alertas"}),": Configuradas para SLAs cr\xedticos"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Dashboards"}),": Visibilidad de performance en tiempo real"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-referencias",children:"\ud83d\udcd6 Referencias"}),"\n",(0,i.jsx)(n.h3,{id:"adrs-relacionados",children:"ADRs relacionados"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docs/adrs/adr-011-cache-distribuido",children:"ADR-011: Cache distribuido"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docs/adrs/adr-016-logging-estructurado",children:"ADR-016: Logging estructurado"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"recursos-externos",children:"Recursos externos"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/aspnet/core/performance/performance-best-practices",children:"ASP.NET Core Performance Best Practices"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://opentelemetry.io/docs/instrumentation/net/",children:"OpenTelemetry .NET"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/aspnet/core/performance/rate-limit",children:"Rate Limiting in ASP.NET Core"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching",children:"HTTP Caching"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);