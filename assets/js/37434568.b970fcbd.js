"use strict";(self.webpackChunktlm_doc_architecture=self.webpackChunktlm_doc_architecture||[]).push([[8269],{28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var r=s(96540);const a={},t=r.createContext(a);function i(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(t.Provider,{value:n},e.children)}},85173:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"lineamientos/desarrollo-de-apis/diseno-y-arquitectura","title":"Dise\xf1o y arquitectura de APIs","description":"Esta gu\xeda establece los principios fundamentales para el dise\xf1o de APIs REST bien estructuradas, escalables y mantenibles en Talma.","source":"@site/docs/lineamientos/desarrollo-de-apis/01-diseno-y-arquitectura.md","sourceDirName":"lineamientos/desarrollo-de-apis","slug":"/lineamientos/desarrollo-de-apis/diseno-y-arquitectura","permalink":"/tlm-doc-architecture/docs/lineamientos/desarrollo-de-apis/diseno-y-arquitectura","draft":false,"unlisted":false,"editUrl":"https://github.com/jclemente-tlm/tlm-doc-architecture/edit/main/docs/lineamientos/desarrollo-de-apis/01-diseno-y-arquitectura.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Dise\xf1o y arquitectura de APIs","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Desarrollo de APIs","permalink":"/tlm-doc-architecture/docs/desarrollo-de-apis"},"next":{"title":"Seguridad de APIs","permalink":"/tlm-doc-architecture/docs/lineamientos/desarrollo-de-apis/seguridad"}}');var a=s(74848),t=s(28453);const i={title:"Dise\xf1o y arquitectura de APIs",sidebar_position:1},o=void 0,c={},l=[{value:"\ud83c\udfaf Principios de dise\xf1o",id:"-principios-de-dise\xf1o",level:2},{value:"RESTful design",id:"restful-design",level:3},{value:"Naming conventions",id:"naming-conventions",level:3},{value:"\ud83d\udcca Estructura de recursos",id:"-estructura-de-recursos",level:2},{value:"Jerarqu\xeda de recursos",id:"jerarqu\xeda-de-recursos",level:3},{value:"Paginaci\xf3n y filtros",id:"paginaci\xf3n-y-filtros",level:3},{value:"\ud83d\udccb Estructura de respuesta est\xe1ndar",id:"-estructura-de-respuesta-est\xe1ndar",level:2},{value:"\ud83d\udccc Elementos obligatorios",id:"-elementos-obligatorios",level:3},{value:"Atributos opcionales dentro de <code>meta</code>",id:"atributos-opcionales-dentro-de-meta",level:4},{value:"\u2705 Respuestas exitosas",id:"-respuestas-exitosas",level:3},{value:"Recurso \xfanico",id:"recurso-\xfanico",level:4},{value:"Colecci\xf3n con paginaci\xf3n y atributos opcionales",id:"colecci\xf3n-con-paginaci\xf3n-y-atributos-opcionales",level:4},{value:"\u274c Respuestas de error",id:"-respuestas-de-error",level:3},{value:"Error de validaci\xf3n",id:"error-de-validaci\xf3n",level:4},{value:"Recurso no encontrado",id:"recurso-no-encontrado",level:4},{value:"\ud83d\udd27 C\xf3digos de estado HTTP",id:"-c\xf3digos-de-estado-http",level:2},{value:"Uso apropiado de status codes",id:"uso-apropiado-de-status-codes",level:3},{value:"\ud83c\udfd7\ufe0f Implementaci\xf3n con ASP.NET Core",id:"\ufe0f-implementaci\xf3n-con-aspnet-core",level:2},{value:"Controller base pattern",id:"controller-base-pattern",level:3},{value:"DTOs y modelos de respuesta",id:"dtos-y-modelos-de-respuesta",level:3},{value:"\ud83d\udcd6 Referencias",id:"-referencias",level:2},{value:"ADRs relacionados",id:"adrs-relacionados",level:3},{value:"Recursos externos",id:"recursos-externos",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Esta gu\xeda establece los principios fundamentales para el dise\xf1o de APIs REST bien estructuradas, escalables y mantenibles en Talma."}),"\n",(0,a.jsx)(n.h2,{id:"-principios-de-dise\xf1o",children:"\ud83c\udfaf Principios de dise\xf1o"}),"\n",(0,a.jsx)(n.h3,{id:"restful-design",children:"RESTful design"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Recursos como sustantivos"}),": Usar sustantivos para endpoints (",(0,a.jsx)(n.code,{children:"/users"}),", ",(0,a.jsx)(n.code,{children:"/orders"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Verbos HTTP apropiados"}),": GET, POST, PUT, DELETE, PATCH seg\xfan la operaci\xf3n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Representaci\xf3n uniforme"}),": Consistencia en estructura de URLs y respuestas"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Sin estado"}),": Cada request debe contener toda la informaci\xf3n necesaria"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"naming-conventions",children:"Naming conventions"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"\u2705 CORRECTO\nGET    /api/v1/users              # Obtener lista de usuarios\nGET    /api/v1/users/123          # Obtener usuario espec\xedfico\nPOST   /api/v1/users              # Crear nuevo usuario\nPUT    /api/v1/users/123          # Actualizar usuario completo\nPATCH  /api/v1/users/123          # Actualizar campos espec\xedficos\nDELETE /api/v1/users/123          # Eliminar usuario\n\nGET    /api/v1/users/123/orders   # Obtener \xf3rdenes del usuario\nPOST   /api/v1/users/123/orders   # Crear orden para el usuario\n\n\u274c INCORRECTO\nGET    /api/v1/getUsers           # Verbo en URL\nPOST   /api/v1/user               # Singular en colecci\xf3n\nGET    /api/v1/users/delete/123   # Verbo en lugar de m\xe9todo HTTP\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-estructura-de-recursos",children:"\ud83d\udcca Estructura de recursos"}),"\n",(0,a.jsx)(n.h3,{id:"jerarqu\xeda-de-recursos",children:"Jerarqu\xeda de recursos"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"/api/v1/companies/{company-id}\n\u251c\u2500\u2500 /users                    # Usuarios de la compa\xf1\xeda\n\u251c\u2500\u2500 /departments              # Departamentos\n\u2502   \u2514\u2500\u2500 /{dept-id}/employees  # Empleados del departamento\n\u2514\u2500\u2500 /projects                 # Proyectos de la compa\xf1\xeda\n    \u2514\u2500\u2500 /{project-id}/tasks   # Tareas del proyecto\n"})}),"\n",(0,a.jsx)(n.h3,{id:"paginaci\xf3n-y-filtros",children:"Paginaci\xf3n y filtros"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"GET /api/v1/users?page=1&limit=20&sort=name&order=asc\nGET /api/v1/users?filter[department]=IT&filter[active]=true\nGET /api/v1/users?search=juan&fields=id,name,email\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-estructura-de-respuesta-est\xe1ndar",children:"\ud83d\udccb Estructura de respuesta est\xe1ndar"}),"\n",(0,a.jsx)(n.h3,{id:"-elementos-obligatorios",children:"\ud83d\udccc Elementos obligatorios"}),"\n",(0,a.jsx)(n.p,{children:"Toda respuesta debe incluir los siguientes atributos en la ra\xedz:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"status"}),': "success" o "error".']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"data"}),": objeto o arreglo; en caso de error debe ser ",(0,a.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"errors"}),": arreglo de errores; en \xe9xito debe ser ",(0,a.jsx)(n.code,{children:"[]"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"meta"}),": objeto que debe contener al menos ",(0,a.jsx)(n.code,{children:"trace_id"})," y ",(0,a.jsx)(n.code,{children:"timestamp"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.h4,{id:"atributos-opcionales-dentro-de-meta",children:["Atributos opcionales dentro de ",(0,a.jsx)(n.code,{children:"meta"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"tenant"}),": identificador del tenant (si aplica multi-tenant)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"pagination"}),": informaci\xf3n de paginaci\xf3n (por ejemplo: ",(0,a.jsx)(n.code,{children:"page"}),", ",(0,a.jsx)(n.code,{children:"size"}),", ",(0,a.jsx)(n.code,{children:"total"}),")."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"links"}),": enlaces relacionados."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"extra"}),": extensiones futuras (warnings, flags, etc.)."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"-respuestas-exitosas",children:"\u2705 Respuestas exitosas"}),"\n",(0,a.jsx)(n.h4,{id:"recurso-\xfanico",children:"Recurso \xfanico"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "status": "success",\n  "data": {\n    "id": "123",\n    "name": "Juan P\xe9rez",\n    "email": "juan.perez@talma.pe",\n    "active": true,\n    "created_at": "2024-01-15T10:30:00Z"\n  },\n  "errors": [],\n  "meta": {\n    "timestamp": "2024-01-15T10:30:01Z",\n    "trace_id": "c1d2e3f4-5678-90ab-cdef-1234567890ab"\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"colecci\xf3n-con-paginaci\xf3n-y-atributos-opcionales",children:"Colecci\xf3n con paginaci\xf3n y atributos opcionales"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "status": "success",\n  "data": [\n    {\n      "id": "123",\n      "name": "Juan P\xe9rez",\n      "email": "juan.perez@talma.pe",\n      "active": true,\n      "created_at": "2024-01-15T10:30:00Z"\n    },\n    {\n      "id": "124",\n      "name": "Ana G\xf3mez",\n      "email": "ana.gomez@talma.pe",\n      "active": true,\n      "created_at": "2024-01-15T11:00:00Z"\n    }\n  ],\n  "errors": [],\n  "meta": {\n    "timestamp": "2024-01-15T10:30:01Z",\n    "trace_id": "a9b8c7d6-5432-10fe-dcba-0987654321ff",\n    "pagination": {\n      "page": 1,\n      "size": 20,\n      "total": 150,\n      "total_pages": 8\n    },\n    "links": {\n      "self": "/api/v1/users?page=1",\n      "next": "/api/v1/users?page=2",\n      "last": "/api/v1/users?page=8"\n    },\n    "tenant": "talma-pe"\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"-respuestas-de-error",children:"\u274c Respuestas de error"}),"\n",(0,a.jsx)(n.h4,{id:"error-de-validaci\xf3n",children:"Error de validaci\xf3n"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "status": "error",\n  "data": null,\n  "errors": [\n    {\n      "code": "VALIDATION_FAILED",\n      "message": "La solicitud contiene errores de validaci\xf3n",\n      "details": [\n        { "field": "email", "issue": "El formato no es v\xe1lido" },\n        { "field": "name", "issue": "Es un campo requerido" }\n      ]\n    }\n  ],\n  "meta": {\n    "timestamp": "2024-01-15T10:30:01Z",\n    "trace_id": "de9f8c7b-6543-21fe-cdba-123456789abc"\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"recurso-no-encontrado",children:"Recurso no encontrado"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "status": "error",\n  "data": null,\n  "errors": [\n    {\n      "code": "USER_NOT_FOUND",\n      "message": "El usuario no existe",\n      "details": [\n        { "field": "id", "issue": "No se encontr\xf3 ning\xfan usuario con el identificador \'999\'" }\n      ]\n    }\n  ],\n  "meta": {\n    "timestamp": "2024-01-15T10:30:01Z",\n    "trace_id": "12ab34cd-5678-90ef-gh12-34567890abcd"\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"-c\xf3digos-de-estado-http",children:"\ud83d\udd27 C\xf3digos de estado HTTP"}),"\n",(0,a.jsx)(n.h3,{id:"uso-apropiado-de-status-codes",children:"Uso apropiado de status codes"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"2xx Success\n200 OK          - Operaci\xf3n exitosa con datos\n201 Created     - Recurso creado exitosamente\n204 No Content  - Operaci\xf3n exitosa sin datos de respuesta\n\n4xx Client Error\n400 Bad Request        - Request malformado o datos inv\xe1lidos\n401 Unauthorized       - Autenticaci\xf3n requerida\n403 Forbidden         - Usuario autenticado sin permisos\n404 Not Found         - Recurso no encontrado\n409 Conflict          - Conflicto con estado actual del recurso\n422 Unprocessable     - Datos v\xe1lidos pero l\xf3gica de negocio falla\n\n5xx Server Error\n500 Internal Server Error - Error interno no especificado\n502 Bad Gateway          - Error de gateway/proxy\n503 Service Unavailable  - Servicio temporalmente no disponible\n"})}),"\n",(0,a.jsx)(n.h2,{id:"\ufe0f-implementaci\xf3n-con-aspnet-core",children:"\ud83c\udfd7\ufe0f Implementaci\xf3n con ASP.NET Core"}),"\n",(0,a.jsx)(n.h3,{id:"controller-base-pattern",children:"Controller base pattern"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'[ApiController]\n[Route("api/v{version:apiVersion}/[controller]")]\n[ApiVersion("1.0")]\npublic class UsersController : ControllerBase\n{\n    private readonly IUserService _userService;\n    private readonly IMapper _mapper;\n\n    public UsersController(IUserService userService, IMapper mapper)\n    {\n        _userService = userService;\n        _mapper = mapper;\n    }\n\n    [HttpGet]\n    [ProducesResponseType(typeof(PagedResponse<UserDto>), 200)]\n    public async Task<ActionResult<PagedResponse<UserDto>>> GetUsers(\n        [FromQuery] UserQuery query)\n    {\n        var users = await _userService.GetUsersAsync(query);\n\n        var response = new PagedResponse<UserDto>\n        {\n            Status = "success",\n            Data = _mapper.Map<IEnumerable<UserDto>>(users.Items),\n            Meta = new MetaData\n            {\n                Pagination = new PaginationMeta\n                {\n                    Page = users.Page,\n                    PerPage = users.PerPage,\n                    Total = users.Total,\n                    TotalPages = users.TotalPages\n                }\n            },\n            Links = new Dictionary<string, string>\n            {\n                { "self", $"/api/v1/users?page={users.Page}" },\n                { "next", users.HasNext ? $"/api/v1/users?page={users.Page + 1}" : null },\n                { "last", $"/api/v1/users?page={users.TotalPages}" }\n            }.Where(x => x.Value != null).ToDictionary(x => x.Key, x => x.Value),\n            TraceId = HttpContext.TraceIdentifier\n        };\n\n        return Ok(response);\n    }\n\n    [HttpGet("{id}")]\n    [ProducesResponseType(typeof(ApiResponse<UserDto>), 200)]\n    [ProducesResponseType(typeof(ApiResponse<object>), 404)]\n    public async Task<ActionResult<ApiResponse<UserDto>>> GetUser(string id)\n    {\n        var user = await _userService.GetUserByIdAsync(id);\n        if (user == null)\n        {\n            var errorResponse = new ApiResponse<object>\n            {\n                Status = "error",\n                Error = new ErrorInfo\n                {\n                    Code = "USER_NOT_FOUND",\n                    Message = "El usuario no existe",\n                    Details = new List<ErrorDetail>\n                    {\n                        new() { Field = "id", Issue = $"No se encontr\xf3 ning\xfan usuario con el identificador \'{id}\'" }\n                    }\n                },\n                Meta = new MetaData(),\n                TraceId = HttpContext.TraceIdentifier\n            };\n\n            return NotFound(errorResponse);\n        }\n\n        var response = new ApiResponse<UserDto>\n        {\n            Status = "success",\n            Data = _mapper.Map<UserDto>(user),\n            Meta = new MetaData(),\n            TraceId = HttpContext.TraceIdentifier\n        };\n\n        return Ok(response);\n    }\n\n    [HttpPost]\n    [ProducesResponseType(typeof(ApiResponse<UserDto>), 201)]\n    [ProducesResponseType(typeof(ApiResponse<object>), 400)]\n    public async Task<ActionResult<ApiResponse<UserDto>>> CreateUser(\n        [FromBody] CreateUserRequest request)\n    {\n        if (!ModelState.IsValid)\n        {\n            var errorResponse = new ApiResponse<object>\n            {\n                Status = "error",\n                Error = new ErrorInfo\n                {\n                    Code = "VALIDATION_FAILED",\n                    Message = "La solicitud contiene errores de validaci\xf3n",\n                    Details = ModelState.SelectMany(x => x.Value.Errors.Select(e => new ErrorDetail\n                    {\n                        Field = x.Key,\n                        Issue = e.ErrorMessage\n                    })).ToList()\n                },\n                Meta = new MetaData(),\n                TraceId = HttpContext.TraceIdentifier\n            };\n\n            return BadRequest(errorResponse);\n        }\n\n        var user = await _userService.CreateUserAsync(request);\n        var response = new ApiResponse<UserDto>\n        {\n            Status = "success",\n            Data = _mapper.Map<UserDto>(user),\n            Meta = new MetaData(),\n            TraceId = HttpContext.TraceIdentifier\n        };\n\n        return CreatedAtAction(nameof(GetUser),\n            new { id = user.Id }, response);\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"dtos-y-modelos-de-respuesta",children:"DTOs y modelos de respuesta"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public class ApiResponse<T>\n{\n    [JsonPropertyName("status")]\n    public string Status { get; set; } = "success";\n    [JsonPropertyName("data")]\n    public T Data { get; set; } // null en error\n    [JsonPropertyName("errors")]\n    public List<ErrorInfo> Errors { get; set; } = new(); // [] en \xe9xito\n    [JsonPropertyName("meta")]\n    public MetaData Meta { get; set; } = new();\n}\n\npublic class MetaData\n{\n    [JsonPropertyName("trace_id")]\n    public string TraceId { get; set; }\n    [JsonPropertyName("timestamp")]\n    public DateTime Timestamp { get; set; } = DateTime.UtcNow;\n    [JsonPropertyName("tenant")]\n    public string Tenant { get; set; } // opcional\n    [JsonPropertyName("pagination")]\n    public PaginationMeta Pagination { get; set; } // opcional\n    [JsonPropertyName("links")]\n    public Dictionary<string, string> Links { get; set; } // opcional\n    [JsonPropertyName("extra")]\n    public object Extra { get; set; } // extensiones futuras\n}\n\npublic class ErrorInfo\n{\n    [JsonPropertyName("code")]\n    public string Code { get; set; }\n    [JsonPropertyName("message")]\n    public string Message { get; set; }\n    [JsonPropertyName("details")]\n    public List<ErrorDetail> Details { get; set; } = new();\n}\n\npublic class ErrorDetail\n{\n    [JsonPropertyName("field")]\n    public string Field { get; set; }\n    [JsonPropertyName("issue")]\n    public string Issue { get; set; }\n}\n\npublic class PaginationMeta\n{\n    [JsonPropertyName("page")]\n    public int Page { get; set; }\n    [JsonPropertyName("size")]\n    public int Size { get; set; }\n    [JsonPropertyName("total")]\n    public int Total { get; set; }\n    [JsonPropertyName("total_pages")]\n    public int TotalPages { get; set; }\n}\n\npublic class UserDto\n{\n    [JsonPropertyName("id")]\n    public string Id { get; set; }\n    [JsonPropertyName("name")]\n    public string Name { get; set; }\n    [JsonPropertyName("email")]\n    public string Email { get; set; }\n    [JsonPropertyName("active")]\n    public bool Active { get; set; }\n    [JsonPropertyName("created_at")]\n    public DateTime CreatedAt { get; set; }\n}\n\npublic class CreateUserRequest\n{\n    [Required]\n    [StringLength(100, MinimumLength = 2)]\n    [JsonPropertyName("name")]\n    public string Name { get; set; }\n\n    [Required]\n    [EmailAddress]\n    [JsonPropertyName("email")]\n    public string Email { get; set; }\n\n    [Phone]\n    [JsonPropertyName("phone")]\n    public string Phone { get; set; }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"-referencias",children:"\ud83d\udcd6 Referencias"}),"\n",(0,a.jsx)(n.h3,{id:"adrs-relacionados",children:"ADRs relacionados"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/adrs/adr-002-estandard-apis-rest",children:"ADR-002: Est\xe1ndar para APIs REST"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/adrs/adr-017-versionado-apis",children:"ADR-017: Versionado de APIs"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/adrs/adr-008-gateway-apis",children:"ADR-008: Gateway de APIs"})}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"recursos-externos",children:"Recursos externos"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://restfulapi.net/",children:"REST API Design Best Practices"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.iana.org/assignments/http-status-codes/",children:"HTTP Status Code Registry"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsxs)(n.a,{href:"https://jsonapi.org/",children:["JSON",":API"," Specification"]})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);