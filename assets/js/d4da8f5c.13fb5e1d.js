"use strict";(self.webpackChunktlm_doc_architecture=self.webpackChunktlm_doc_architecture||[]).push([[96],{25161:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"servicios-corporativos/api-gateway/conceptos-transversales","title":"8. Conceptos Transversales","description":"8.1 Seguridad","source":"@site/docs/servicios-corporativos/api-gateway/08-conceptos-transversales.md","sourceDirName":"servicios-corporativos/api-gateway","slug":"/servicios-corporativos/api-gateway/conceptos-transversales","permalink":"/tlm-doc-architecture/docs/servicios-corporativos/api-gateway/conceptos-transversales","draft":false,"unlisted":false,"editUrl":"https://github.com/jclemente-tlm/tlm-doc-architecture/edit/main/docs/servicios-corporativos/api-gateway/08-conceptos-transversales.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"7. Vista De Implementaci\xf3n","permalink":"/tlm-doc-architecture/docs/servicios-corporativos/api-gateway/vista-implementacion"},"next":{"title":"9. Decisiones De Arquitectura","permalink":"/tlm-doc-architecture/docs/servicios-corporativos/api-gateway/decisiones-arquitectura"}}');var r=t(74848),a=t(28453);const s={},o="8. Conceptos Transversales",c={},l=[{value:"8.1 Seguridad",id:"81-seguridad",level:2},{value:"8.1.1 Autenticaci\xf3n Y Autorizaci\xf3n",id:"811-autenticaci\xf3n-y-autorizaci\xf3n",level:3},{value:"8.1.2 Cabeceras De Seguridad Y Protecci\xf3n",id:"812-cabeceras-de-seguridad-y-protecci\xf3n",level:3},{value:"8.1.3 Rate Limiting Y Throttling",id:"813-rate-limiting-y-throttling",level:3},{value:"8.2 Observabilidad Y Monitoreo",id:"82-observabilidad-y-monitoreo",level:2},{value:"8.2.1 Logging Estructurado",id:"821-logging-estructurado",level:3},{value:"8.2.2 M\xe9tricas Y Telemetr\xeda",id:"822-m\xe9tricas-y-telemetr\xeda",level:3},{value:"8.2.3 Trazabilidad Distribuida",id:"823-trazabilidad-distribuida",level:3},{value:"8.3 Resiliencia Y Manejo De Errores",id:"83-resiliencia-y-manejo-de-errores",level:2},{value:"8.3.1 Patr\xf3n Circuit Breaker",id:"831-patr\xf3n-circuit-breaker",level:3},{value:"8.3.2 Pol\xedticas De Reintentos",id:"832-pol\xedticas-de-reintentos",level:3},{value:"8.4 Rendimiento Y Caching",id:"84-rendimiento-y-caching",level:2},{value:"8.4.1 Estrategia De Caching Multinivel",id:"841-estrategia-de-caching-multinivel",level:3},{value:"8.4.2 Agrupaci\xf3n De Conexiones Y Reutilizaci\xf3n",id:"842-agrupaci\xf3n-de-conexiones-y-reutilizaci\xf3n",level:3},{value:"8.5 Multi-Tenancy",id:"85-multi-tenancy",level:2},{value:"8.5.1 Resoluci\xf3n De Contexto De Tenant",id:"851-resoluci\xf3n-de-contexto-de-tenant",level:3},{value:"8.5.2 Configuraci\xf3n Espec\xedfica Por Tenant",id:"852-configuraci\xf3n-espec\xedfica-por-tenant",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"8-conceptos-transversales",children:"8. Conceptos Transversales"})}),"\n",(0,r.jsx)(n.h2,{id:"81-seguridad",children:"8.1 Seguridad"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Aspecto"}),(0,r.jsx)(n.th,{children:"Implementaci\xf3n"}),(0,r.jsx)(n.th,{children:"Tecnolog\xeda"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Autenticaci\xf3n"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"JWT validation"})}),(0,r.jsx)(n.td,{children:"OAuth2/OIDC"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Autorizaci\xf3n"}),(0,r.jsx)(n.td,{children:"Claims-based, RBAC"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:".NET 8"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Rate limiting"}),(0,r.jsx)(n.td,{children:"Por IP/Usuario"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Redis"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"CORS"}),(0,r.jsx)(n.td,{children:"Configuraci\xf3n din\xe1mica"}),(0,r.jsx)(n.td,{children:"ASP.NET Core"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Cifrado"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"TLS 1.3"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"HTTPS"})})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"811-autenticaci\xf3n-y-autorizaci\xf3n",children:"8.1.1 Autenticaci\xf3n Y Autorizaci\xf3n"}),"\n",(0,r.jsx)(n.p,{children:"El API Gateway implementa un modelo de seguridad basado en OAuth2/OIDC con JWT tokens para garantizar acceso seguro a todos los servicios corporativos."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'// Configuraci\xf3n de autenticaci\xf3n JWT\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n        .AddJwtBearer(options =>\n        {\n            options.Authority = "https://identity.corporate-services.local";\n            options.RequireHttpsMetadata = true;\n            options.TokenValidationParameters = new TokenValidationParameters\n            {\n                ValidateIssuer = true,\n                ValidateAudience = true,\n                ValidateLifetime = true,\n                ValidateIssuerSigningKey = true,\n                ClockSkew = TimeSpan.FromMinutes(5),\n                RoleClaimType = "roles",\n                NameClaimType = "sub"\n            };\n\n            // Cach\xe9 de validaci\xf3n de tokens\n            options.Events = new JwtBearerEvents\n            {\n                OnTokenValidated = async context =>\n                {\n                    var tokenCache = context.HttpContext.RequestServices\n                        .GetRequiredService<ITokenCache>();\n                    await tokenCache.SetValidTokenAsync(context.SecurityToken as JwtSecurityToken);\n                }\n            };\n        });\n\n    services.AddAuthorization(options =>\n    {\n        options.AddPolicy("RequireValidUser", policy =>\n            policy.RequireAuthenticatedUser()\n                  .RequireClaim("tenant_id"));\n\n        options.AddPolicy("RequireAdminRole", policy =>\n            policy.RequireRole("admin"));\n    });\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"812-cabeceras-de-seguridad-y-protecci\xf3n",children:"8.1.2 Cabeceras De Seguridad Y Protecci\xf3n"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class CabecerasSeguridadMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        // Cabeceras de seguridad est\xe1ndar\n        var response = context.Response;\n\n        response.Headers.Add("X-Content-Type-Options", "nosniff");\n        response.Headers.Add("X-Frame-Options", "DENY");\n        response.Headers.Add("X-XSS-Protection", "1; mode=block");\n        response.Headers.Add("Referrer-Policy", "strict-origin-when-cross-origin");\n        response.Headers.Add("Permissions-Policy",\n            "camera=(), microphone=(), location=(), payment=()");\n\n        // Pol\xedtica de Seguridad de Contenido\n        response.Headers.Add("Content-Security-Policy",\n            "default-src \'self\'; " +\n            "script-src \'self\' \'unsafe-inline\'; " +\n            "style-src \'self\' \'unsafe-inline\'; " +\n            "img-src \'self\' data: https:; " +\n            "connect-src \'self\'; " +\n            "font-src \'self\'; " +\n            "base-uri \'self\'");\n\n        // HSTS para HTTPS\n        if (context.Request.IsHttps)\n        {\n            response.Headers.Add("Strict-Transport-Security",\n                "max-age=31536000; includeSubDomains; preload");\n        }\n\n        await _next(context);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"813-rate-limiting-y-throttling",children:"8.1.3 Rate Limiting Y Throttling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class RateLimitingService : IRateLimitingService\n{\n    private readonly IMemoryCache _cache;\n    private readonly IConfiguration _config;\n\n    public async Task<RateLimitResult> CheckRateLimitAsync(string clientId, string endpoint)\n    {\n        var policy = await GetPolicyForClientAsync(clientId);\n        var key = $"rate_limit:{clientId}:{endpoint}";\n\n        var currentCount = _cache.Get<int>(key);\n\n        if (currentCount >= policy.Limit)\n        {\n            return new RateLimitResult\n            {\n                IsAllowed = false,\n                Limit = policy.Limit,\n                Remaining = 0,\n                ResetTime = GetResetTime(key)\n            };\n        }\n\n        // Incrementar contador\n        var newCount = currentCount + 1;\n        _cache.Set(key, newCount, policy.Window);\n\n        return new RateLimitResult\n        {\n            IsAllowed = true,\n            Limit = policy.Limit,\n            Remaining = policy.Limit - newCount,\n            ResetTime = GetResetTime(key)\n        };\n    }\n\n    private async Task<RateLimitPolicy> GetPolicyForClientAsync(string clientId)\n    {\n        var clientTier = await GetClientTierAsync(clientId);\n\n        return clientTier switch\n        {\n            "premium" => new RateLimitPolicy { Limit = 10000, Window = TimeSpan.FromMinutes(1) },\n            "standard" => new RateLimitPolicy { Limit = 1000, Window = TimeSpan.FromMinutes(1) },\n            "basic" => new RateLimitPolicy { Limit = 100, Window = TimeSpan.FromMinutes(1) },\n            _ => new RateLimitPolicy { Limit = 10, Window = TimeSpan.FromMinutes(1) }\n        };\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"82-observabilidad-y-monitoreo",children:"8.2 Observabilidad Y Monitoreo"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Tipo"}),(0,r.jsx)(n.th,{children:"Herramienta"}),(0,r.jsx)(n.th,{children:"Prop\xf3sito"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Logs"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Serilog"})}),(0,r.jsx)(n.td,{children:"Registro requests/eventos"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"M\xe9tricas"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Prometheus"})}),(0,r.jsx)(n.td,{children:"Monitoreo performance"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Tracing"}),(0,r.jsx)(n.td,{children:"OpenTelemetry, Jaeger"}),(0,r.jsx)(n.td,{children:"Trazabilidad requests"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Health"}),(0,r.jsx)(n.td,{children:"Health Checks"}),(0,r.jsx)(n.td,{children:"Estado gateway"})]})]})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Stack de observabilidad: Grafana (dashboards), ",(0,r.jsx)(n.code,{children:"Prometheus"})," (m\xe9tricas), ",(0,r.jsx)(n.code,{children:"Loki"})," (logs), Jaeger (tracing distribuido)."]}),"\n",(0,r.jsx)(n.li,{children:"Dashboards y alertas preconfiguradas para latencia, errores 5xx, disponibilidad y saturaci\xf3n de recursos."}),"\n",(0,r.jsx)(n.li,{children:"Exporters y anotaciones autom\xe1ticas en los contenedores para scraping de m\xe9tricas y logs estructurados."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"821-logging-estructurado",children:"8.2.1 Logging Estructurado"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'// Configuraci\xf3n de Serilog\npublic static IHostBuilder CreateHostBuilder(string[] args) =>\n    Host.CreateDefaultBuilder(args)\n        .UseSerilog((context, services, configuration) =>\n        {\n            configuration\n                .ReadFrom.Configuration(context.Configuration)\n                .Enrich.FromLogContext()\n                .Enrich.WithProperty("ServiceName", "api-gateway")\n                .Enrich.WithProperty("Version", Assembly.GetExecutingAssembly().GetName().Version)\n                .Enrich.WithCorrelationId()\n                .WriteTo.Console(new JsonFormatter())\n                .WriteTo.Elasticsearch(new ElasticsearchSinkOptions(new Uri("http://elasticsearch:9200"))\n                {\n                    IndexFormat = "api-gateway-{0:yyyy.MM.dd}",\n                    AutoRegisterTemplate = true\n                });\n        });\n\n// Middleware de correlaci\xf3n\npublic class CorrelationMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger<CorrelationMiddleware> _logger;\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        var correlationId = GetOrCreateCorrelationId(context);\n\n        using (LogContext.PushProperty("CorrelationId", correlationId))\n        {\n            context.Response.Headers.Add("X-Correlation-ID", correlationId);\n\n            _logger.LogInformation("Request started: {Method} {Path}",\n                context.Request.Method, context.Request.Path);\n\n            await _next(context);\n\n            _logger.LogInformation("Request completed: {Method} {Path} -> {StatusCode}",\n                context.Request.Method, context.Request.Path, context.Response.StatusCode);\n        }\n    }\n\n    private string GetOrCreateCorrelationId(HttpContext context)\n    {\n        return context.Request.Headers["X-Correlation-ID"].FirstOrDefault()\n            ?? context.TraceIdentifier\n            ?? Guid.NewGuid().ToString();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"822-m\xe9tricas-y-telemetr\xeda",children:"8.2.2 M\xe9tricas Y Telemetr\xeda"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class MetricsMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly IMetrics _metrics;\n    private readonly Counter<long> _requestCounter;\n    private readonly Histogram<double> _requestDuration;\n\n    public MetricsMiddleware(RequestDelegate next, IMetrics metrics)\n    {\n        _next = next;\n        _metrics = metrics;\n\n        _requestCounter = _metrics.CreateCounter<long>(\n            "api_gateway_requests_total",\n            "Total number of HTTP requests");\n\n        _requestDuration = _metrics.CreateHistogram<double>(\n            "api_gateway_request_duration_seconds",\n            "Duration of HTTP requests");\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        var stopwatch = Stopwatch.StartNew();\n        var tags = new TagList\n        {\n            ["method"] = context.Request.Method,\n            ["endpoint"] = GetEndpointName(context),\n            ["tenant_id"] = context.Items["TenantId"]?.ToString() ?? "unknown"\n        };\n\n        try\n        {\n            await _next(context);\n\n            tags["status_code"] = context.Response.StatusCode.ToString();\n            tags["status_class"] = GetStatusClass(context.Response.StatusCode);\n        }\n        catch (Exception ex)\n        {\n            tags["status_code"] = "500";\n            tags["status_class"] = "5xx";\n            tags["exception_type"] = ex.GetType().Name;\n            throw;\n        }\n        finally\n        {\n            stopwatch.Stop();\n\n            _requestCounter.Add(1, tags);\n            _requestDuration.Record(stopwatch.Elapsed.TotalSeconds, tags);\n        }\n    }\n\n    private static string GetStatusClass(int statusCode) =>\n        statusCode switch\n        {\n            >= 200 and < 300 => "2xx",\n            >= 300 and < 400 => "3xx",\n            >= 400 and < 500 => "4xx",\n            >= 500 => "5xx",\n            _ => "unknown"\n        };\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"823-trazabilidad-distribuida",children:"8.2.3 Trazabilidad Distribuida"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public void ConfigureServices(IServiceCollection services)\n{\n    services.AddOpenTelemetry()\n        .WithTracing(builder =>\n        {\n            builder\n                .SetSampler(new AlwaysOnSampler())\n                .AddAspNetCoreInstrumentation(options =>\n                {\n                    options.RecordException = true;\n                    options.EnableGrpcAspNetCoreSupport = true;\n                    options.Filter = (httpContext) =>\n                    {\n                        // No tracing para health checks\n                        return !httpContext.Request.Path.StartsWithSegments("/health");\n                    };\n                })\n                .AddHttpClientInstrumentation()\n                .AddJaegerExporter()\n                .AddConsoleExporter();\n        });\n}\n\n// Enriquecimiento de spans\npublic class TracingEnrichmentMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        using var activity = Activity.Current;\n\n        if (activity != null)\n        {\n            // Agregar informaci\xf3n de contexto al span\n            activity.SetTag("http.method", context.Request.Method);\n            activity.SetTag("http.url", context.Request.GetDisplayUrl());\n            activity.SetTag("user.id", context.User.FindFirst("sub")?.Value);\n            activity.SetTag("tenant.id", context.Items["TenantId"]?.ToString());\n            activity.SetTag("client.id", GetClientId(context));\n\n            if (context.Request.Headers.ContainsKey("User-Agent"))\n            {\n                activity.SetTag("http.user_agent", context.Request.Headers["User-Agent"].ToString());\n            }\n        }\n\n        await _next(context);\n\n        if (activity != null)\n        {\n            activity.SetTag("http.status_code", context.Response.StatusCode);\n\n            if (context.Response.StatusCode >= 400)\n            {\n                activity.SetStatus(ActivityStatusCode.Error, $"HTTP {context.Response.StatusCode}");\n            }\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"83-resiliencia-y-manejo-de-errores",children:"8.3 Resiliencia Y Manejo De Errores"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Patr\xf3n"}),(0,r.jsx)(n.th,{children:"Implementaci\xf3n"}),(0,r.jsx)(n.th,{children:"Prop\xf3sito"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Circuit Breaker"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Polly"})}),(0,r.jsx)(n.td,{children:"Protecci\xf3n fallos"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Retry"}),(0,r.jsx)(n.td,{children:"Pol\xedticas exponenciales"}),(0,r.jsx)(n.td,{children:"Recuperaci\xf3n autom\xe1tica"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Timeout"}),(0,r.jsx)(n.td,{children:"Por endpoint"}),(0,r.jsx)(n.td,{children:"Prevenci\xf3n bloqueos"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"831-patr\xf3n-circuit-breaker",children:"8.3.1 Patr\xf3n Circuit Breaker"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class CircuitBreakerService : ICircuitBreakerService\n{\n    private readonly ConcurrentDictionary<string, CircuitBreakerState> _circuitBreakers;\n    private readonly ILogger<CircuitBreakerService> _logger;\n\n    public async Task<T> ExecuteAsync<T>(string key, Func<Task<T>> operation, CircuitBreakerOptions options)\n    {\n        var circuitBreaker = _circuitBreakers.GetOrAdd(key, _ => new CircuitBreakerState(options));\n\n        if (circuitBreaker.State == CircuitState.Open)\n        {\n            if (DateTime.UtcNow < circuitBreaker.NextAttempt)\n            {\n                throw new CircuitBreakerOpenException($"Circuit breaker {key} is open");\n            }\n\n            // Half-open: intentar una operaci\xf3n\n            circuitBreaker.State = CircuitState.HalfOpen;\n        }\n\n        try\n        {\n            var result = await operation();\n\n            // \xc9xito: reset del circuit breaker\n            circuitBreaker.Reset();\n            return result;\n        }\n        catch (Exception ex)\n        {\n            circuitBreaker.RecordFailure();\n\n            if (circuitBreaker.ShouldOpen())\n            {\n                circuitBreaker.Open();\n                _logger.LogWarning("Circuit breaker {Key} opened due to failures", key);\n            }\n\n            throw;\n        }\n    }\n}\n\npublic class CircuitBreakerState\n{\n    public CircuitState State { get; set; } = CircuitState.Closed;\n    public int FailureCount { get; private set; }\n    public DateTime NextAttempt { get; private set; }\n    private readonly CircuitBreakerOptions _options;\n\n    public void RecordFailure()\n    {\n        FailureCount++;\n    }\n\n    public bool ShouldOpen()\n    {\n        return FailureCount >= _options.FailureThreshold;\n    }\n\n    public void Open()\n    {\n        State = CircuitState.Open;\n        NextAttempt = DateTime.UtcNow.Add(_options.OpenDuration);\n    }\n\n    public void Reset()\n    {\n        State = CircuitState.Closed;\n        FailureCount = 0;\n        NextAttempt = DateTime.MinValue;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"832-pol\xedticas-de-reintentos",children:"8.3.2 Pol\xedticas De Reintentos"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class RetryPolicyService\n{\n    public static IAsyncPolicy<HttpResponseMessage> GetRetryPolicy()\n    {\n        return Policy\n            .Handle<HttpRequestException>()\n            .Or<TaskCanceledException>()\n            .OrResult<HttpResponseMessage>(r => !r.IsSuccessStatusCode && IsRetriableStatusCode(r.StatusCode))\n            .WaitAndRetryAsync(\n                retryCount: 3,\n                sleepDurationProvider: retryAttempt => TimeSpan.FromSeconds(Math.Pow(2, retryAttempt)) +\n                    TimeSpan.FromMilliseconds(Random.Shared.Next(0, 1000)), // Jitter\n                onRetry: (outcome, timespan, retryCount, context) =>\n                {\n                    var logger = context.GetLogger();\n                    logger?.LogWarning("Retry attempt {RetryCount} for {OperationKey} in {Delay}ms",\n                        retryCount, context.OperationKey, timespan.TotalMilliseconds);\n                });\n    }\n\n    private static bool IsRetriableStatusCode(HttpStatusCode statusCode)\n    {\n        return statusCode switch\n        {\n            HttpStatusCode.InternalServerError => true,\n            HttpStatusCode.BadGateway => true,\n            HttpStatusCode.ServiceUnavailable => true,\n            HttpStatusCode.GatewayTimeout => true,\n            HttpStatusCode.TooManyRequests => true,\n            _ => false\n        };\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"84-rendimiento-y-caching",children:"8.4 Rendimiento Y Caching"}),"\n",(0,r.jsx)(n.h3,{id:"841-estrategia-de-caching-multinivel",children:"8.4.1 Estrategia De Caching Multinivel"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class MultiLevelCacheService : ICacheService\n{\n    private readonly IMemoryCache _l1Cache;  // Nivel 1: In-memory\n    private readonly IDistributedCache _l2Cache;  // Nivel 2: Redis\n    private readonly ILogger<MultiLevelCacheService> _logger;\n\n    public async Task<T> GetAsync<T>(string key, Func<Task<T>> valueFactory, TimeSpan expiration)\n    {\n        // L1 Cache check\n        if (_l1Cache.TryGetValue(key, out T cachedValue))\n        {\n            _logger.LogDebug("Cache hit (L1): {Key}", key);\n            return cachedValue;\n        }\n\n        // L2 Cache check\n        var serializedValue = await _l2Cache.GetStringAsync(key);\n        if (serializedValue != null)\n        {\n            var deserializedValue = JsonSerializer.Deserialize<T>(serializedValue);\n\n            // Populate L1 cache\n            _l1Cache.Set(key, deserializedValue, TimeSpan.FromMinutes(2));\n\n            _logger.LogDebug("Cache hit (L2): {Key}", key);\n            return deserializedValue;\n        }\n\n        // Cache miss: execute value factory\n        _logger.LogDebug("Cache miss: {Key}", key);\n        var value = await valueFactory();\n\n        // Store in both caches\n        await SetAsync(key, value, expiration);\n\n        return value;\n    }\n\n    public async Task SetAsync<T>(string key, T value, TimeSpan expiration)\n    {\n        // Set in L1 cache (shorter TTL)\n        _l1Cache.Set(key, value, TimeSpan.FromMinutes(Math.Min(2, expiration.TotalMinutes)));\n\n        // Set in L2 cache (full TTL)\n        var serializedValue = JsonSerializer.Serialize(value);\n        await _l2Cache.SetStringAsync(key, serializedValue, new DistributedCacheEntryOptions\n        {\n            AbsoluteExpirationRelativeToNow = expiration\n        });\n    }\n\n    public async Task RemoveAsync(string key)\n    {\n        _l1Cache.Remove(key);\n        await _l2Cache.RemoveAsync(key);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"842-agrupaci\xf3n-de-conexiones-y-reutilizaci\xf3n",children:"8.4.2 Agrupaci\xf3n De Conexiones Y Reutilizaci\xf3n"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class HttpClientService\n{\n    private readonly IHttpClientFactory _httpClientFactory;\n    private readonly IOptions<HttpClientOptions> _options;\n\n    public HttpClient CreateClient(string serviceName)\n    {\n        return _httpClientFactory.CreateClient(serviceName);\n    }\n}\n\n// Startup configuration\npublic void ConfigureServices(IServiceCollection services)\n{\n    // HTTP client con pooling y circuit breaker\n    services.AddHttpClient("identity-service", client =>\n    {\n        client.BaseAddress = new Uri("http://identity-service:8080");\n        client.Timeout = TimeSpan.FromSeconds(30);\n        client.DefaultRequestHeaders.Add("User-Agent", "ApiGateway/1.0");\n    })\n    .AddPolicyHandler(GetRetryPolicy())\n    .AddPolicyHandler(GetCircuitBreakerPolicy())\n    .ConfigurePrimaryHttpMessageHandler(() => new HttpClientHandler\n    {\n        MaxConnectionsPerServer = 20,\n        PooledConnectionLifetime = TimeSpan.FromMinutes(2)\n    });\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"85-multi-tenancy",children:"8.5 Multi-Tenancy"}),"\n",(0,r.jsx)(n.h3,{id:"851-resoluci\xf3n-de-contexto-de-tenant",children:"8.5.1 Resoluci\xf3n De Contexto De Tenant"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class TenantContextMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ITenantResolver _tenantResolver;\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        var tenantId = ExtractTenantId(context);\n        if (!string.IsNullOrEmpty(tenantId))\n        {\n            var tenant = await _tenantResolver.ResolveTenantAsync(tenantId);\n            if (tenant != null)\n            {\n                context.Items["Tenant"] = tenant;\n                context.Items["TenantId"] = tenantId;\n                context.Request.Headers.Add("X-Tenant-ID", tenantId);\n                context.Request.Headers.Add("X-Tenant-Region", tenant.Region);\n                context.Request.Headers.Add("X-Tenant-Tier", tenant.Tier);\n            }\n        }\n        await _next(context);\n    }\n\n    private string ExtractTenantId(HttpContext context)\n    {\n        var tenantFromJwt = context.User?.FindFirst("tenant_id")?.Value;\n        if (!string.IsNullOrEmpty(tenantFromJwt))\n            return tenantFromJwt;\n        var tenantFromHeader = context.Request.Headers["X-Tenant-ID"].FirstOrDefault();\n        if (!string.IsNullOrEmpty(tenantFromHeader))\n            return tenantFromHeader;\n        var host = context.Request.Host.Host;\n        if (host.Contains(\'.\'))\n        {\n            var parts = host.Split(\'.\');\n            if (parts.Length >= 3 && parts[1] == "api")\n                return parts[0];\n        }\n        return null;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"852-configuraci\xf3n-espec\xedfica-por-tenant",children:"8.5.2 Configuraci\xf3n Espec\xedfica Por Tenant"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class TenantConfigurationService : ITenantConfigurationService\n{\n    private readonly ICacheService _cache;\n    private readonly ITenantRepository _tenantRepository;\n\n    public async Task<TenantConfiguration> GetConfigurationAsync(string tenantId)\n    {\n        var cacheKey = $"tenant_config:{tenantId}";\n        return await _cache.GetAsync(cacheKey, async () =>\n        {\n            var tenant = await _tenantRepository.GetByIdAsync(tenantId);\n            return new TenantConfiguration\n            {\n                TenantId = tenantId,\n                Name = tenant.Name,\n                Region = tenant.Region,\n                Tier = tenant.Tier,\n                Features = tenant.Features,\n                RateLimits = tenant.RateLimits,\n                CustomHeaders = tenant.CustomHeaders,\n                RoutingRules = tenant.RoutingRules\n            };\n        }, TimeSpan.FromMinutes(5));\n    }\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(96540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);