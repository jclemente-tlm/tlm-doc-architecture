"use strict";(self.webpackChunktlm_doc_architecture=self.webpackChunktlm_doc_architecture||[]).push([[9243],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(96540);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},76515:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"servicios-corporativos/servicio-mensajeria-sita/vista-implementacion","title":"7. Vista de implementaci\xf3n","description":"7.1 Estructura del proyecto","source":"@site/docs/servicios-corporativos/servicio-mensajeria-sita/07-vista-implementacion.md","sourceDirName":"servicios-corporativos/servicio-mensajeria-sita","slug":"/servicios-corporativos/servicio-mensajeria-sita/vista-implementacion","permalink":"/tlm-doc-architecture/docs/servicios-corporativos/servicio-mensajeria-sita/vista-implementacion","draft":false,"unlisted":false,"editUrl":"https://github.com/jclemente-tlm/tlm-doc-architecture/edit/main/docs/servicios-corporativos/servicio-mensajeria-sita/07-vista-implementacion.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"6. Vista de tiempo de ejecuci\xf3n","permalink":"/tlm-doc-architecture/docs/servicios-corporativos/servicio-mensajeria-sita/vista-tiempo-ejecucion"},"next":{"title":"8. Conceptos transversales","permalink":"/tlm-doc-architecture/docs/servicios-corporativos/servicio-mensajeria-sita/conceptos-transversales"}}');var a=t(74848),s=t(28453);const r={},o="7. Vista de implementaci\xf3n",c={},l=[{value:"7.1 Estructura del proyecto",id:"71-estructura-del-proyecto",level:2},{value:"7.2 Dependencias principales",id:"72-dependencias-principales",level:2},{value:"7.1 Estructura del sistema",id:"71-estructura-del-sistema",level:2},{value:"7.1.1 Organizaci\xf3n de c\xf3digo",id:"711-organizaci\xf3n-de-c\xf3digo",level:3},{value:"7.1.2 SITA Protocol Implementation",id:"712-sita-protocol-implementation",level:3},{value:"7.2 Configuraci\xf3n de despliegue",id:"72-configuraci\xf3n-de-despliegue",level:2},{value:"7.2.1 Docker Configuration",id:"721-docker-configuration",level:3},{value:"7.2.2 Kubernetes Deployment",id:"722-kubernetes-deployment",level:3},{value:"7.2.3 Terraform Infrastructure",id:"723-terraform-infrastructure",level:3},{value:"7.3 Configuraci\xf3n espec\xedfica SITA",id:"73-configuraci\xf3n-espec\xedfica-sita",level:2},{value:"7.3.1 Application Configuration",id:"731-application-configuration",level:3},{value:"7.3.2 SITA Certificate Management",id:"732-sita-certificate-management",level:3},{value:"7.4 Patrones de implementaci\xf3n",id:"74-patrones-de-implementaci\xf3n",level:2},{value:"7.4.1 Message Handler Factory",id:"741-message-handler-factory",level:3},{value:"7.4.2 Connection Pool Implementation",id:"742-connection-pool-implementation",level:3},{value:"7.5 Testing Strategy",id:"75-testing-strategy",level:2},{value:"7.5.1 Contract Testing con SITA",id:"751-contract-testing-con-sita",level:3},{value:"7.5.2 Load Testing",id:"752-load-testing",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"7-vista-de-implementaci\xf3n",children:"7. Vista de implementaci\xf3n"})}),"\n",(0,a.jsx)(n.h2,{id:"71-estructura-del-proyecto",children:"7.1 Estructura del proyecto"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Componente"}),(0,a.jsx)(n.th,{children:"Ubicaci\xf3n"}),(0,a.jsx)(n.th,{children:"Tecnolog\xeda"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Event Processor"})}),(0,a.jsx)(n.td,{children:"/src/SitaEventProcessor"}),(0,a.jsx)(n.td,{children:".NET 8 Worker"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Sender"})}),(0,a.jsx)(n.td,{children:"/src/SitaSender"}),(0,a.jsx)(n.td,{children:".NET 8 Worker"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"PostgreSQL"})}),(0,a.jsx)(n.td,{children:"AWS RDS"}),(0,a.jsx)(n.td,{children:"PostgreSQL 15+"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"File Storage"})}),(0,a.jsx)(n.td,{children:"AWS EFS"}),(0,a.jsx)(n.td,{children:"Sistema archivos"})]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"72-dependencias-principales",children:"7.2 Dependencias principales"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Dependencia"}),(0,a.jsx)(n.th,{children:"Versi\xf3n"}),(0,a.jsx)(n.th,{children:"Prop\xf3sito"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Entity Framework"})}),(0,a.jsx)(n.td,{children:"8.0+"}),(0,a.jsx)(n.td,{children:"ORM"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"RazorEngine"})}),(0,a.jsx)(n.td,{children:"4.0+"}),(0,a.jsx)(n.td,{children:"Plantillas SITA"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Serilog"})}),(0,a.jsx)(n.td,{children:"3.0+"}),(0,a.jsx)(n.td,{children:"Logging"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Polly"})}),(0,a.jsx)(n.td,{children:"7.0+"}),(0,a.jsx)(n.td,{children:"Resiliencia"})]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"71-estructura-del-sistema",children:"7.1 Estructura del sistema"}),"\n",(0,a.jsx)(n.h3,{id:"711-organizaci\xf3n-de-c\xf3digo",children:"7.1.1 Organizaci\xf3n de c\xf3digo"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"src/\n\u251c\u2500\u2500 TLM.Services.SitaMessaging.API/           # REST API Layer\n\u2502   \u251c\u2500\u2500 Controllers/                          # API Controllers\n\u2502   \u251c\u2500\u2500 Middleware/                           # HTTP Middleware\n\u2502   \u251c\u2500\u2500 Configuration/                        # DI & Startup Config\n\u2502   \u2514\u2500\u2500 Program.cs                           # Application Entry\n\u251c\u2500\u2500 TLM.Services.SitaMessaging.Application/   # Application Layer\n\u2502   \u251c\u2500\u2500 Commands/                            # CQRS Commands\n\u2502   \u251c\u2500\u2500 Queries/                             # CQRS Queries\n\u2502   \u251c\u2500\u2500 Handlers/                            # Command/Query Handlers\n\u2502   \u251c\u2500\u2500 Services/                            # Application Services\n\u2502   \u251c\u2500\u2500 Validators/                          # FluentValidation\n\u2502   \u2514\u2500\u2500 DTOs/                                # Data Transfer Objects\n\u251c\u2500\u2500 TLM.Services.SitaMessaging.Domain/        # Domain Layer\n\u2502   \u251c\u2500\u2500 Entities/                            # Domain Entities\n\u2502   \u251c\u2500\u2500 ValueObjects/                        # Value Objects\n\u2502   \u251c\u2500\u2500 Services/                            # Domain Services\n\u2502   \u251c\u2500\u2500 Repositories/                        # Repository Interfaces\n\u2502   \u2514\u2500\u2500 Events/                              # Domain Events\n\u251c\u2500\u2500 TLM.Services.SitaMessaging.Infrastructure/ # Infrastructure Layer\n\u2502   \u251c\u2500\u2500 Persistence/                         # Database Implementation\n\u2502   \u251c\u2500\u2500 SITA/                                # SITA Protocol Adapter\n\u2502   \u251c\u2500\u2500 Messaging/                           # Kafka Integration\n\u2502   \u251c\u2500\u2500 Authentication/                      # OAuth2/JWT\n\u2502   \u2514\u2500\u2500 Monitoring/                          # Telemetry & Metrics\n\u2514\u2500\u2500 TLM.Services.SitaMessaging.Tests/         # Test Projects\n    \u251c\u2500\u2500 Unit/                                # Unit Tests\n    \u251c\u2500\u2500 Integration/                         # Integration Tests\n    \u2514\u2500\u2500 Contract/                            # Contract Tests with SITA\n"})}),"\n",(0,a.jsx)(n.h3,{id:"712-sita-protocol-implementation",children:"7.1.2 SITA Protocol Implementation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"// Core SITA protocol abstraction\npublic interface ISitaProtocolAdapter\n{\n    Task<SitaConnection> EstablishConnectionAsync(SitaEndpoint endpoint);\n    Task<SendResult> SendMessageAsync(SitaMessage message);\n    Task<ReceiveResult> ReceiveMessagesAsync(CancellationToken cancellationToken);\n    Task DisconnectAsync(SitaConnection connection);\n}\n\n// Type B protocol implementation\npublic class SitaTypeBAdapter : ISitaProtocolAdapter\n{\n    private readonly ISitaConnectionPool _connectionPool;\n    private readonly ISitaMessageFormatter _formatter;\n\n    public async Task<SendResult> SendMessageAsync(SitaMessage message)\n    {\n        using var connection = await _connectionPool.AcquireAsync();\n\n        // Format message according to SITA Type B specifications\n        var formattedMessage = await _formatter.FormatAsync(message);\n\n        // Send with acknowledgment handling\n        var response = await connection.SendWithAckAsync(formattedMessage);\n\n        return new SendResult\n        {\n            MessageId = message.Id,\n            Status = response.IsAcknowledged ? SendStatus.Sent : SendStatus.Failed,\n            AckCode = response.AcknowledgmentCode,\n            Timestamp = response.Timestamp\n        };\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"72-configuraci\xf3n-de-despliegue",children:"7.2 Configuraci\xf3n de despliegue"}),"\n",(0,a.jsx)(n.h3,{id:"721-docker-configuration",children:"7.2.1 Docker Configuration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dockerfile",children:'FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build\nWORKDIR /src\n\n# Copy and restore\nCOPY ["src/TLM.Services.SitaMessaging.API/", "SitaMessaging.API/"]\nCOPY ["src/TLM.Services.SitaMessaging.Application/", "SitaMessaging.Application/"]\nCOPY ["src/TLM.Services.SitaMessaging.Domain/", "SitaMessaging.Domain/"]\nCOPY ["src/TLM.Services.SitaMessaging.Infrastructure/", "SitaMessaging.Infrastructure/"]\n\nRUN dotnet restore "SitaMessaging.API/TLM.Services.SitaMessaging.API.csproj"\n\n# Build\nRUN dotnet build "SitaMessaging.API/TLM.Services.SitaMessaging.API.csproj" -c Release\n\n# Publish\nFROM build AS publish\nRUN dotnet publish "SitaMessaging.API/TLM.Services.SitaMessaging.API.csproj" -c Release -o /app/publish\n\n# Runtime\nFROM mcr.microsoft.com/dotnet/aspnet:8.0 AS runtime\nWORKDIR /app\n\n# SITA protocol requirements\nRUN apt-get update && apt-get install -y \\\n    telnet \\\n    netcat-openbsd \\\n    iputils-ping \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Security\nRUN adduser --disabled-password --home /app --gecos \'\' appuser && chown -R appuser /app\nUSER appuser\n\nCOPY --from=publish /app/publish .\nEXPOSE 8080\n\n# Health check with SITA connectivity\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:8080/health || exit 1\n\nENTRYPOINT ["dotnet", "TLM.Services.SitaMessaging.API.dll"]\n'})}),"\n",(0,a.jsx)(n.h3,{id:"722-kubernetes-deployment",children:"7.2.2 Kubernetes Deployment"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sita-messaging-api\n  namespace: corporate-services\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: sita-messaging-api\n  template:\n    metadata:\n      labels:\n        app: sita-messaging-api\n    spec:\n      containers:\n      - name: api\n        image: tlm/sita-messaging-api:latest\n        ports:\n        - containerPort: 8080\n        env:\n        - name: ASPNETCORE_ENVIRONMENT\n          value: "Production"\n        - name: ConnectionStrings__Database\n          valueFrom:\n            secretKeyRef:\n              name: db-secrets\n              key: sita-messaging-connection\n        - name: SITA__Endpoints__Primary\n          valueFrom:\n            configMapKeyRef:\n              name: sita-config\n              key: primary-endpoint\n        - name: SITA__Authentication__Certificate\n          valueFrom:\n            secretKeyRef:\n              name: sita-certs\n              key: client-certificate\n        resources:\n          requests:\n            memory: "512Mi"\n            cpu: "500m"\n          limits:\n            memory: "1Gi"\n            cpu: "1000m"\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8080\n          initialDelaySeconds: 30\n          periodSeconds: 15\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8080\n          initialDelaySeconds: 10\n          periodSeconds: 5\n        # SITA network access requirements\n        securityContext:\n          capabilities:\n            add: ["NET_RAW", "NET_ADMIN"]\n'})}),"\n",(0,a.jsx)(n.h3,{id:"723-terraform-infrastructure",children:"7.2.3 Terraform Infrastructure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-hcl",children:'# ECS Cluster for SITA Messaging\nresource "aws_ecs_cluster" "sita_messaging" {\n  name = "corporate-services-sita-messaging"\n\n  setting {\n    name  = "containerInsights"\n    value = "enabled"\n  }\n}\n\n# Task definition with SITA-specific networking\nresource "aws_ecs_task_definition" "sita_messaging_api" {\n  family                   = "sita-messaging-api"\n  network_mode            = "awsvpc"\n  requires_compatibilities = ["FARGATE"]\n  cpu                     = 1024\n  memory                  = 2048\n\n  container_definitions = jsonencode([\n    {\n      name  = "sita-messaging-api"\n      image = "tlm/sita-messaging-api:latest"\n\n      # SITA network configuration\n      portMappings = [\n        {\n          containerPort = 8080\n          protocol      = "tcp"\n        },\n        {\n          containerPort = 9999  # SITA protocol port\n          protocol      = "tcp"\n        }\n      ]\n\n      environment = [\n        {\n          name  = "ASPNETCORE_ENVIRONMENT"\n          value = "Production"\n        }\n      ]\n\n      secrets = [\n        {\n          name      = "ConnectionStrings__Database"\n          valueFrom = aws_secretsmanager_secret.db_connection.arn\n        },\n        {\n          name      = "SITA__Authentication__Certificate"\n          valueFrom = aws_secretsmanager_secret.sita_certificate.arn\n        }\n      ]\n\n      logConfiguration = {\n        logDriver = "awslogs"\n        options = {\n          "awslogs-group"         = aws_cloudwatch_log_group.sita_messaging.name\n          "awslogs-region"        = var.aws_region\n          "awslogs-stream-prefix" = "ecs"\n        }\n      }\n    }\n  ])\n}\n\n# Database cluster for SITA message storage\nresource "aws_rds_cluster" "sita_messaging_db" {\n  cluster_identifier     = "sita-messaging-cluster"\n  engine                = "aurora-postgresql"\n  engine_version        = "13.7"\n  database_name         = "sita_messaging"\n  master_username       = "sita_user"\n  manage_master_user_password = true\n\n  # High disponibilidad for critical SITA operations\n  availability_zones = ["us-west-2a", "us-west-2b", "us-west-2c"]\n\n  backup_retention_period = 14\n  preferred_backup_window = "03:00-04:00"\n\n  storage_encrypted = true\n  kms_key_id       = aws_kms_key.sita_messaging.arn\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"73-configuraci\xf3n-espec\xedfica-sita",children:"7.3 Configuraci\xf3n espec\xedfica SITA"}),"\n",(0,a.jsx)(n.h3,{id:"731-application-configuration",children:"7.3.1 Application Configuration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "SITA": {\n    "Endpoints": {\n      "Primary": {\n        "Host": "sita-primary.example.com",\n        "Port": 9999,\n        "Protocol": "TypeB",\n        "Timeout": "00:00:30"\n      },\n      "Secondary": {\n        "Host": "sita-secondary.example.com",\n        "Port": 9999,\n        "Protocol": "TypeB",\n        "Timeout": "00:00:30"\n      }\n    },\n    "Authentication": {\n      "CertificatePath": "/app/certs/sita-client.p12",\n      "CertificatePassword": "${SITA_CERT_PASSWORD}",\n      "UserId": "${SITA_USER_ID}",\n      "AddressCode": "${SITA_ADDRESS_CODE}"\n    },\n    "MessageTypes": {\n      "FPL": {\n        "MaxLength": 2048,\n        "RequiredFields": ["Aircraft", "Departure", "Destination"],\n        "ValidationRules": "ICAO_FPL"\n      },\n      "MVT": {\n        "MaxLength": 1024,\n        "RequiredFields": ["Flight", "Registration", "Movement"],\n        "ValidationRules": "IATA_MVT"\n      }\n    },\n    "Retry": {\n      "MaxAttempts": 3,\n      "DelayPattern": "Exponential",\n      "BaseDelay": "00:00:02"\n    }\n  },\n  "MessageStorage": {\n    "ConnectionString": "Host=sita-db;Database=sita_messaging;Username=sita_user;Password=${DB_PASSWORD}",\n    "RetentionPolicyDays": 2555, // 7 years for aviation compliance\n    "PartitionStrategy": "Monthly",\n    "CompressionEnabled": true\n  },\n  "Monitoring": {\n    "SITA": {\n      "ConnectionHealthCheck": "00:00:30",\n      "MessageSuccessRate": true,\n      "LatencyTracking": true\n    }\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"732-sita-certificate-management",children:"7.3.2 SITA Certificate Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public class SitaCertificateManager : ICertificateManager\n{\n    private readonly IOptions<SitaOptions> _options;\n    private readonly ILogger<SitaCertificateManager> _logger;\n\n    public async Task<X509Certificate2> GetClientCertificateAsync()\n    {\n        var certificatePath = _options.Value.Authentication.CertificatePath;\n        var password = _options.Value.Authentication.CertificatePassword;\n\n        if (!File.Exists(certificatePath))\n        {\n            _logger.LogError("SITA client certificate not found at {Path}", certificatePath);\n            throw new FileNotFoundException($"SITA certificate not found: {certificatePath}");\n        }\n\n        var certificate = new X509Certificate2(certificatePath, password);\n\n        // Validate certificate expiration\n        if (certificate.NotAfter < DateTime.UtcNow.AddDays(30))\n        {\n            _logger.LogWarning("SITA certificate expires soon: {ExpiryDate}", certificate.NotAfter);\n            // Trigger certificate renewal process\n            await _certificateRenewalService.RequestRenewalAsync(certificate);\n        }\n\n        return certificate;\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"74-patrones-de-implementaci\xf3n",children:"7.4 Patrones de implementaci\xf3n"}),"\n",(0,a.jsx)(n.h3,{id:"741-message-handler-factory",children:"7.4.1 Message Handler Factory"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public class SitaMessageHandlerFactory : IMessageHandlerFactory\n{\n    private readonly IServiceProvider _serviceProvider;\n    private readonly Dictionary<string, Type> _handlerTypes;\n\n    public SitaMessageHandlerFactory(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n        _handlerTypes = new Dictionary<string, Type>\n        {\n            ["FPL"] = typeof(FlightPlanHandler),\n            ["MVT"] = typeof(MovementHandler),\n            ["DLA"] = typeof(DelayHandler),\n            ["DEP"] = typeof(DepartureHandler),\n            ["ARR"] = typeof(ArrivalHandler)\n        };\n    }\n\n    public ISitaMessageHandler CreateHandler(string messageType)\n    {\n        if (!_handlerTypes.TryGetValue(messageType, out var handlerType))\n        {\n            throw new UnsupportedMessageTypeException($"No handler for message type: {messageType}");\n        }\n\n        return (ISitaMessageHandler)_serviceProvider.GetRequiredService(handlerType);\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"742-connection-pool-implementation",children:"7.4.2 Connection Pool Implementation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public class SitaConnectionPool : ISitaConnectionPool, IDisposable\n{\n    private readonly ConcurrentQueue<ISitaConnection> _availableConnections = new();\n    private readonly ConcurrentDictionary<string, ISitaConnection> _activeConnections = new();\n    private readonly SemaphoreSlim _semaphore;\n    private readonly ILogger<SitaConnectionPool> _logger;\n\n    public SitaConnectionPool(IOptions<SitaOptions> options, ILogger<SitaConnectionPool> logger)\n    {\n        _logger = logger;\n        var maxConnections = options.Value.MaxConnections;\n        _semaphore = new SemaphoreSlim(maxConnections, maxConnections);\n\n        // Pre-create connection pool\n        _ = Task.Run(InitializePoolAsync);\n    }\n\n    public async Task<ISitaConnection> AcquireAsync()\n    {\n        await _semaphore.WaitAsync();\n\n        if (_availableConnections.TryDequeue(out var connection) && connection.IsConnected)\n        {\n            _activeConnections.TryAdd(connection.Id, connection);\n            return connection;\n        }\n\n        // Create new connection if pool is empty\n        connection = await CreateConnectionAsync();\n        _activeConnections.TryAdd(connection.Id, connection);\n        return connection;\n    }\n\n    public async Task ReleaseAsync(ISitaConnection connection)\n    {\n        _activeConnections.TryRemove(connection.Id, out _);\n\n        if (connection.IsConnected && !connection.HasErrors)\n        {\n            _availableConnections.Enqueue(connection);\n        }\n        else\n        {\n            await connection.DisposeAsync();\n        }\n\n        _semaphore.Release();\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"75-testing-strategy",children:"7.5 Testing Strategy"}),"\n",(0,a.jsx)(n.h3,{id:"751-contract-testing-con-sita",children:"7.5.1 Contract Testing con SITA"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'[TestClass]\npublic class SitaProtocolContractTests\n{\n    [TestMethod]\n    public async Task FlightPlanMessage_ShouldConformToICAOStandards()\n    {\n        // Arrange\n        var flightPlan = new FlightPlanMessage\n        {\n            Aircraft = "B738",\n            Departure = "LIMA",\n            Destination = "SPJC",\n            Route = "DCT"\n        };\n\n        // Act\n        var sitaFormat = await _formatter.FormatAsync(flightPlan);\n\n        // Assert\n        Assert.IsTrue(IsValidICAOFormat(sitaFormat));\n        Assert.IsTrue(sitaFormat.StartsWith("(FPL"));\n        Assert.IsTrue(sitaFormat.Contains("-B738/"));\n    }\n\n    [TestMethod]\n    public async Task SitaConnection_ShouldHandleNetworkInterruption()\n    {\n        // Arrange\n        var connection = await _connectionPool.AcquireAsync();\n\n        // Act - Simulate network interruption\n        await SimulateNetworkFailure();\n        var reconnectResult = await connection.ReconnectAsync();\n\n        // Assert\n        Assert.IsTrue(reconnectResult.IsSuccess);\n        Assert.IsTrue(connection.IsConnected);\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"752-load-testing",children:"7.5.2 Load Testing"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"[TestClass]\npublic class SitaMessagingLoadTests\n{\n    [TestMethod]\n    public async Task ShouldHandle1000MessagesPerMinute()\n    {\n        // Arrange\n        var messages = GenerateTestMessages(1000);\n        var stopwatch = Stopwatch.StartNew();\n\n        // Act\n        var tasks = messages.Select(msg => _sitaService.SendMessageAsync(msg));\n        var results = await Task.WhenAll(tasks);\n\n        stopwatch.Stop();\n\n        // Assert\n        Assert.IsTrue(stopwatch.Elapsed < TimeSpan.FromMinutes(1));\n        Assert.IsTrue(results.All(r => r.IsSuccess));\n    }\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);