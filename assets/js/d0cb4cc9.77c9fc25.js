"use strict";(self.webpackChunktlm_doc_architecture=self.webpackChunktlm_doc_architecture||[]).push([[3791],{28453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>t});var r=a(96540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}},48753:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"lineamientos/desarrollo-de-apis/versionado-y-documentacion","title":"Versionado y documentaci\xf3n","description":"Esta gu\xeda define las estrategias de versionado y documentaci\xf3n de APIs para garantizar evoluci\xf3n compatible y mantenibilidad.","source":"@site/docs/lineamientos/desarrollo-de-apis/04-versionado-y-documentacion.md","sourceDirName":"lineamientos/desarrollo-de-apis","slug":"/lineamientos/desarrollo-de-apis/versionado-y-documentacion","permalink":"/tlm-doc-architecture/docs/lineamientos/desarrollo-de-apis/versionado-y-documentacion","draft":false,"unlisted":false,"editUrl":"https://github.com/jclemente-tlm/tlm-doc-architecture/edit/main/docs/lineamientos/desarrollo-de-apis/04-versionado-y-documentacion.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Versionado y documentaci\xf3n","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Validaci\xf3n y manejo de errores","permalink":"/tlm-doc-architecture/docs/lineamientos/desarrollo-de-apis/validacion-y-errores"},"next":{"title":"Performance y monitoreo","permalink":"/tlm-doc-architecture/docs/lineamientos/desarrollo-de-apis/performance-y-monitoreo"}}');var s=a(74848),i=a(28453);const o={title:"Versionado y documentaci\xf3n",sidebar_position:4},t=void 0,c={},d=[{value:"\ud83d\udcca Estrategias de versionado",id:"-estrategias-de-versionado",level:2},{value:"Versionado por URL (Recomendado)",id:"versionado-por-url-recomendado",level:3},{value:"Implementaci\xf3n con ASP.NET Core",id:"implementaci\xf3n-con-aspnet-core",level:3},{value:"\ud83d\udccb Pol\xedtica de versionado",id:"-pol\xedtica-de-versionado",level:2},{value:"Semantic Versioning adaptado para APIs",id:"semantic-versioning-adaptado-para-apis",level:3},{value:"Compatibilidad hacia atr\xe1s",id:"compatibilidad-hacia-atr\xe1s",level:3},{value:"Deprecaci\xf3n de versiones",id:"deprecaci\xf3n-de-versiones",level:3},{value:"\ud83d\udcda Documentaci\xf3n con OpenAPI/Swagger",id:"-documentaci\xf3n-con-openapiswagger",level:2},{value:"Configuraci\xf3n avanzada",id:"configuraci\xf3n-avanzada",level:3},{value:"Documentaci\xf3n rica con atributos",id:"documentaci\xf3n-rica-con-atributos",level:3},{value:"Modelos con documentaci\xf3n",id:"modelos-con-documentaci\xf3n",level:3},{value:"\ud83d\udd27 Mejores pr\xe1cticas",id:"-mejores-pr\xe1cticas",level:2},{value:"Estructura de archivos de documentaci\xf3n",id:"estructura-de-archivos-de-documentaci\xf3n",level:3},{value:"Changelog y gu\xedas de migraci\xf3n",id:"changelog-y-gu\xedas-de-migraci\xf3n",level:3},{value:"Testing de compatibilidad",id:"testing-de-compatibilidad",level:3},{value:"\ud83d\udcd6 Referencias",id:"-referencias",level:2},{value:"ADRs relacionados",id:"adrs-relacionados",level:3},{value:"Recursos externos",id:"recursos-externos",level:3}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Esta gu\xeda define las estrategias de versionado y documentaci\xf3n de APIs para garantizar evoluci\xf3n compatible y mantenibilidad."}),"\n",(0,s.jsx)(n.h2,{id:"-estrategias-de-versionado",children:"\ud83d\udcca Estrategias de versionado"}),"\n",(0,s.jsx)(n.h3,{id:"versionado-por-url-recomendado",children:"Versionado por URL (Recomendado)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:"GET /api/v1/users\nGET /api/v2/users\nGET /api/v1.5/users  # Para versiones menores\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ventajas:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Simplicidad y claridad"}),"\n",(0,s.jsx)(n.li,{children:"F\xe1cil routing y cache"}),"\n",(0,s.jsx)(n.li,{children:"Compatible con proxies/CDNs"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"implementaci\xf3n-con-aspnet-core",children:"Implementaci\xf3n con ASP.NET Core"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// Program.cs\nbuilder.Services.AddApiVersioning(options =>\n{\n    options.DefaultApiVersion = new ApiVersion(1, 0);\n    options.AssumeDefaultVersionWhenUnspecified = true;\n    options.ApiVersionReader = ApiVersionReader.Combine(\n        new UrlSegmentApiVersionReader(),\n        new QueryStringApiVersionReader("version"),\n        new HeaderApiVersionReader("X-Version")\n    );\n});\n\nbuilder.Services.AddVersionedApiExplorer(setup =>\n{\n    setup.GroupNameFormat = "\'v\'VVV";\n    setup.SubstituteApiVersionInUrl = true;\n});\n\n// Controller\n[ApiController]\n[Route("api/v{version:apiVersion}/[controller]")]\n[ApiVersion("1.0")]\n[ApiVersion("2.0")]\npublic class UsersController : ControllerBase\n{\n    [HttpGet]\n    [MapToApiVersion("1.0")]\n    public async Task<ActionResult<UserV1Dto[]>> GetUsersV1()\n    {\n        // Implementaci\xf3n v1\n    }\n\n    [HttpGet]\n    [MapToApiVersion("2.0")]\n    public async Task<ActionResult<UserV2Dto[]>> GetUsersV2()\n    {\n        // Implementaci\xf3n v2 con campos adicionales\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-pol\xedtica-de-versionado",children:"\ud83d\udccb Pol\xedtica de versionado"}),"\n",(0,s.jsx)(n.h3,{id:"semantic-versioning-adaptado-para-apis",children:"Semantic Versioning adaptado para APIs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"MAJOR.MINOR.PATCH\n\nMAJOR: Cambios incompatibles (breaking changes)\n- Eliminar endpoints\n- Cambiar estructura de respuesta existente\n- Cambiar tipos de datos\n- Cambiar sem\xe1ntica de operaciones\n\nMINOR: Funcionalidad nueva compatible\n- Nuevos endpoints\n- Nuevos campos opcionales en respuestas\n- Nuevos par\xe1metros opcionales\n\nPATCH: Correcciones de bugs\n- Fixes de l\xf3gica de negocio\n- Mejoras de performance\n- Correcciones de documentaci\xf3n\n"})}),"\n",(0,s.jsx)(n.h3,{id:"compatibilidad-hacia-atr\xe1s",children:"Compatibilidad hacia atr\xe1s"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"// Estrategia: Mantener versiones anteriores funcionando\npublic class UserService\n{\n    public async Task<UserV1Dto> GetUserV1Async(int id)\n    {\n        var user = await _repository.GetUserAsync(id);\n\n        // Mapear solo campos compatibles con v1\n        return new UserV1Dto\n        {\n            Id = user.Id,\n            Name = user.Name,\n            Email = user.Email,\n            Active = user.Active\n        };\n    }\n\n    public async Task<UserV2Dto> GetUserV2Async(int id)\n    {\n        var user = await _repository.GetUserAsync(id);\n\n        // Incluir nuevos campos en v2\n        return new UserV2Dto\n        {\n            Id = user.Id,\n            Name = user.Name,\n            Email = user.Email,\n            Active = user.Active,\n            Department = user.Department,    // Nuevo en v2\n            CreatedAt = user.CreatedAt,      // Nuevo en v2\n            Permissions = user.Permissions   // Nuevo en v2\n        };\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"deprecaci\xf3n-de-versiones",children:"Deprecaci\xf3n de versiones"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'[ApiController]\n[ApiVersion("1.0", Deprecated = true)]\n[ApiVersion("2.0")]\npublic class UsersController : ControllerBase\n{\n    [HttpGet]\n    [MapToApiVersion("1.0")]\n    [ProducesResponseType(200)]\n    public async Task<ActionResult<UserV1Dto[]>> GetUsersV1()\n    {\n        // Agregar header de deprecaci\xf3n\n        Response.Headers.Add("Sunset", "2024-12-31T23:59:59Z");\n        Response.Headers.Add("Deprecation", "true");\n        Response.Headers.Add("Link", "</api/v2/users>; rel=\\"successor-version\\"");\n\n        return await GetUsersV1Internal();\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-documentaci\xf3n-con-openapiswagger",children:"\ud83d\udcda Documentaci\xf3n con OpenAPI/Swagger"}),"\n",(0,s.jsx)(n.h3,{id:"configuraci\xf3n-avanzada",children:"Configuraci\xf3n avanzada"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'builder.Services.AddSwaggerGen(options =>\n{\n    // Configurar m\xfaltiples versiones\n    options.SwaggerDoc("v1", new OpenApiInfo\n    {\n        Version = "v1.0",\n        Title = "Talma API v1",\n        Description = "API REST para gesti\xf3n de usuarios y recursos - Versi\xf3n 1",\n        Contact = new OpenApiContact\n        {\n            Name = "Equipo de Desarrollo",\n            Email = "desarrollo@talma.pe",\n            Url = new Uri("https://talma.pe/support")\n        },\n        License = new OpenApiLicense\n        {\n            Name = "Uso interno Talma",\n            Url = new Uri("https://talma.pe/license")\n        }\n    });\n\n    options.SwaggerDoc("v2", new OpenApiInfo\n    {\n        Version = "v2.0",\n        Title = "Talma API v2",\n        Description = "API REST para gesti\xf3n de usuarios y recursos - Versi\xf3n 2"\n    });\n\n    // Incluir comentarios XML\n    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";\n    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);\n    options.IncludeXmlComments(xmlPath);\n\n    // Configurar autenticaci\xf3n\n    options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme\n    {\n        Description = "JWT Authorization header usando el esquema Bearer",\n        Name = "Authorization",\n        In = ParameterLocation.Header,\n        Type = SecuritySchemeType.ApiKey,\n        Scheme = "Bearer"\n    });\n\n    options.AddSecurityRequirement(new OpenApiSecurityRequirement\n    {\n        {\n            new OpenApiSecurityScheme\n            {\n                Reference = new OpenApiReference\n                {\n                    Type = ReferenceType.SecurityScheme,\n                    Id = "Bearer"\n                }\n            },\n            new string[] {}\n        }\n    });\n\n    // Filtros personalizados\n    options.DocumentFilter<SecurityRequirementsDocumentFilter>();\n    options.OperationFilter<SwaggerDefaultValues>();\n});\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI(options =>\n    {\n        options.SwaggerEndpoint("/swagger/v1/swagger.json", "Talma API v1");\n        options.SwaggerEndpoint("/swagger/v2/swagger.json", "Talma API v2");\n        options.RoutePrefix = "swagger";\n        options.DisplayRequestDuration();\n        options.EnableDeepLinking();\n        options.EnableFilter();\n    });\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"documentaci\xf3n-rica-con-atributos",children:"Documentaci\xf3n rica con atributos"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'/// <summary>\n/// Obtiene la lista paginada de usuarios\n/// </summary>\n/// <param name="query">Par\xe1metros de consulta y filtrado</param>\n/// <returns>Lista paginada de usuarios</returns>\n/// <response code="200">Lista de usuarios obtenida exitosamente</response>\n/// <response code="400">Par\xe1metros de consulta inv\xe1lidos</response>\n/// <response code="401">Token de acceso requerido</response>\n/// <response code="403">Sin permisos para acceder a usuarios</response>\n[HttpGet]\n[ProducesResponseType(typeof(PagedResponse<UserDto>), 200)]\n[ProducesResponseType(typeof(ApiError), 400)]\n[ProducesResponseType(typeof(ApiError), 401)]\n[ProducesResponseType(typeof(ApiError), 403)]\npublic async Task<ActionResult<PagedResponse<UserDto>>> GetUsers(\n    [FromQuery] UserQuery query)\n{\n    var users = await _userService.GetUsersAsync(query);\n    return Ok(users);\n}\n\n/// <summary>\n/// Crea un nuevo usuario en el sistema\n/// </summary>\n/// <param name="request">Datos del usuario a crear</param>\n/// <returns>Usuario creado con su ID asignado</returns>\n/// <remarks>\n/// Ejemplo de request:\n///\n///     POST /api/v1/users\n///     {\n///         "name": "Juan P\xe9rez",\n///         "email": "juan.perez@talma.pe",\n///         "phone": "+51987654321",\n///         "age": 30,\n///         "roles": ["user"]\n///     }\n///\n/// </remarks>\n/// <response code="201">Usuario creado exitosamente</response>\n/// <response code="400">Datos de entrada inv\xe1lidos</response>\n/// <response code="422">Error de l\xf3gica de negocio (ej: email duplicado)</response>\n[HttpPost]\n[ProducesResponseType(typeof(ApiResponse<UserDto>), 201)]\n[ProducesResponseType(typeof(ApiError), 400)]\n[ProducesResponseType(typeof(ApiError), 422)]\npublic async Task<ActionResult<ApiResponse<UserDto>>> CreateUser(\n    [FromBody] CreateUserRequest request)\n{\n    // Implementation...\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"modelos-con-documentaci\xf3n",children:"Modelos con documentaci\xf3n"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'/// <summary>\n/// Datos b\xe1sicos de un usuario del sistema\n/// </summary>\npublic class UserDto\n{\n    /// <summary>\n    /// Identificador \xfanico del usuario\n    /// </summary>\n    /// <example>12345</example>\n    public int Id { get; set; }\n\n    /// <summary>\n    /// Nombre completo del usuario\n    /// </summary>\n    /// <example>Juan P\xe9rez Garc\xeda</example>\n    [Required]\n    public string Name { get; set; }\n\n    /// <summary>\n    /// Direcci\xf3n de correo electr\xf3nico (debe ser dominio Talma)\n    /// </summary>\n    /// <example>juan.perez@talma.pe</example>\n    [Required]\n    public string Email { get; set; }\n\n    /// <summary>\n    /// Estado activo del usuario\n    /// </summary>\n    /// <example>true</example>\n    public bool Active { get; set; }\n\n    /// <summary>\n    /// Fecha y hora de creaci\xf3n del usuario (UTC)\n    /// </summary>\n    /// <example>2024-01-15T10:30:00Z</example>\n    public DateTime CreatedAt { get; set; }\n}\n\n/// <summary>\n/// Par\xe1metros para crear un nuevo usuario\n/// </summary>\npublic class CreateUserRequest\n{\n    /// <summary>\n    /// Nombre completo del usuario (2-100 caracteres, solo letras)\n    /// </summary>\n    /// <example>Mar\xeda Gonz\xe1lez</example>\n    [Required(ErrorMessage = "El nombre es obligatorio")]\n    [StringLength(100, MinimumLength = 2)]\n    public string Name { get; set; }\n\n    /// <summary>\n    /// Correo electr\xf3nico v\xe1lido del dominio Talma\n    /// </summary>\n    /// <example>maria.gonzalez@talma.pe</example>\n    [Required(ErrorMessage = "El email es obligatorio")]\n    [EmailAddress]\n    public string Email { get; set; }\n\n    /// <summary>\n    /// N\xfamero de tel\xe9fono (opcional)\n    /// </summary>\n    /// <example>+51987654321</example>\n    [Phone]\n    public string Phone { get; set; }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-mejores-pr\xe1cticas",children:"\ud83d\udd27 Mejores pr\xe1cticas"}),"\n",(0,s.jsx)(n.h3,{id:"estructura-de-archivos-de-documentaci\xf3n",children:"Estructura de archivos de documentaci\xf3n"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"docs/\n\u251c\u2500\u2500 api/\n\u2502   \u251c\u2500\u2500 v1/\n\u2502   \u2502   \u251c\u2500\u2500 users.md\n\u2502   \u2502   \u251c\u2500\u2500 orders.md\n\u2502   \u2502   \u2514\u2500\u2500 authentication.md\n\u2502   \u251c\u2500\u2500 v2/\n\u2502   \u2502   \u251c\u2500\u2500 users.md\n\u2502   \u2502   \u2514\u2500\u2500 orders.md\n\u2502   \u251c\u2500\u2500 changelog.md\n\u2502   \u251c\u2500\u2500 migration-guide.md\n\u2502   \u2514\u2500\u2500 postman-collections/\n\u2502       \u251c\u2500\u2500 v1.json\n\u2502       \u2514\u2500\u2500 v2.json\n"})}),"\n",(0,s.jsx)(n.h3,{id:"changelog-y-gu\xedas-de-migraci\xf3n",children:"Changelog y gu\xedas de migraci\xf3n"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"# API Changelog\n\n## v2.0.0 (2024-03-01)\n\n### Breaking Changes\n- `GET /api/v1/users` ahora requiere paginaci\xf3n obligatoria\n- Campo `user.created_date` renombrado a `user.created_at`\n- Eliminado endpoint deprecado `POST /api/v1/login`\n\n### New Features\n- Nuevo endpoint `GET /api/v2/users/{id}/permissions`\n- Agregado soporte para filtrado por m\xfaltiples campos\n- Nuevo campo `user.department` en respuestas\n\n### Bug Fixes\n- Corregida validaci\xf3n de email para dominios internacionales\n- Mejorada performance en consultas paginadas\n\n## Migration Guide v1 \u2192 v2\n\n### Required Changes\n1. **Paginaci\xf3n**: Agregar par\xe1metros `page` y `limit`\n2. **Campo renamed**: `created_date` \u2192 `created_at`\n3. **Autenticaci\xf3n**: Migrar de `/login` a `/auth/token`\n\n### Code Examples\n\n```javascript\n// v1\nfetch('/api/v1/users')\n\n// v2\nfetch('/api/v2/users?page=1&limit=20')\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testing-de-compatibilidad",children:"Testing de compatibilidad"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'[Fact]\npublic async Task GetUsers_V1_MaintainsCompatibility()\n{\n    // Arrange\n    var client = _factory.CreateClient();\n    client.DefaultRequestHeaders.Add("X-Version", "1.0");\n\n    // Act\n    var response = await client.GetAsync("/api/v1/users");\n\n    // Assert\n    response.StatusCode.Should().Be(HttpStatusCode.OK);\n\n    var content = await response.Content.ReadAsStringAsync();\n    var users = JsonSerializer.Deserialize<UserV1Dto[]>(content);\n\n    // Verificar que v1 no incluye campos nuevos de v2\n    users.First().Should().NotHaveProperty("Department");\n    users.First().Should().NotHaveProperty("Permissions");\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-referencias",children:"\ud83d\udcd6 Referencias"}),"\n",(0,s.jsx)(n.h3,{id:"adrs-relacionados",children:"ADRs relacionados"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/adrs/adr-002-estandard-apis-rest",children:"ADR-002: Est\xe1ndar para APIs REST"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/adrs/adr-017-versionado-apis",children:"ADR-017: Versionado de APIs"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"recursos-externos",children:"Recursos externos"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/microsoft/aspnet-api-versioning",children:"Microsoft API Versioning"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://swagger.io/specification/",children:"OpenAPI Specification"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://semver.org/",children:"Semantic Versioning"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://blog.postman.com/api-versioning-best-practices/",children:"API Evolution Best Practices"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);