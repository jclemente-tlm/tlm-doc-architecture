"use strict";(self.webpackChunktlm_doc_architecture=self.webpackChunktlm_doc_architecture||[]).push([[4853],{5307:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"servicios-corporativos/servicio-notificacion/vista-implementacion","title":"7. Vista de implementaci\xf3n","description":"7.1 Estructura del proyecto","source":"@site/docs/servicios-corporativos/servicio-notificacion/07-vista-implementacion.md","sourceDirName":"servicios-corporativos/servicio-notificacion","slug":"/servicios-corporativos/servicio-notificacion/vista-implementacion","permalink":"/docs/servicios-corporativos/servicio-notificacion/vista-implementacion","draft":false,"unlisted":false,"editUrl":"https://github.com/jclemente-tlm/tlm-doc-architecture/edit/main/docs/servicios-corporativos/servicio-notificacion/07-vista-implementacion.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"6. Vista de tiempo de ejecuci\xf3n","permalink":"/docs/servicios-corporativos/servicio-notificacion/vista-tiempo-ejecucion"},"next":{"title":"8. Conceptos transversales","permalink":"/docs/servicios-corporativos/servicio-notificacion/conceptos-transversales"}}');var s=i(74848),t=i(28453);const a={},o="7. Vista de implementaci\xf3n",c={},l=[{value:"7.1 Estructura del proyecto",id:"71-estructura-del-proyecto",level:2},{value:"7.2 Dependencias principales",id:"72-dependencias-principales",level:2},{value:"7.3 Infraestructura de Despliegue",id:"73-infraestructura-de-despliegue",level:2},{value:"Arquitectura de Contenedores",id:"arquitectura-de-contenedores",level:3},{value:"Servicio API de Notificaci\xf3n",id:"servicio-api-de-notificaci\xf3n",level:4},{value:"Servicio Procesador de Notificaci\xf3n",id:"servicio-procesador-de-notificaci\xf3n",level:4},{value:"Infraestructura de Cola de Mensajes",id:"infraestructura-de-cola-de-mensajes",level:3},{value:"7.4 Deployment Environments",id:"74-deployment-environments",level:2},{value:"Entorno de Desarrollo",id:"entorno-de-desarrollo",level:3},{value:"Entorno de Staging",id:"entorno-de-staging",level:3},{value:"Entorno de Producci\xf3n",id:"entorno-de-producci\xf3n",level:3},{value:"7.5 Provider Integration Architecture",id:"75-provider-integration-architecture",level:2},{value:"Multi-Provider Strategy",id:"multi-provider-strategy",level:3},{value:"Provider Abstraction Layer",id:"provider-abstraction-layer",level:3},{value:"7.6 Security Implementation",id:"76-security-implementation",level:2},{value:"Network Security",id:"network-security",level:3},{value:"Secrets Management",id:"secrets-management",level:3},{value:"Data Encryption",id:"data-encryption",level:3},{value:"7.7 Monitoring &amp; Observability",id:"77-monitoring--observability",level:2},{value:"Metrics Collection",id:"metrics-collection",level:3},{value:"Logging Strategy",id:"logging-strategy",level:3},{value:"Trazado Distribuido",id:"trazado-distribuido",level:3},{value:"7.8 CI/CD Pipeline",id:"78-cicd-pipeline",level:2},{value:"Build Pipeline",id:"build-pipeline",level:3},{value:"Gesti\xf3n de Configuraci\xf3n",id:"gesti\xf3n-de-configuraci\xf3n",level:3},{value:"Database Migration Strategy",id:"database-migration-strategy",level:3},{value:"7.9 Scaling Strategy",id:"79-scaling-strategy",level:2},{value:"Horizontal Scaling",id:"horizontal-scaling",level:3},{value:"Message Queue Scaling",id:"message-queue-scaling",level:3},{value:"7.10 Disaster Recovery",id:"710-disaster-recovery",level:2},{value:"Backup Strategy",id:"backup-strategy",level:3},{value:"Recovery Procedures",id:"recovery-procedures",level:3},{value:"Referencias",id:"referencias",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"7-vista-de-implementaci\xf3n",children:"7. Vista de implementaci\xf3n"})}),"\n",(0,s.jsx)(n.h2,{id:"71-estructura-del-proyecto",children:"7.1 Estructura del proyecto"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Componente"}),(0,s.jsx)(n.th,{children:"Ubicaci\xf3n"}),(0,s.jsx)(n.th,{children:"Tecnolog\xeda"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Notification API"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"/src/NotificationApi"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:".NET 8 Web API"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Notification Processor"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"/src/NotificationProcessor"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:".NET 8 Worker"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"PostgreSQL"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"AWS RDS"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"PostgreSQL 15+"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Redis"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"AWS ElastiCache"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Redis 7+"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"File Storage"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"AWS EFS"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Sistema archivos"})})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"72-dependencias-principales",children:"7.2 Dependencias principales"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Dependencia"}),(0,s.jsx)(n.th,{children:"Versi\xf3n"}),(0,s.jsx)(n.th,{children:"Prop\xf3sito"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Entity Framework"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"8.0+"})}),(0,s.jsx)(n.td,{children:"ORM"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"FluentValidation"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"11.0+"})}),(0,s.jsx)(n.td,{children:"Validaci\xf3n"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"RazorEngine"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"4.0+"})}),(0,s.jsx)(n.td,{children:"Plantillas"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Serilog"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"3.0+"})}),(0,s.jsx)(n.td,{children:"Logging"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"73-infraestructura-de-despliegue",children:"7.3 Infraestructura de Despliegue"}),"\n",(0,s.jsx)(n.h3,{id:"arquitectura-de-contenedores",children:"Arquitectura de Contenedores"}),"\n",(0,s.jsx)(n.h4,{id:"servicio-api-de-notificaci\xf3n",children:"Servicio API de Notificaci\xf3n"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: notification-api\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: notification-api\n  template:\n    spec:\n      containers:\n      - name: notification-api\n        image: corporativo/notification-api:latest\n        ports:\n        - containerPort: 8080\n        env:\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: db-secret\n              key: url\n        - name: KAFKA_BROKERS\n          value: "eventbus-cluster:9092"\n        resources:\n          requests:\n            memory: "512Mi"\n            cpu: "250m"\n          limits:\n            memory: "1Gi"\n            cpu: "500m"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"servicio-procesador-de-notificaci\xf3n",children:"Servicio Procesador de Notificaci\xf3n"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: notification-processor\nspec:\n  replicas: 5\n  template:\n    spec:\n      containers:\n      - name: notification-processor\n        image: corporativo/notification-processor:latest\n        env:\n        - name: SENDGRID_API_KEY\n          valueFrom:\n            secretKeyRef:\n              name: email-secrets\n              key: sendgrid-key\n        - name: TWILIO_AUTH_TOKEN\n          valueFrom:\n            secretKeyRef:\n              name: sms-secrets\n              key: twilio-token\n        - name: REDIS_URL\n          value: "redis-cluster:6379"\n        resources:\n          requests:\n            memory: "256Mi"\n            cpu: "200m"\n          limits:\n            memory: "512Mi"\n            cpu: "400m"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"infraestructura-de-cola-de-mensajes",children:"Infraestructura de Cola de Mensajes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"Event Bus agn\xf3stico Cluster:\n  Brokers: 3 instances\n  Partitions per Topic: 12\n  Replication Factor: 3\n  Retention: 7 days\n\nTopics:\n  notification-requests:\n    partitions: 12\n    config:\n      cleanup.policy: delete\n      retention.ms: 604800000  # 7 days\n\n  notification-status:\n    partitions: 6\n    config:\n      cleanup.policy: compact\n      retention.ms: 2592000000  # 30 days\n"})}),"\n",(0,s.jsx)(n.h2,{id:"74-deployment-environments",children:"7.4 Deployment Environments"}),"\n",(0,s.jsx)(n.h3,{id:"entorno-de-desarrollo",children:"Entorno de Desarrollo"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"Environment: Development\nInfrastructure:\n  - Kubernetes: minikube\n  - Database: PostgreSQL (single instance)\n  - Message Queue: Kafka (single broker)\n  - Cache: Redis (single instance)\n  - Providers: Sandbox/test endpoints\n\nConfiguration:\n  - Email Provider: Mailhog (local testing)\n  - SMS Provider: Mock service\n  - Monitoring: Basic health checks\n  - Logs: Console output + local files\n"})}),"\n",(0,s.jsx)(n.h3,{id:"entorno-de-staging",children:"Entorno de Staging"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"Environment: Staging\nInfrastructure:\n  - Kubernetes: AWS EKS (3 nodes)\n  - Database: AWS RDS PostgreSQL\n  - Message Queue: AWS MSK (Kafka)\n  - Cache: AWS ElastiCache Redis\n  - Providers: Test environments\n\nConfiguration:\n  - Email Provider: SendGrid test mode\n  - SMS Provider: Twilio test credentials\n  - Monitoring: Prometheus + Grafana\n  - Logs: CloudWatch + centralized logging\n"})}),"\n",(0,s.jsx)(n.h3,{id:"entorno-de-producci\xf3n",children:"Entorno de Producci\xf3n"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"Environment: Production\nInfrastructure:\n  - Kubernetes: AWS EKS (9 nodes, 3 AZs)\n  - Database: AWS RDS PostgreSQL (Multi-AZ)\n  - Message Queue: AWS MSK (Multi-AZ)\n  - Cache: AWS ElastiCache Redis (Cluster)\n  - CDN: CloudFront for static assets\n\nConfiguration:\n  - Email Provider: SendGrid + SES (failover)\n  - SMS Provider: Twilio + SNS (failover)\n  - Push Provider: FCM + APNS\n  - WhatsApp: WhatsApp Business API\n"})}),"\n",(0,s.jsx)(n.h2,{id:"75-provider-integration-architecture",children:"7.5 Provider Integration Architecture"}),"\n",(0,s.jsx)(n.h3,{id:"multi-provider-strategy",children:"Multi-Provider Strategy"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"Email Providers:\n  Primary: SendGrid\n    - Volume: 80% of traffic\n    - SLA: 99.9% uptime\n    - Features: Advanced analytics, templates\n\n  Secondary: Amazon SES\n    - Volume: 20% of traffic\n    - SLA: 99.99% uptime\n    - Features: Cost optimization, AWS integration\n\n  Failover: Mailgun\n    - Volume: Emergency only\n    - Features: European compliance\n\nSMS Providers:\n  Primary: Twilio\n    - Coverage: Global\n    - Features: Short codes, long codes\n\n  Secondary: AWS SNS\n    - Coverage: Major regions\n    - Features: Cost optimization\n"})}),"\n",(0,s.jsx)(n.h3,{id:"provider-abstraction-layer",children:"Provider Abstraction Layer"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public interface INotificationProvider\n{\n    Task<DeliveryResult> SendAsync(NotificationMessage message);\n    Task<HealthStatus> CheckHealthAsync();\n    string ProviderName { get; }\n    NotificationChannel SupportedChannel { get; }\n}\n\npublic class EmailProviderFactory\n{\n    public IEmailProvider GetProvider(EmailProviderType type)\n    {\n        return type switch\n        {\n            EmailProviderType.SendGrid => new SendGridProvider(),\n            EmailProviderType.SES => new SesProvider(),\n            EmailProviderType.Mailgun => new MailgunProvider(),\n            _ => throw new NotSupportedException()\n        };\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"76-security-implementation",children:"7.6 Security Implementation"}),"\n",(0,s.jsx)(n.h3,{id:"network-security",children:"Network Security"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"Network Policies:\n  - API Tier: Ingress from ALB only\n  - Processor Tier: No direct external access\n  - Database Tier: Access from app tiers only\n  - Cache Tier: Internal access only\n\nSecurity Groups:\n  notification-api:\n    - Ingress: Port 8080 from ALB\n    - Egress: Database, Kafka, Redis\n\n  notification-processor:\n    - Ingress: None (pull-based)\n    - Egress: External providers, Kafka, Redis\n\n"})}),"\n",(0,s.jsx)(n.h3,{id:"secrets-management",children:"Secrets Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'AWS Secrets Manager:\n  email-providers:\n    sendgrid-api-key: "encrypted-key"\n    ses-credentials: "access-key-id + secret"\n\n  sms-providers:\n    twilio-auth-token: "encrypted-token"\n    sns-credentials: "aws-credentials"\n\n  push-providers:\n    fcm-server-key: "firebase-key"\n\n    apns-certificate: "apple-certificate"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"data-encryption",children:"Data Encryption"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"Encryption Strategy:\n  At Rest:\n    - Database: AES-256 encryption\n    - Message Queue: Kafka encryption\n    - Cache: Redis AUTH + TLS\n\n  In Transit:\n    - API: TLS 1.3\n    - Provider APIs: TLS 1.2+\n    - Internal: mTLS (service mesh)\n\n  PII Protection:\n    - Email addresses: Hashed for analytics\n    - Phone numbers: Encrypted in database\n    - Message content: Encrypted until delivery\n\n"})}),"\n",(0,s.jsx)(n.h2,{id:"77-monitoring--observability",children:"7.7 Monitoring & Observability"}),"\n",(0,s.jsx)(n.h3,{id:"metrics-collection",children:"Metrics Collection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"Prometheus Metrics:\n  Business Metrics:\n    - notifications_sent_total\n    - notifications_delivered_total\n    - notifications_failed_total\n    - delivery_time_seconds\n\n  Technical Metrics:\n    - api_requests_total\n\n    - processor_queue_depth\n    - provider_response_time\n    - cache_hit_ratio\n"})}),"\n",(0,s.jsx)(n.h3,{id:"logging-strategy",children:"Logging Strategy"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"Registro Estructurado:\n  Format: JSON with correlation IDs\n  Fields:\n    - timestamp\n    - level\n    - service\n    - correlationId\n    - notificationId\n    - channel\n    - provider\n    - tenantId\n    - message\n\nLog Levels:\n  - DEBUG: Development only\n\n  - INFO: Successful operations\n  - WARN: Recoverable errors\n  - ERROR: Failed operations\n  - FATAL: Service unavailable\n"})}),"\n",(0,s.jsx)(n.h3,{id:"trazado-distribuido",children:"Trazado Distribuido"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"Jaeger Configuration:\n  Sampling:\n    - Production: 1% of requests\n    - Staging: 10% of requests\n    - Development: 100% of requests\n\n  Span Creation:\n    - API requests\n\n    - Message processing\n    - Provider calls\n    - Database operations\n"})}),"\n",(0,s.jsx)(n.h2,{id:"78-cicd-pipeline",children:"7.8 CI/CD Pipeline"}),"\n",(0,s.jsx)(n.h3,{id:"build-pipeline",children:"Build Pipeline"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"GitHub Actions Workflow:\n\n  Build Stage:\n    - Checkout code\n    - Setup .NET 8 SDK\n    - Restore dependencies\n    - Run unit tests\n    - Generate test coverage\n    - SonarQube analysis\n    - Build Docker images\n    - Security scan (Trivy)\n    - Push to registry\n\n  Deploy Stage:\n    - Validate Kubernetes manifests\n    - Deploy to staging\n\n    - Run integration tests\n    - Load testing\n    - Security testing\n    - Manual approval for production\n    - Blue-green deployment\n    - Smoke tests\n"})}),"\n",(0,s.jsx)(n.h3,{id:"gesti\xf3n-de-configuraci\xf3n",children:"Gesti\xf3n de Configuraci\xf3n"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"Environment Configuration:\n  Development:\n    ConfigMap: notification-config-dev\n    Secrets: notification-secrets-dev\n\n\n  Staging:\n    ConfigMap: notification-config-staging\n    Secrets: notification-secrets-staging\n\n  Production:\n    ConfigMap: notification-config-prod\n    Secrets: notification-secrets-prod\n"})}),"\n",(0,s.jsx)(n.h3,{id:"database-migration-strategy",children:"Database Migration Strategy"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"Migration Approach:\n  - Liquibase for schema versioning\n  - Backward compatible changes\n  - Blue-green deployment support\n  - Rollback capability\n\nMigration Pipeline:\n\n  1. Validate migration scripts\n  2. Apply to development database\n  3. Run automated tests\n  4. Apply to staging database\n  5. Integration testing\n  6. Production deployment (maintenance window)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"79-scaling-strategy",children:"7.9 Scaling Strategy"}),"\n",(0,s.jsx)(n.h3,{id:"horizontal-scaling",children:"Horizontal Scaling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"Auto-scaling Configuration:\n\n  API Service:\n    - Min replicas: 2\n    - Max replicas: 10\n    - CPU threshold: 70%\n\n    - Memory threshold: 80%\n    - Custom metric: API requests/second\n\n  Processor Service:\n    - Min replicas: 3\n    - Max replicas: 20\n    - Custom metric: Kafka lag\n    - Scale up: Lag > 1000 messages\n    - Scale down: Lag < 100 messages\n"})}),"\n",(0,s.jsx)(n.h3,{id:"message-queue-scaling",children:"Message Queue Scaling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"Kafka Scaling:\n  Partition Strategy:\n\n    - Notification type based partitioning\n    - Tenant-based partitioning for isolation\n    - Time-based partitioning for analytics\n\n  Consumer Groups:\n    - One consumer group per notification type\n    - Parallel processing within groups\n    - Dead letter queues for failed messages\n"})}),"\n",(0,s.jsx)(n.h2,{id:"710-disaster-recovery",children:"7.10 Disaster Recovery"}),"\n",(0,s.jsx)(n.h3,{id:"backup-strategy",children:"Backup Strategy"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"Database Backups:\n  - Automated daily backups\n  - Point-in-time recovery (7 days)\n  - Cross-region backup replication\n  - Monthly backup testing\n\nMessage Queue Backups:\n  - Topic configuration backup\n  - Consumer offset backup\n  - Schema registry backup\n"})}),"\n",(0,s.jsx)(n.h3,{id:"recovery-procedures",children:"Recovery Procedures"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"Recovery Time Objectives:\n  - Database failover: < 5 minutes\n  - Application restart: < 10 minutes\n\n  - Full region recovery: < 1 hour\n\nRecovery Point Objectives:\n  - Database: < 1 minute data loss\n  - Message queue: Zero message loss\n  - Configuration: Zero loss (GitOps)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"referencias",children:"Referencias"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/configuration/overview/",children:"Kubernetes Mejores Pr\xe1cticas"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://microservices.io/patterns/deployment/",children:"Microservices Deployment Patterns"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://kafka.apache.org/documentation/#operations",children:"Event Bus agn\xf3stico Operations"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docs.arc42.org/section-7/",children:"Arc42 Deployment View"}),"\n\u251c\u2500\u2500 docker/\n\u2514\u2500\u2500 README.md"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:'## 7.2 Consideraciones de despliegue\n\n- Despliegue en <span style="color:#1976d2"><b>AWS</b></span> usando <b>Docker</b> y <b>docker-compose</b>\n- Uso de <b>pipelines CI/CD</b> para automatizaci\xf3n\n- Variables sensibles gestionadas por <code>secrets</code> y <code>Parameter Store</code>\n- Versionado sem\xe1ntico (`semver`)\n- Integraci\xf3n con <b>monitorizaci\xf3n</b> y <b>logging centralizado</b>\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var r=i(96540);const s={},t=r.createContext(s);function a(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);