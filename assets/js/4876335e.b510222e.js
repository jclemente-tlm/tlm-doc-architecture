"use strict";(self.webpackChunktlm_doc_architecture=self.webpackChunktlm_doc_architecture||[]).push([[1096],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var i=t(96540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}},30870:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"servicios-corporativos/servicio-track-trace/conceptos-transversales","title":"8. Conceptos transversales","description":"8.1 Seguridad","source":"@site/docs/servicios-corporativos/servicio-track-trace/08-conceptos-transversales.md","sourceDirName":"servicios-corporativos/servicio-track-trace","slug":"/servicios-corporativos/servicio-track-trace/conceptos-transversales","permalink":"/docs/servicios-corporativos/servicio-track-trace/conceptos-transversales","draft":false,"unlisted":false,"editUrl":"https://github.com/jclemente-tlm/tlm-doc-architecture/edit/main/docs/servicios-corporativos/servicio-track-trace/08-conceptos-transversales.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"7. Vista de implementaci\xf3n","permalink":"/docs/servicios-corporativos/servicio-track-trace/vista-implementacion"},"next":{"title":"9. Decisiones de arquitectura","permalink":"/docs/servicios-corporativos/servicio-track-trace/decisiones-arquitectura"}}');var r=t(74848),a=t(28453);const s={},c="8. Conceptos transversales",o={},l=[{value:"8.1 Seguridad",id:"81-seguridad",level:2},{value:"8.2 Observabilidad",id:"82-observabilidad",level:2},{value:"8.3 Multi-tenancy",id:"83-multi-tenancy",level:2},{value:"8.1 Modelo de dominio",id:"81-modelo-de-dominio",level:2},{value:"8.1.1 Event Sourcing como principio arquitect\xf3nico",id:"811-event-sourcing-como-principio-arquitect\xf3nico",level:3},{value:"8.1.2 CQRS (Command Query Responsibility Segregation)",id:"812-cqrs-command-query-responsibility-segregation",level:3},{value:"8.2 Seguridad",id:"82-seguridad",level:2},{value:"8.2.1 Autenticaci\xf3n y autorizaci\xf3n",id:"821-autenticaci\xf3n-y-autorizaci\xf3n",level:3},{value:"8.2.2 Tenant Isolation",id:"822-tenant-isolation",level:3},{value:"8.2.3 Data Protection y Compliance",id:"823-data-protection-y-compliance",level:3},{value:"8.3 Comunicaci\xf3n e integraci\xf3n",id:"83-comunicaci\xf3n-e-integraci\xf3n",level:2},{value:"8.3.1 Event-driven communication",id:"831-event-driven-communication",level:3},{value:"8.3.2 API Integration Patterns",id:"832-api-integration-patterns",level:3},{value:"8.4 Persistencia",id:"84-persistencia",level:2},{value:"8.4.1 Event Store Design",id:"841-event-store-design",level:3},{value:"8.4.2 Read Model Management",id:"842-read-model-management",level:3},{value:"8.5 Sesi\xf3n de usuario",id:"85-sesi\xf3n-de-usuario",level:2},{value:"8.5.1 Context Management",id:"851-context-management",level:3},{value:"8.5.2 Audit Trail",id:"852-audit-trail",level:3},{value:"8.6 Configuraci\xf3n",id:"86-configuraci\xf3n",level:2},{value:"8.6.1 Gesti\xf3n de Configuraci\xf3n",id:"861-gesti\xf3n-de-configuraci\xf3n",level:3},{value:"8.6.2 Environment-specific Settings",id:"862-environment-specific-settings",level:3},{value:"8.7 Internacionalizaci\xf3n",id:"87-internacionalizaci\xf3n",level:2},{value:"8.7.1 Multi-language Support",id:"871-multi-language-support",level:3},{value:"8.7.2 Timezone Handling",id:"872-timezone-handling",level:3},{value:"8.2.2 Protecci\xf3n de datos",id:"822-protecci\xf3n-de-datos",level:3},{value:"8.3 Multi-tenancy",id:"83-multi-tenancy-1",level:2},{value:"8.3.1 Aislamiento de datos",id:"831-aislamiento-de-datos",level:3},{value:"8.3.2 Configuraci\xf3n por tenant",id:"832-configuraci\xf3n-por-tenant",level:3},{value:"8.4 Observabilidad",id:"84-observabilidad",level:2},{value:"8.4.1 Structured logging",id:"841-structured-logging",level:3},{value:"8.4.2 M\xe9tricas y telemetr\xeda",id:"842-m\xe9tricas-y-telemetr\xeda",level:3},{value:"8.5 Performance y escalabilidad",id:"85-performance-y-escalabilidad",level:2},{value:"8.5.1 Estrategias de cache",id:"851-estrategias-de-cache",level:3},{value:"8.5.2 Particionado y sharding",id:"852-particionado-y-sharding",level:3},{value:"8.6 Manejo de errores",id:"86-manejo-de-errores",level:2},{value:"8.6.1 Estrategias de retry",id:"861-estrategias-de-retry",level:3},{value:"8.6.2 Circuit breaker pattern",id:"862-circuit-breaker-pattern",level:3},{value:"8.7 Testing",id:"87-testing",level:2},{value:"8.7.1 Test strategies",id:"871-test-strategies",level:3},{value:"8.7.2 Test Data Management",id:"872-test-data-management",level:3},{value:"8.10 Observabilidad",id:"810-observabilidad",level:2},{value:"8.10.1 Logging Structure",id:"8101-logging-structure",level:3},{value:"8.10.2 Metrics and Monitoring",id:"8102-metrics-and-monitoring",level:3},{value:"8.10.3 Health Checks",id:"8103-health-checks",level:3},{value:"8.10.4 Trazado Distribuido",id:"8104-trazado-distribuido",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"8-conceptos-transversales",children:"8. Conceptos transversales"})}),"\n",(0,r.jsx)(n.h2,{id:"81-seguridad",children:"8.1 Seguridad"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Aspecto"}),(0,r.jsx)(n.th,{children:"Implementaci\xf3n"}),(0,r.jsx)(n.th,{children:"Tecnolog\xeda"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Autenticaci\xf3n"})}),(0,r.jsx)(n.td,{children:"JWT validation"}),(0,r.jsx)(n.td,{children:"OAuth2"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Autorizaci\xf3n"})}),(0,r.jsx)(n.td,{children:"Claims-based"}),(0,r.jsx)(n.td,{children:".NET 8"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Cifrado"})}),(0,r.jsx)(n.td,{children:"TLS 1.3"}),(0,r.jsx)(n.td,{children:"HTTPS"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Datos sensibles"})}),(0,r.jsx)(n.td,{children:"AES-256"}),(0,r.jsx)(n.td,{children:"Cifrado"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"82-observabilidad",children:"8.2 Observabilidad"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Tipo"}),(0,r.jsx)(n.th,{children:"Herramienta"}),(0,r.jsx)(n.th,{children:"Prop\xf3sito"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Logs"})}),(0,r.jsx)(n.td,{children:"Serilog"}),(0,r.jsx)(n.td,{children:"Registro eventos"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"M\xe9tricas"})}),(0,r.jsx)(n.td,{children:"Prometheus"}),(0,r.jsx)(n.td,{children:"Monitoreo"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Tracing"})}),(0,r.jsx)(n.td,{children:"OpenTelemetry"}),(0,r.jsx)(n.td,{children:"Trazabilidad"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Health"})}),(0,r.jsx)(n.td,{children:"Health Checks"}),(0,r.jsx)(n.td,{children:"Estado servicios"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"83-multi-tenancy",children:"8.3 Multi-tenancy"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Aspecto"}),(0,r.jsx)(n.th,{children:"Implementaci\xf3n"}),(0,r.jsx)(n.th,{children:"Prop\xf3sito"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Aislamiento"})}),(0,r.jsx)(n.td,{children:"Por pa\xeds"}),(0,r.jsx)(n.td,{children:"Separaci\xf3n datos"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Deduplicaci\xf3n"})}),(0,r.jsx)(n.td,{children:"Por tenant"}),(0,r.jsx)(n.td,{children:"Prevenci\xf3n duplicados"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Rate limiting"})}),(0,r.jsx)(n.td,{children:"Por organizaci\xf3n"}),(0,r.jsx)(n.td,{children:"Protecci\xf3n recursos"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"81-modelo-de-dominio",children:"8.1 Modelo de dominio"}),"\n",(0,r.jsx)(n.h3,{id:"811-event-sourcing-como-principio-arquitect\xf3nico",children:"8.1.1 Event Sourcing como principio arquitect\xf3nico"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Concepto"}),": Todos los cambios de estado se capturan como eventos inmutables, garantizando auditabilidad completa y permitiendo reconstrucci\xf3n de estado en cualquier momento."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Implementaci\xf3n"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Store"}),": Almac\xe9n inmutable de eventos como \xfanica fuente de verdad"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Snapshots"}),": Optimizaci\xf3n para reconstrucci\xf3n r\xe1pida de estado"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event versioning"}),": Manejo de evoluci\xf3n de esquemas de eventos"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Temporal queries"}),": Consultas de estado en puntos espec\xedficos del tiempo"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Ventajas espec\xedficas para Track & Trace"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Auditor\xeda completa requerida por regulaciones"}),"\n",(0,r.jsx)(n.li,{children:"An\xe1lisis temporal de patrones operacionales"}),"\n",(0,r.jsx)(n.li,{children:"Capacidad de replay para debugging"}),"\n",(0,r.jsx)(n.li,{children:"Soporte natural para analytics y reporting"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"812-cqrs-command-query-responsibility-segregation",children:"8.1.2 CQRS (Command Query Responsibility Segregation)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Separaci\xf3n de responsabilidades"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Command side"}),": Escritura de eventos, validaciones de negocio"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Query side"}),": Lectura optimizada desde read models especializados"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event handlers"}),": Sincronizaci\xf3n as\xedncrona entre ambos lados"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Read models especializados"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Timeline views para trazabilidad"}),"\n",(0,r.jsx)(n.li,{children:"Aggregated views para dashboards"}),"\n",(0,r.jsx)(n.li,{children:"Search indexes para consultas complejas"}),"\n",(0,r.jsx)(n.li,{children:"Analytics projections para KPIs"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"82-seguridad",children:"8.2 Seguridad"}),"\n",(0,r.jsx)(n.h3,{id:"821-autenticaci\xf3n-y-autorizaci\xf3n",children:"8.2.1 Autenticaci\xf3n y autorizaci\xf3n"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"OAuth2 + JWT"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class TrackTraceAuthenticationOptions\n{\n    public string Authority { get; set; }\n    public string Audience { get; set; }\n    public string[] Scopes { get; set; }\n    public bool RequireHttpsMetadata { get; set; } = true;\n}\n\n[Authorize(Policy = "TrackTraceRead")]\npublic async Task<TimelineView> GetTimeline(string entityId)\n{\n    // Implementation with proper authorization context\n    var tenantId = User.GetTenantId();\n    var userPermissions = await _permissionService.GetUserPermissions(User.GetUserId(), tenantId);\n\n    return await _timelineService.GetTimeline(entityId, tenantId, userPermissions);\n}\n\npublic class AuthorizationPolicies\n{\n    public static void ConfigurePolicies(AuthorizationOptions options)\n    {\n        options.AddPolicy("TrackTraceRead", policy =>\n            policy.RequireScope("track-trace:read")\n                  .RequireClaim("tenant_access"));\n\n        options.AddPolicy("TrackTraceWrite", policy =>\n            policy.RequireScope("track-trace:write")\n                  .RequireClaim("tenant_admin"));\n\n        options.AddPolicy("TrackTraceAnalytics", policy =>\n            policy.RequireScope("track-trace:analytics")\n                  .RequireClaim("analytics_access"));\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"822-tenant-isolation",children:"8.2.2 Tenant Isolation"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Data Isolation Strategy"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tenant-per-schema"}),": Esquemas separados por tenant en PostgreSQL"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Row-level security"}),": Filtros autom\xe1ticos por tenant_id"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event stream partitioning"}),": Streams aislados por tenant"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class TenantAwareEventStore : IEventStore\n{\n    private readonly IDbConnectionFactory _connectionFactory;\n    private readonly ITenantContext _tenantContext;\n\n    public async Task AppendEventsAsync(string streamId, IEnumerable<EventData> events)\n    {\n        var tenantId = _tenantContext.GetCurrentTenantId();\n        var connection = await _connectionFactory.GetConnectionAsync(tenantId);\n\n        // All events are automatically scoped to the tenant\n        var tenantedStreamId = $"{tenantId}:{streamId}";\n        await AppendEventsToTenantStream(connection, tenantedStreamId, events);\n    }\n}\n\npublic class TenantContextMiddleware\n{\n    public async Task InvokeAsync(HttpContext context, RequestDelegate next)\n    {\n        var tenantId = ExtractTenantFromToken(context) ??\n                      ExtractTenantFromHeader(context);\n\n        if (tenantId == null)\n            throw new UnauthorizedAccessException("Tenant not specified");\n\n        context.Items["TenantId"] = tenantId;\n        await next(context);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"823-data-protection-y-compliance",children:"8.2.3 Data Protection y Compliance"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Encryption at Rest"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Event payloads encriptados con claves por tenant"}),"\n",(0,r.jsx)(n.li,{children:"PII data tokenization"}),"\n",(0,r.jsx)(n.li,{children:"Key rotation policies"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"GDPR/Data Privacy Compliance"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class GdprComplianceService\n{\n    public async Task HandleDataSubjectRightsRequest(DataSubjectRequest request)\n    {\n        switch (request.RequestType)\n        {\n            case DataSubjectRequestType.Access:\n                await GenerateDataExport(request.SubjectId);\n                break;\n\n            case DataSubjectRequestType.Deletion:\n                await PseudonymizePersonalData(request.SubjectId);\n                break;\n\n            case DataSubjectRequestType.Rectification:\n                await UpdatePersonalData(request.SubjectId, request.UpdatedData);\n                break;\n        }\n    }\n\n    private async Task PseudonymizePersonalData(string subjectId)\n    {\n        // Create pseudonymization event instead of deletion\n        var pseudonymizationEvent = new PersonalDataPseudonymizedEvent\n        {\n            SubjectId = subjectId,\n            PseudonymizationId = Guid.NewGuid(),\n            Timestamp = DateTime.UtcNow,\n            Reason = "GDPR deletion request"\n        };\n\n        await _eventStore.AppendEventsAsync(\n            $"data-subject-{subjectId}",\n            new[] { pseudonymizationEvent });\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"83-comunicaci\xf3n-e-integraci\xf3n",children:"8.3 Comunicaci\xf3n e integraci\xf3n"}),"\n",(0,r.jsx)(n.h3,{id:"831-event-driven-communication",children:"8.3.1 Event-driven communication"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Event Publishing"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public interface IEventPublisher\n{\n    Task PublishAsync<T>(T @event, string streamId) where T : IDomainEvent;\n    Task PublishBatchAsync(IEnumerable<EventData> events);\n}\n\npublic class KafkaEventPublisher : IEventPublisher\n{\n    private readonly IProducer<string, byte[]> _producer;\n    private readonly IEventSerializer _serializer;\n\n    public async Task PublishAsync<T>(T @event, string streamId) where T : IDomainEvent\n    {\n        var topicName = GetTopicName<T>();\n        var eventData = await _serializer.SerializeAsync(@event);\n\n        var message = new Message<string, byte[]>\n        {\n            Key = streamId,\n            Value = eventData,\n            Headers = CreateEventHeaders(@event)\n        };\n\n        await _producer.ProduceAsync(topicName, message);\n    }\n\n    private Headers CreateEventHeaders<T>(T @event) where T : IDomainEvent\n    {\n        return new Headers\n        {\n            {"event-type", Encoding.UTF8.GetBytes(typeof(T).Name)},\n            {"event-version", Encoding.UTF8.GetBytes(@event.Version.ToString())},\n            {"correlation-id", Encoding.UTF8.GetBytes(@event.CorrelationId)},\n            {"tenant-id", Encoding.UTF8.GetBytes(@event.TenantId)}\n        };\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Event Consumption"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class EventConsumerService : BackgroundService\n{\n    private readonly IConsumer<string, byte[]> _consumer;\n    private readonly IEventHandlerRegistry _handlerRegistry;\n\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        _consumer.Subscribe(GetSubscribedTopics());\n\n        while (!stoppingToken.IsCancellationRequested)\n        {\n            try\n            {\n                var consumeResult = _consumer.Consume(stoppingToken);\n                await ProcessMessage(consumeResult);\n                _consumer.Commit(consumeResult);\n            }\n            catch (OperationCanceledException)\n            {\n                break;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, "Error processing message");\n                // Implement retry logic or dead letter queue\n            }\n        }\n    }\n\n    private async Task ProcessMessage(ConsumeResult<string, byte[]> result)\n    {\n        var eventType = GetEventTypeFromHeaders(result.Message.Headers);\n        var handler = _handlerRegistry.GetHandler(eventType);\n\n        if (handler != null)\n        {\n            var @event = await _serializer.DeserializeAsync(result.Message.Value, eventType);\n            await handler.HandleAsync(@event);\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"832-api-integration-patterns",children:"8.3.2 API Integration Patterns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Patr\xf3n Circuit Breaker"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class ExternalServiceClient\n{\n    private readonly HttpClient _httpClient;\n    private readonly ICircuitBreaker _circuitBreaker;\n\n    public async Task<T> CallExternalServiceAsync<T>(string endpoint, object request)\n    {\n        return await _circuitBreaker.ExecuteAsync(async () =>\n        {\n            var response = await _httpClient.PostAsJsonAsync(endpoint, request);\n            response.EnsureSuccessStatusCode();\n            return await response.Content.ReadFromJsonAsync<T>();\n        });\n    }\n}\n\npublic class CircuitBreakerConfiguration\n{\n    public int FailureThreshold { get; set; } = 5;\n    public TimeSpan OpenTimeout { get; set; } = TimeSpan.FromMinutes(1);\n    public TimeSpan HalfOpenTimeout { get; set; } = TimeSpan.FromSeconds(30);\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Retry Policies"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class RetryPolicyConfiguration\n{\n    public static IAsyncPolicy<HttpResponseMessage> GetHttpRetryPolicy()\n    {\n        return Policy\n            .HandleResult<HttpResponseMessage>(r => !r.IsSuccessStatusCode)\n            .Or<HttpRequestException>()\n            .WaitAndRetryAsync(\n                retryCount: 3,\n                sleepDurationProvider: retryAttempt =>\n                    TimeSpan.FromSeconds(Math.Pow(2, retryAttempt)),\n                onRetry: (outcome, timespan, retryCount, context) =>\n                {\n                    var logger = context.GetLogger();\n                    logger?.LogWarning("Retry {RetryCount} after {Delay}ms",\n                        retryCount, timespan.TotalMilliseconds);\n                });\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"84-persistencia",children:"8.4 Persistencia"}),"\n",(0,r.jsx)(n.h3,{id:"841-event-store-design",children:"8.4.1 Event Store Design"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Schema Design"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Events table optimized for append operations\nCREATE TABLE events (\n    id BIGSERIAL PRIMARY KEY,\n    stream_id VARCHAR(255) NOT NULL,\n    version INTEGER NOT NULL,\n    event_type VARCHAR(255) NOT NULL,\n    event_data JSONB NOT NULL,\n    metadata JSONB,\n    timestamp TIMESTAMPTZ DEFAULT NOW(),\n    tenant_id VARCHAR(50) NOT NULL,\n\n    CONSTRAINT events_stream_version_unique UNIQUE (stream_id, version)\n);\n\n-- Indexes for optimal query performance\nCREATE INDEX idx_events_stream_id ON events (stream_id);\nCREATE INDEX idx_events_timestamp ON events (timestamp);\nCREATE INDEX idx_events_tenant_id ON events (tenant_id);\nCREATE INDEX idx_events_event_type ON events (event_type);\n\n-- Partitioning by tenant for large scale\nCREATE TABLE events_tenant_001 PARTITION OF events\nFOR VALUES IN ('tenant-001');\n\n-- Snapshots for performance optimization\nCREATE TABLE snapshots (\n    stream_id VARCHAR(255) PRIMARY KEY,\n    version INTEGER NOT NULL,\n    data JSONB NOT NULL,\n    metadata JSONB,\n    timestamp TIMESTAMPTZ DEFAULT NOW(),\n    tenant_id VARCHAR(50) NOT NULL\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Repository Pattern Implementation"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class PostgreSqlEventStore : IEventStore\n{\n    private readonly IDbConnectionFactory _connectionFactory;\n    private readonly IEventSerializer _serializer;\n    private readonly ILogger<PostgreSqlEventStore> _logger;\n\n    public async Task<IEnumerable<EventData>> GetEventsAsync(\n        string streamId,\n        int fromVersion = 0,\n        int? toVersion = null)\n    {\n        using var connection = await _connectionFactory.CreateConnectionAsync();\n\n        var sql = @"\n            SELECT event_type, event_data, metadata, version, timestamp\n            FROM events\n            WHERE stream_id = @streamId\n            AND version >= @fromVersion\n            AND (@toVersion IS NULL OR version <= @toVersion)\n            ORDER BY version";\n\n        var parameters = new { streamId, fromVersion, toVersion };\n        var results = await connection.QueryAsync<EventRecord>(sql, parameters);\n\n        return results.Select(r => new EventData\n        {\n            EventType = r.EventType,\n            Data = r.EventData,\n            Metadata = r.Metadata,\n            Version = r.Version,\n            Timestamp = r.Timestamp\n        });\n    }\n\n    public async Task AppendEventsAsync(string streamId, IEnumerable<EventData> events)\n    {\n        using var connection = await _connectionFactory.CreateConnectionAsync();\n        using var transaction = await connection.BeginTransactionAsync();\n\n        try\n        {\n            var currentVersion = await GetCurrentVersionAsync(connection, streamId);\n            var eventsToAppend = events.ToList();\n\n            for (int i = 0; i < eventsToAppend.Count; i++)\n            {\n                var @event = eventsToAppend[i];\n                var newVersion = currentVersion + i + 1;\n\n                await InsertEventAsync(connection, streamId, @event, newVersion);\n            }\n\n            await transaction.CommitAsync();\n\n            // Publish events after successful persistence\n            await PublishEvents(streamId, eventsToAppend);\n        }\n        catch\n        {\n            await transaction.RollbackAsync();\n            throw;\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"842-read-model-management",children:"8.4.2 Read Model Management"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Projection Engine"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class ProjectionEngine\n{\n    private readonly IEventStore _eventStore;\n    private readonly IProjectionStore _projectionStore;\n    private readonly ILogger<ProjectionEngine> _logger;\n\n    public async Task RebuildProjectionAsync<T>(string projectionName) where T : IProjection\n    {\n        _logger.LogInformation("Starting rebuild of projection {ProjectionName}", projectionName);\n\n        // Reset projection state\n        await _projectionStore.ResetProjectionAsync(projectionName);\n\n        // Process all events from the beginning\n        var checkpoint = await _projectionStore.GetCheckpointAsync(projectionName) ?? 0;\n        var events = _eventStore.GetAllEventsAsync(checkpoint);\n\n        await foreach (var @event in events)\n        {\n            var projection = await _projectionStore.GetProjectionAsync<T>(projectionName);\n            await projection.HandleAsync(@event);\n            await _projectionStore.SaveProjectionAsync(projectionName, projection);\n            await _projectionStore.UpdateCheckpointAsync(projectionName, @event.GlobalPosition);\n        }\n\n        _logger.LogInformation("Completed rebuild of projection {ProjectionName}", projectionName);\n    }\n}\n\npublic class TimelineProjection : IProjection\n{\n    public string Id { get; set; }\n    public List<TimelineEvent> Events { get; set; } = new();\n\n    public async Task HandleAsync(IDomainEvent @event)\n    {\n        switch (@event)\n        {\n            case EntityCreatedEvent created:\n                Events.Add(new TimelineEvent\n                {\n                    Timestamp = created.Timestamp,\n                    EventType = "Created",\n                    Description = $"Entity {created.EntityId} was created",\n                    Data = created.Data\n                });\n                break;\n\n            case EntityUpdatedEvent updated:\n                Events.Add(new TimelineEvent\n                {\n                    Timestamp = updated.Timestamp,\n                    EventType = "Updated",\n                    Description = $"Entity {updated.EntityId} was updated",\n                    Data = updated.Changes\n                });\n                break;\n\n            case EntityDeletedEvent deleted:\n                Events.Add(new TimelineEvent\n                {\n                    Timestamp = deleted.Timestamp,\n                    EventType = "Deleted",\n                    Description = $"Entity {deleted.EntityId} was deleted",\n                    Data = deleted.Reason\n                });\n                break;\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"85-sesi\xf3n-de-usuario",children:"8.5 Sesi\xf3n de usuario"}),"\n",(0,r.jsx)(n.h3,{id:"851-context-management",children:"8.5.1 Context Management"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"User Context Service"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public interface IUserContext\n{\n    string UserId { get; }\n    string TenantId { get; }\n    string[] Roles { get; }\n    Dictionary<string, string> Claims { get; }\n    bool HasPermission(string permission);\n}\n\npublic class HttpUserContext : IUserContext\n{\n    private readonly IHttpContextAccessor _httpContextAccessor;\n\n    public string UserId => _httpContextAccessor.HttpContext?.User?.GetUserId();\n    public string TenantId => _httpContextAccessor.HttpContext?.User?.GetTenantId();\n    public string[] Roles => _httpContextAccessor.HttpContext?.User?.GetRoles() ?? Array.Empty<string>();\n\n    public bool HasPermission(string permission)\n    {\n        return _httpContextAccessor.HttpContext?.User?.HasClaim("permissions", permission) ?? false;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"852-audit-trail",children:"8.5.2 Audit Trail"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Audit Event Capture"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class AuditEventInterceptor : IInterceptor\n{\n    private readonly IAuditService _auditService;\n    private readonly IUserContext _userContext;\n\n    public void Intercept(IInvocation invocation)\n    {\n        var auditableAttribute = invocation.Method.GetCustomAttribute<AuditableAttribute>();\n        if (auditableAttribute != null)\n        {\n            var auditEvent = new AuditEvent\n            {\n                UserId = _userContext.UserId,\n                TenantId = _userContext.TenantId,\n                Action = auditableAttribute.Action,\n                Resource = auditableAttribute.Resource,\n                Timestamp = DateTime.UtcNow,\n                Parameters = SerializeParameters(invocation.Arguments)\n            };\n\n            _auditService.RecordAuditEvent(auditEvent);\n        }\n\n        invocation.Proceed();\n    }\n}\n\n[Auditable(Action = "READ", Resource = "Timeline")]\npublic async Task<TimelineView> GetTimelineAsync(string entityId)\n{\n    // Method implementation\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"86-configuraci\xf3n",children:"8.6 Configuraci\xf3n"}),"\n",(0,r.jsx)(n.h3,{id:"861-gesti\xf3n-de-configuraci\xf3n",children:"8.6.1 Gesti\xf3n de Configuraci\xf3n"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Hierarchical Configuration"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class TrackTraceConfiguration\n{\n    public DatabaseConfiguration Database { get; set; }\n    public EventStoreConfiguration EventStore { get; set; }\n    public MessagingConfiguration Messaging { get; set; }\n    public SecurityConfiguration Security { get; set; }\n    public ObservabilityConfiguration Observability { get; set; }\n}\n\npublic class ConfigurationService\n{\n    private readonly IConfiguration _configuration;\n    private readonly IOptionsMonitor<TrackTraceConfiguration> _options;\n\n    public T GetConfiguration<T>(string section) where T : class, new()\n    {\n        var config = new T();\n        _configuration.GetSection(section).Bind(config);\n        return config;\n    }\n\n    public void ValidateConfiguration()\n    {\n        var config = _options.CurrentValue;\n\n        if (string.IsNullOrEmpty(config.Database.ConnectionString))\n            throw new InvalidOperationException("Database connection string is required");\n\n        if (string.IsNullOrEmpty(config.Security.Authority))\n            throw new InvalidOperationException("Security authority is required");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"862-environment-specific-settings",children:"8.6.2 Environment-specific Settings"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# appsettings.Development.json\n{\n  "TrackTrace": {\n    "Database": {\n      "ConnectionString": "Host=localhost;Database=tracktracedb_dev;Username=dev;Password=dev123",\n      "MaxRetryCount": 3,\n      "CommandTimeout": 30\n    },\n    "EventStore": {\n      "BatchSize": 100,\n      "SnapshotFrequency": 50\n    },\n    "Messaging": {\n      "EventBus": {\n        "Configuration": "localhost:5672",\n        "GroupId": "track-trace-dev",\n        "AutoRestart": "true"\n      }\n    },\n    "Security": {\n      "Authority": "https://identity-dev.talma.local",\n      "Audience": "track-trace-api",\n      "RequireHttpsMetadata": false\n    }\n  }\n}\n\n# appsettings.Production.json\n{\n  "TrackTrace": {\n    "Database": {\n      "ConnectionString": "${DATABASE_CONNECTION_STRING}",\n      "MaxRetryCount": 5,\n      "CommandTimeout": 60\n    },\n    "EventStore": {\n      "BatchSize": 500,\n      "SnapshotFrequency": 100\n    },\n    "Messaging": {\n      "EventBus": {\n        "Configuration": "${EVENTBUS_CONFIGURATION}",\n        "GroupId": "track-trace-prod",\n        "SecurityProtocol": "SaslSsl",\n        "SaslMechanism": "Plain"\n      }\n    },\n    "Security": {\n      "Authority": "https://identity.talma.com",\n      "Audience": "track-trace-api",\n      "RequireHttpsMetadata": true\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"87-internacionalizaci\xf3n",children:"8.7 Internacionalizaci\xf3n"}),"\n",(0,r.jsx)(n.h3,{id:"871-multi-language-support",children:"8.7.1 Multi-language Support"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Resource Management"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class LocalizedMessageService\n{\n    private readonly IStringLocalizer<LocalizedMessageService> _localizer;\n    private readonly IUserContext _userContext;\n\n    public string GetLocalizedMessage(string key, params object[] args)\n    {\n        var culture = GetUserCulture();\n        using var scope = CultureInfo.CreateSpecificCulture(culture);\n\n        return _localizer[key, args];\n    }\n\n    private string GetUserCulture()\n    {\n        return _userContext.Claims.GetValueOrDefault("preferred_language", "en-US");\n    }\n}\n\n// Resource files structure:\n// Resources/\n//   SharedResource.en-US.resx\n//   SharedResource.es-ES.resx\n//   SharedResource.pt-BR.resx\n'})}),"\n",(0,r.jsx)(n.h3,{id:"872-timezone-handling",children:"8.7.2 Timezone Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class TimezoneService\n{\n    private readonly IUserContext _userContext;\n\n    public DateTime ConvertToUserTimezone(DateTime utcDateTime)\n    {\n        var userTimezone = GetUserTimezone();\n        var timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(userTimezone);\n        return TimeZoneInfo.ConvertTimeFromUtc(utcDateTime, timeZoneInfo);\n    }\n\n    public DateTime ConvertToUtc(DateTime localDateTime, string timeZoneId = null)\n    {\n        var timezone = timeZoneId ?? GetUserTimezone();\n        var timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(timezone);\n        return TimeZoneInfo.ConvertTimeToUtc(localDateTime, timeZoneInfo);\n    }\n\n    private string GetUserTimezone()\n    {\n        return _userContext.Claims.GetValueOrDefault("timezone", "UTC");\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pol\xedticas de autorizaci\xf3n"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TrackTraceRead"}),": Lectura de datos de trazabilidad"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TrackTraceWrite"}),": Creaci\xf3n de eventos de seguimiento"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TrackTraceAdmin"}),": Gesti\xf3n de configuraciones y analytics"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TrackTraceAudit"}),": Acceso a logs de auditor\xeda"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"822-protecci\xf3n-de-datos",children:"8.2.2 Protecci\xf3n de datos"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Cifrado"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"En tr\xe1nsito"}),": TLS 1.3 para todas las comunicaciones"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"En reposo"}),": AES-256 para datos sensibles en Event Store"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Claves"}),": Rotaci\xf3n autom\xe1tica cada 90 d\xedas"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Data masking"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class EventDataMasker\n{\n    public string MaskSensitiveData(string eventData, EventType eventType)\n    {\n        if (eventType.ContainsPII)\n        {\n            return _maskingEngine.ApplyRules(eventData, _piiMaskingRules);\n        }\n        return eventData;\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Compliance"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"GDPR"}),": Right to be forgotten implementado via event compensation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SOX"}),": Inmutabilidad de registros financieros"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Audit trails"}),": Logs tamper-proof con digital signatures"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"83-multi-tenancy-1",children:"8.3 Multi-tenancy"}),"\n",(0,r.jsx)(n.h3,{id:"831-aislamiento-de-datos",children:"8.3.1 Aislamiento de datos"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Estrategia"}),": Schema-per-tenant para aislamiento completo"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Tenant-specific event streams\nCREATE SCHEMA tenant_abc123;\nCREATE TABLE tenant_abc123.events (\n    stream_id VARCHAR(255) NOT NULL,\n    version BIGINT NOT NULL,\n    event_type VARCHAR(255) NOT NULL,\n    event_data JSONB NOT NULL,\n    metadata JSONB,\n    timestamp TIMESTAMPTZ DEFAULT NOW(),\n    PRIMARY KEY (stream_id, version)\n);\n\n-- Row-level security como backup\nALTER TABLE events ENABLE ROW LEVEL SECURITY;\nCREATE POLICY tenant_isolation ON events\nFOR ALL TO application_role\nUSING (tenant_id = current_setting('app.current_tenant_id'));\n"})}),"\n",(0,r.jsx)(n.h3,{id:"832-configuraci\xf3n-por-tenant",children:"8.3.2 Configuraci\xf3n por tenant"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class TenantConfiguration\n{\n    public string TenantId { get; set; }\n    public EventRetentionPolicy RetentionPolicy { get; set; }\n    public AnalyticsSettings Analytics { get; set; }\n    public ComplianceSettings Compliance { get; set; }\n    public IntegrationEndpoints Integrations { get; set; }\n}\n\npublic class TenantConfigurationService\n{\n    public async Task<TenantConfiguration> GetConfigurationAsync(string tenantId)\n    {\n        return await _cache.GetOrSetAsync($"tenant:config:{tenantId}",\n            () => _repository.GetTenantConfigurationAsync(tenantId),\n            TimeSpan.FromHours(1));\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"84-observabilidad",children:"8.4 Observabilidad"}),"\n",(0,r.jsx)(n.h3,{id:"841-structured-logging",children:"8.4.1 Structured logging"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Serilog configuration"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'Log.Logger = new LoggerConfiguration()\n    .Enrich.WithProperty("Service", "TrackTrace")\n    .Enrich.WithProperty("Version", Assembly.GetExecutingAssembly().GetName().Version)\n    .Enrich.WithCorrelationId()\n    .WriteTo.Console(new JsonFormatter())\n    .WriteTo.Elasticsearch(new ElasticsearchSinkOptions(new Uri(elasticUrl))\n    {\n        IndexFormat = "tracktrace-logs-{0:yyyy.MM.dd}",\n        AutoRegisterTemplate = true\n    })\n    .CreateLogger();\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Contexto de eventos"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class EventLoggingContext\n{\n    public string CorrelationId { get; set; }\n    public string TenantId { get; set; }\n    public string EntityId { get; set; }\n    public string EventType { get; set; }\n    public string UserId { get; set; }\n    public DateTime Timestamp { get; set; }\n}\n\n// Usage in event handler\nusing (LogContext.PushProperty("TenantId", @event.TenantId))\nusing (LogContext.PushProperty("EntityId", @event.EntityId))\n{\n    _logger.LogInformation("Processing event {@Event}", @event);\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"842-m\xe9tricas-y-telemetr\xeda",children:"8.4.2 M\xe9tricas y telemetr\xeda"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Custom metrics"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class TrackTraceMetrics\n{\n    private readonly IMetricLogger _metrics;\n\n    public void RecordEventProcessed(string eventType, string tenantId, TimeSpan duration)\n    {\n        _metrics.Counter("events_processed_total")\n               .WithTag("event_type", eventType)\n               .WithTag("tenant_id", tenantId)\n               .Increment();\n\n        _metrics.Histogram("event_processing_duration_ms")\n               .WithTag("event_type", eventType)\n               .Record(duration.TotalMilliseconds);\n    }\n\n    public void RecordQueryExecuted(string queryType, bool fromCache, TimeSpan duration)\n    {\n        _metrics.Counter("queries_executed_total")\n               .WithTag("query_type", queryType)\n               .WithTag("cache_hit", fromCache.ToString())\n               .Increment();\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Distributed tracing"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class EventHandler\n{\n    private readonly ActivitySource _activitySource = new("TrackTrace.Events");\n\n    public async Task Handle(DomainEvent @event)\n    {\n        using var activity = _activitySource.StartActivity("EventHandler.Handle");\n        activity?.SetTag("event.type", @event.GetType().Name);\n        activity?.SetTag("event.id", @event.Id);\n        activity?.SetTag("tenant.id", @event.TenantId);\n\n        // Process event\n        await ProcessEvent(@event);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"85-performance-y-escalabilidad",children:"8.5 Performance y escalabilidad"}),"\n",(0,r.jsx)(n.h3,{id:"851-estrategias-de-cache",children:"8.5.1 Estrategias de cache"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Niveles de cache"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"L1 (In-memory)"}),": Cache local para hot data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"L2 (Redis)"}),": Cache distribuido para read models"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"L3 (CDN)"}),": Cache de edge para datos p\xfablicos"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class CachedTimelineService\n{\n    public async Task<TimelineView> GetTimelineAsync(string entityId, string tenantId)\n    {\n        var cacheKey = $"timeline:{tenantId}:{entityId}";\n\n        // L1 Cache\n        if (_memoryCache.TryGetValue(cacheKey, out TimelineView cachedTimeline))\n            return cachedTimeline;\n\n        // L2 Cache\n        var timelineJson = await _distributedCache.GetStringAsync(cacheKey);\n        if (timelineJson != null)\n        {\n            var timeline = JsonSerializer.Deserialize<TimelineView>(timelineJson);\n            _memoryCache.Set(cacheKey, timeline, TimeSpan.FromMinutes(5));\n            return timeline;\n        }\n\n        // Database query\n        var freshTimeline = await _queryHandler.Handle(new GetTimelineQuery(entityId, tenantId));\n        await _distributedCache.SetStringAsync(cacheKey, JsonSerializer.Serialize(freshTimeline),\n                                             new DistributedCacheEntryOptions\n                                             {\n                                                 SlidingExpiration = TimeSpan.FromMinutes(15)\n                                             });\n        return freshTimeline;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"852-particionado-y-sharding",children:"8.5.2 Particionado y sharding"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Event store partitioning"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Partition by tenant and time for optimal query performance\nCREATE TABLE events (\n    stream_id VARCHAR(255) NOT NULL,\n    version BIGINT NOT NULL,\n    tenant_id VARCHAR(50) NOT NULL,\n    timestamp TIMESTAMPTZ DEFAULT NOW(),\n    event_type VARCHAR(255) NOT NULL,\n    event_data JSONB NOT NULL\n) PARTITION BY RANGE (timestamp);\n\n-- Monthly partitions\nCREATE TABLE events_2024_01 PARTITION OF events\nFOR VALUES FROM ('2024-01-01') TO ('2024-02-01');\n\nCREATE TABLE events_2024_02 PARTITION OF events\nFOR VALUES FROM ('2024-02-01') TO ('2024-03-01');\n"})}),"\n",(0,r.jsx)(n.h2,{id:"86-manejo-de-errores",children:"8.6 Manejo de errores"}),"\n",(0,r.jsx)(n.h3,{id:"861-estrategias-de-retry",children:"8.6.1 Estrategias de retry"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class RetryPolicy\n{\n    public static async Task<T> ExecuteWithRetryAsync<T>(\n        Func<Task<T>> operation,\n        int maxAttempts = 3,\n        TimeSpan delay = default)\n    {\n        var attempts = 0;\n        while (attempts < maxAttempts)\n        {\n            try\n            {\n                return await operation();\n            }\n            catch (Exception ex) when (IsRetriableException(ex) && attempts < maxAttempts - 1)\n            {\n                attempts++;\n                var waitTime = CalculateBackoffDelay(attempts, delay);\n                await Task.Delay(waitTime);\n            }\n        }\n\n        throw new MaxRetryAttemptsExceededException(maxAttempts);\n    }\n\n    private static bool IsRetriableException(Exception ex)\n    {\n        return ex is TimeoutException ||\n               ex is HttpRequestException ||\n               ex is PostgresException { SqlState: "40001" }; // Serialization failure\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"862-circuit-breaker-pattern",children:"8.6.2 Circuit breaker pattern"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class EventStoreCircuitBreaker\n{\n    private readonly CircuitBreakerOptions _options;\n    private volatile CircuitBreakerState _state = CircuitBreakerState.Closed;\n    private volatile int _failureCount = 0;\n    private volatile DateTime _lastFailureTime = DateTime.MinValue;\n\n    public async Task<T> ExecuteAsync<T>(Func<Task<T>> operation)\n    {\n        if (_state == CircuitBreakerState.Open)\n        {\n            if (DateTime.UtcNow.Subtract(_lastFailureTime) > _options.OpenTimeout)\n            {\n                _state = CircuitBreakerState.HalfOpen;\n            }\n            else\n            {\n                throw new CircuitBreakerOpenException("Event store circuit breaker is open");\n            }\n        }\n\n        try\n        {\n            var result = await operation();\n            OnSuccess();\n            return result;\n        }\n        catch (Exception ex)\n        {\n            OnFailure(ex);\n            throw;\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"87-testing",children:"8.7 Testing"}),"\n",(0,r.jsx)(n.h3,{id:"871-test-strategies",children:"8.7.1 Test strategies"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Event sourcing tests"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class EventStoreTests\n{\n    [Fact]\n    public async Task Should_Reconstruct_Entity_State_From_Events()\n    {\n        // Given\n        var entityId = "entity-123";\n        var events = new List<DomainEvent>\n        {\n            new EntityCreated(entityId, "Test Entity"),\n            new EntityStatusChanged(entityId, Status.Active),\n            new EntityUpdated(entityId, "Updated Entity")\n        };\n\n        // When\n        foreach (var @event in events)\n        {\n            await _eventStore.AppendEventsAsync(entityId, @event.Version - 1, new[] { @event });\n        }\n\n        var reconstructedEntity = await _entityRepository.GetByIdAsync(entityId);\n\n        // Then\n        reconstructedEntity.Should().NotBeNull();\n        reconstructedEntity.Name.Should().Be("Updated Entity");\n        reconstructedEntity.Status.Should().Be(Status.Active);\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Integration tests"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class TimelineIntegrationTests : IClassFixture<WebApplicationFactory<Program>>\n{\n    [Fact]\n    public async Task Should_Return_Timeline_For_Valid_Entity()\n    {\n        // Given\n        var client = _factory.CreateClient();\n        var entityId = await CreateTestEntity();\n\n        // When\n        var response = await client.GetAsync($"/api/v1/timeline/{entityId}");\n\n        // Then\n        response.StatusCode.Should().Be(HttpStatusCode.OK);\n        var timeline = await response.Content.ReadFromJsonAsync<TimelineView>();\n        timeline.Events.Should().NotBeEmpty();\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Contract Tests"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class EventContractTests\n{\n    [Test]\n    public void Events_ShouldMaintainBackwardCompatibility()\n    {\n        var schemas = new[]\n        {\n            typeof(EntityCreatedEvent),\n            typeof(EntityUpdatedEvent),\n            typeof(EntityDeletedEvent)\n        };\n\n        foreach (var schema in schemas)\n        {\n            var jsonSchema = JsonSchema.FromType(schema);\n            var validator = new JsonSchemaValidator();\n\n            // Verify against previous version schemas\n            var isCompatible = validator.ValidateBackwardCompatibility(jsonSchema);\n            isCompatible.Should().BeTrue($"Schema {schema.Name} breaks backward compatibility");\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"872-test-data-management",children:"8.7.2 Test Data Management"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Test Factories"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class EventDataBuilder\n{\n    private string _eventType = "TestEvent";\n    private object _data = new { };\n    private int _version = 1;\n\n    public EventDataBuilder WithEventType(string eventType)\n    {\n        _eventType = eventType;\n        return this;\n    }\n\n    public EventDataBuilder WithData(object data)\n    {\n        _data = data;\n        return this;\n    }\n\n    public EventDataBuilder WithVersion(int version)\n    {\n        _version = version;\n        return this;\n    }\n\n    public EventData Build()\n    {\n        return new EventData\n        {\n            EventType = _eventType,\n            Data = JsonSerializer.Serialize(_data),\n            Version = _version,\n            Timestamp = DateTime.UtcNow\n        };\n    }\n}\n\npublic class ScenarioBuilder\n{\n    private readonly List<EventData> _events = new();\n\n    public ScenarioBuilder Given(params EventData[] events)\n    {\n        _events.AddRange(events);\n        return this;\n    }\n\n    public async Task<ScenarioResult> When(Func<Task> action)\n    {\n        // Setup initial state\n        foreach (var @event in _events)\n        {\n            await ApplyEvent(@event);\n        }\n\n        // Execute action\n        var exception = await Record.ExceptionAsync(action);\n\n        return new ScenarioResult\n        {\n            Exception = exception,\n            FinalState = await GetCurrentState()\n        };\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"810-observabilidad",children:"8.10 Observabilidad"}),"\n",(0,r.jsx)(n.h3,{id:"8101-logging-structure",children:"8.10.1 Logging Structure"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Registro Estructurado Configuration"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public static class LoggingExtensions\n{\n    public static IServiceCollection AddStructuredLogging(this IServiceCollection services)\n    {\n        Log.Logger = new LoggerConfiguration()\n            .Enrich.FromLogContext()\n            .Enrich.WithProperty("Service", "track-trace-api")\n            .Enrich.WithMachineName()\n            .Enrich.WithEnvironmentName()\n            .WriteTo.Console(new JsonFormatter())\n            .WriteTo.Elasticsearch(new ElasticsearchSinkOptions(new Uri("http://elasticsearch:9200"))\n            {\n                IndexFormat = "track-trace-logs-{0:yyyy.MM.dd}",\n                AutoRegisterTemplate = true\n            })\n            .CreateLogger();\n\n        return services.AddSerilog();\n    }\n\n    public static void LogEventProcessed<T>(this ILogger logger, T @event, string streamId, TimeSpan duration)\n        where T : IDomainEvent\n    {\n        logger.LogInformation("Event processed: {EventType} for stream {StreamId} in {Duration}ms",\n            typeof(T).Name, streamId, duration.TotalMilliseconds);\n    }\n\n    public static void LogEventProcessingFailed<T>(this ILogger logger, T @event, string streamId, Exception exception)\n        where T : IDomainEvent\n    {\n        logger.LogError(exception, "Failed to process event {EventType} for stream {StreamId}",\n            typeof(T).Name, streamId);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"8102-metrics-and-monitoring",children:"8.10.2 Metrics and Monitoring"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Custom Metrics"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class TrackTraceMetrics\n{\n    private readonly IMetricsLogger _metricsLogger;\n\n    // Counters\n    public Counter<long> EventsProcessed { get; }\n    public Counter<long> EventsPublished { get; }\n    public Counter<long> EventProcessingErrors { get; }\n\n    // Histograms\n    public Histogram<double> EventProcessingDuration { get; }\n    public Histogram<double> QueryDuration { get; }\n\n    // Gauges\n    public ObservableGauge<int> ActiveEventStreams { get; }\n    public ObservableGauge<long> EventStoreSize { get; }\n\n    public TrackTraceMetrics(IMeterFactory meterFactory)\n    {\n        var meter = meterFactory.Create("TrackTrace");\n\n        EventsProcessed = meter.CreateCounter<long>("events_processed_total",\n            description: "Total number of events processed");\n\n        EventProcessingDuration = meter.CreateHistogram<double>("event_processing_duration_seconds",\n            description: "Time taken to process events");\n\n        ActiveEventStreams = meter.CreateObservableGauge<int>("active_event_streams",\n            description: "Number of currently active event streams");\n    }\n\n    public void RecordEventProcessed(string eventType, TimeSpan duration)\n    {\n        EventsProcessed.Add(1, new("event_type", eventType));\n        EventProcessingDuration.Record(duration.TotalSeconds, new("event_type", eventType));\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"8103-health-checks",children:"8.10.3 Health Checks"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Comprehensive Health Checks"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class EventStoreHealthCheck : IHealthCheck\n{\n    private readonly IEventStore _eventStore;\n\n    public async Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context,\n        CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            await _eventStore.GetEventsAsync("health-check-stream", 0, cancellationToken);\n            return HealthCheckResult.Healthy("Event store is responding");\n        }\n        catch (Exception ex)\n        {\n            return HealthCheckResult.Unhealthy("Event store is not responding", ex);\n        }\n    }\n}\n\npublic class ProjectionHealthCheck : IHealthCheck\n{\n    private readonly IProjectionStore _projectionStore;\n\n    public async Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context,\n        CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var lastCheckpoint = await _projectionStore.GetLastCheckpointAsync();\n            var currentPosition = await _eventStore.GetCurrentPositionAsync();\n\n            var lag = currentPosition - lastCheckpoint;\n\n            if (lag > 1000)\n            {\n                return HealthCheckResult.Degraded($"Projection lag is {lag} events");\n            }\n\n            return HealthCheckResult.Healthy($"Projection lag is {lag} events");\n        }\n        catch (Exception ex)\n        {\n            return HealthCheckResult.Unhealthy("Projection health check failed", ex);\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"8104-trazado-distribuido",children:"8.10.4 Trazado Distribuido"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"OpenTelemetry Integration"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public static class TracingExtensions\n{\n    public static IServiceCollection AddDistributedTracing(this IServiceCollection services)\n    {\n        services.AddOpenTelemetry()\n            .WithTracing(builder =>\n            {\n                builder\n                    .AddSource("TrackTrace")\n                    .SetSampler(new AlwaysOnSampler())\n                    .AddAspNetCoreInstrumentation()\n                    .AddHttpClientInstrumentation()\n                    .AddNpgsqlInstrumentation()\n                    .AddJaegerExporter();\n            });\n\n        return services;\n    }\n}\n\npublic class EventHandlerTracing\n{\n    private static readonly ActivitySource ActivitySource = new("TrackTrace");\n\n    public async Task<T> TraceEventHandling<T>(string eventType, string streamId, Func<Task<T>> handler)\n    {\n        using var activity = ActivitySource.StartActivity($"handle-{eventType}");\n        activity?.SetTag("event.type", eventType);\n        activity?.SetTag("stream.id", streamId);\n        activity?.SetTag("service.name", "track-trace");\n\n        try\n        {\n            var result = await handler();\n            activity?.SetStatus(ActivityStatusCode.Ok);\n            return result;\n        }\n        catch (Exception ex)\n        {\n            activity?.SetStatus(ActivityStatusCode.Error, ex.Message);\n            activity?.RecordException(ex);\n            throw;\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Puntos clave de los conceptos transversales"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Sourcing"}),": Principio arquitect\xf3nico fundamental que garantiza auditabilidad y permite an\xe1lisis temporal"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CQRS"}),": Separaci\xf3n clara entre comandos y consultas con read models especializados"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Seguridad"}),": Multi-tenant con JWT, autorizaci\xf3n granular y cumplimiento normativo"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Comunicaci\xf3n"}),": Event-driven architecture con Event Bus y patrones de resiliencia"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Persistencia"}),": Event Store optimizado con PostgreSQL y proyecciones especializadas"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Observabilidad"}),": Logging estructurado, m\xe9tricas detalladas y trazado distribuido"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Testing"}),": Estrategia completa desde unit tests hasta contract testing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configuraci\xf3n"}),": Gesti\xf3n jer\xe1rquica con validaci\xf3n y configuraci\xf3n por ambiente"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Estos conceptos garantizan que el servicio Track & Trace sea robusto, escalable y mantenible en un entorno empresarial."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);